Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?

Необходимо периодически заходить в чат "Homework", и проверять, нет ли там сообщения типа "@my_nickname прими пулл" (00:05)

2) Как принять домашку?

Заходим в программу GitHub Desktop, нажимаем кнопку "Fetch origin", ждём выполнения данной команды. Далее на левой боковой панели открываем вкладку "History", заходим на самый верхний коммит, проверяем, что все внесённые изменения сохранены. Далее открываем наш репозиторий через редактор кода 
Visual Studio Code (кнопка "Open in Visual Studio Code" на центральном экране программы. В редакторе кода Visual Studio Code слева на боковой панели инструментов нажимаем значок с двумя листиками и ознакамливаемся с домашним заданием (00:17)

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?

Данная кнопка/вкладка показывает историю выполненных коммитов. При нажатии правой кнопки мыши на коммит появляются различные функции по работе с конкретным коммитом, а также функции копирования хеш-суммы, тега коммита и функция открытия коммита на ГитХаб (04:14)

3.1) Где брать ссылку на коммит? куда её отправлять? 

Ссылку на коммит следует брать в адресной строке браузера после того, как соответствующий коммит был открыт на ГитХабе (04:18) 

4) Что такое файл лога? 

Файл лога нужно заполнять в конце каждого урока. В нём должна быть дата урока, и что мы делали/запомнили в течении урока. (01:31)

4.1) Когда нужно его пушить?

После окончания выполнения домашнего задания (03:37)

5) Что такое интерпритатор? 

Интерпретатор - это программа, которая читает и запускает наш код (03:20)

6) Где можно выбрать интерпритатор?

На левой стороне ячейки нажимаем значок запуска кода ячейки и вверху в выпадающем списке выбираем интерпретатор (03.14)

7) Что такое модуль? 

Модуль - это обычный файл типа .py или .ipynb (09:45)

8) Как создать и отправить коммит?

Заходим в программу GitHub Desktop, на кнопке/вкладке "Changes" проверяем наличие созданных/изменённых файлов. Далее внизу в окошке "Summary" пишем название коммита и нажимаем кнопку "Commit to <название ветки>" (03:40)

9) Как посмотреть что коммит точно отправлен и находится в github?

В программе GitHub Desktop, после того, как мы выполнили пуш коммита, заходим во вкладку "History", видим, что коммит отобразился в истории коммитов. Нажимаем на данной вкладке правую кнопку мыши, выбираем "View on GitHub". Мы будем перенаправлены на наш репозиторий на GitHub, а именно на страницу, где находится отправленный ранее коммит (04:12)

10) Какая команда показывает что код не прошёл проверки на ошибки? 

При выполнении в терминале редактора кода команды pre-commit run --all-files в случае наличия ошибок в коде будет выведено соответствующее сообщение о таких ошибках (06:17)

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.

- jupitext:
    Линтер для работы с Jupyter Notebook. Позволяет сравнивать, обновлять и синхронизировать текстовые версии ноутбуков с .ipynb файлами. Удобен для контроля изменений в ноутбуках в системах контроля версий.
- docformatter:
    Форматирует docstring Python-кода в соответствии с PEP 257. Обеспечивает единообразие в описаниях функций, классов и модулей.
- black:
    Форматировщик кода, который автоматически преобразует Python-код в соответствие с PEP 8. Обеспечивает единообразие кода, не предоставляя настроек форматирования.
- nbqa-black:
    Инструмент для автоматического обновления кода Python до более современных синтаксических стандартов (например, обновление f-строк, аннотаций типов и т.д.).
- pyupgrade:
    Инструмент для автоматического обновления кода Python до более современных синтаксических стандартов (например, обновление f-строк, аннотаций типов и т.д.).
- isort:
    Линтер для автоматической сортировки импортов в Python-файлах. Группирует и упорядочивает импорты в соответствии с PEP 8.
- nbqa-blacken-docs:
    Инструмент для форматирования Python-кода, встроенного в текстовые блоки Jupyter Notebook, с использованием black.
- nbqa-pyupgrade:
    Расширение pyupgrade для работы с Jupyter Notebook. Обновляет Python-код в ноутбуках до более современных стандартов.
- nbqa-isort:
    Расширение для isort, предназначенное для Jupyter Notebook. Автоматически сортирует импорты в ячейках ноутбуков.
- codespell:
    Легкий инструмент для поиска и исправления опечаток в коде, комментариях и документации.
- nbqa-flake8:
    Расширение для flake8, предназначенное для работы с Jupyter Notebook. Применяет линтинг к ячейкам ноутбуков.
- flake8:
    Универсальный линтер для Python. Проверяет соответствие PEP 8, анализирует потенциальные ошибки и поддерживает плагины для дополнительных проверок.
- nbqa-mypy:
    Расширение для mypy, которое проверяет типы Python-кода в Jupyter Notebook. Полезен для проектов с аннотациями типов.
- mypy:
    Инструмент для статического анализа типов Python. Проверяет соответствие аннотаций типов и фактических данных.
- nbqa-pylint:
    Расширение для pylint, предназначенное для работы с Jupyter Notebook. Анализирует и оценивает качество Python-кода в ноутбуках.
- pylint:
    Линтер с высокой степенью настройки, который проверяет стиль кода, качество, возможные ошибки и соответствие PEP 8. Оценивает код по шкале.
- nbqa-pydockstyle:
    Расширение для проверки docstring в Jupyter Notebook. Использует правила pydocstyle, чтобы проверить соответствие PEP 257 и другим стандартам документирования.

11) Как узнать какой именно линтер не прошёл проверку?

В терминале редактора кода при запуске команды pre-commit run --all-files напротив линтера, не прошедшего проверку, будет расположена надпись "Failed" красного цвета (06:43)

12) Линтер Pylint видит markdown?

Нет, Pylint не видит Markdown. Он предназначен исключительно для анализа Python-кода и не учитывает содержимое Markdown-блоков, таких как комментарии или текст в Jupyter Notebook. (08:15)

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?

Да, номер ячейки в терминале (например, в выводе Jupyter Notebook) и номер ячейки в VS Code могут отличаться. Это происходит из-за особенностей работы с ячейками в Jupyter Notebook и их отображения в редакторах. (08:30)

14) Где посмотреть номер ячейки в vscode?

При запуске все ячеек (Run All), выполнение будет происходить в порядке их расположения в файле, и можно соотнести порядок из терминала с текущими ячейками в файле.

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?

Файлы с расширением .ipynb (Jupyter Notebook) сохраняются и отправляются в GitHub в формате JSON. JSON здесь имеет ключевую роль, так как это внутренний формат, в котором Jupyter Notebook хранит свои данные.

16) Где посмотреть в какой ячейке ошибка?

В сообщении об ошибке после названия файла идёт указание на номер ячейки, в которой допущена ошибка, например: "cell_1" (07:26)

17) Как запустить терминал?

В редакторе кода VS code вверху есть кнопка "Terminal", нажимаем на неё и выбираем "New Terminal" (06:31)

18) Что такое линтер?

Линтер - это программа, которая проверяет файл на корректность (06:52)

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?

https://pylint.pycqa.org (07:14)

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?

pylint (11:12)

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?

Описание модуля - это описание того, какая информация содержится в данном модуле (10:23)

21) С какой  git команды начинается утро программиста?

git pull

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?

Вверху нажимаем кнопку "Repository", и выбираем "Open in Visual Studio Code"

23) Что такое stash?  
  Общее объяснение концепции.

  Stash - это буфер, куда мы временно прячем файлы, чтобы принять pull

23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 

  git stash save "NAME_STASH"

  Кнопка в vs code:

  - открываем панель управления исходным кодом (Source Control) с помощью иконки на боковой панели (значок ветки с шариками);
  - вверху находим три точки и нажимаем на них;
  - в выпадающем меню выбираем: "Stash - Stash Changes".

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      a) через кошку:
      - на левой боковой панели нажимаем кнопку "Stashed Changes";
      - на центральном экране нажимаем кнопку "View stash";
      - далее нажимаем на кнопку "Restore".

      b) git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

      git stash apply "NUMBER_STASH"

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.

  Стэш используется для временного сохранения незавершённых изменений, 
  а коммит делается в том случае, если мы делаем изменения на постоянной основе.  Соответственно изменения в стэше сохраняются, когда они ещё 
  не закончены, и мы хотим их сохранить, чтобы вернуться к их завершению позже. Коммит же мы делаем, когда изменения полностью завершены и готовы 
  для интеграции в проект.

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  git stash list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  - удаление отдельного стэша: git drop;
  - удаление всех стэшей сразу: git stash clear.

23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

  Стэш используется для временного сохранения изменений, чтобы переключаться между задачами без их потери. Это полезно, если нужно срочно переключиться на другую ветку для исправления бага или начать экспериментировать с новым кодом, не засоряя историю коммитов. Также стэш помогает сохранить незавершённые изменения, чтобы вернуться к ним позже, после выполнения других задач или синхронизации с удалённым репозиторием. В целом, он обеспечивает гибкость в управлении рабочим процессом без ущерба для чистоты истории репозитория.

24) Где посмотреть что есть конфликт в файлах? 

В случае если мы через кошку восстановили локальные изменения путём нажатия 
на "Stashed changes", то в случае конфликта в файлах в кошке на левой боковой панели напротив таких файлов будет стоять восклицательный знак (17:15)
  
24.1) Когда он появляется?

Git не понимает, какие изменения надо сохранить - те которые пришли с GitHub или наши локальные изменения (17:18)

25) Как решить конфликт в файлах?

Обычно рекомендуется нажать кнопку Accept Current Change: будет принятo то, что пришло с ГитХаб (зелёная часть кода). Другие способы решения конфликта применяются редко.
(17:47)

26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 

> Зелёное то что пришло с гитхаба и синее локальные изменения.

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 

Да, можно принять pull после того, как мы спрятали свои изменения в стэш. 

27.1) Что может произойти когда stash восстановите после принятия pull?

При восстановлении изменений из стэша после git pull могут возникнуть конфликты, если изменения из стэша перекрываются с полученными из удалённой ветки. Если конфликтов нет, изменения будут успешно применены. В случае сложных конфликтов, Git предложит разрешить их вручную. 

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.

Есть несколько способов решения конфликта в файлах:
- нажать кнопку Accept Current Change: будет принятo то, что пришло с ГитХаб (зелёная часть кода);
- нажать кнопку Incoming Changes: будут приняты локальные изменения (синяя часть кода);
но в этом случае автоматически не будут приняты изменения с ГитХабa;
- нажать кнопку Accept Both Changes: будут приняты оба изменения (на практике применяется очень редко).
(17:47)

29) Что делает кнопка complete merge?

Данная кнопка завершает процесс решения конфликта (18:49)

30) В какой чат нужно писать если остались вопросы?

В чат "HELP ME" (19:40)

31) Что такое FORK? Зачем его делают? 

FORK - это операция, при которой мы копируем чужой репозиторий и делаем его личным. Это делается для того, чтобы мы могли вносить изменения в такой репозиторий, работать с ним в полной мере. (20:27)

32) Как скачать форкнутый репозиторий на локальный компьютер?

Заходим в кошку, на левой боковой панели выбираем "Add - Clone a repository". Выбираем данный репозиторий из списка и нажимаем "Clone". (20:50)

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?

С большой вероятностью наиболее распространённые ошибки обсуждались и были решены в чате "HELP ME". Их решили участники учебного сообщества и в дальнейшем такие ошибки можно искать в данном чате по коду соответствующей ошибки. 

34) Как создать файл в vs code?

2 способа создания файла:

a) навести курсор на название папки на левой боковой панели, нажать на значок листика с плюсом, ввести название и тип файла;
b) вверху редактора кода нажать на кнопку "File - New File...", ввести название и тип файла.

35) Файл лога нужно заполнять в конце каждого урока?

Да.
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 

Для конвертации файла .ipynb в .py используется команда:
jupyter nbconvert --to script <имя_файла>.ipynb

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?

Пакетный менеджер — это инструмент для управления библиотеками и зависимостями в проекте. На данный момент я использую пакетный менеджер Pip, но планирую со временем перейти на Conda. Для Data Science предпочтительнее использовать Conda, так как он лучше справляется с установкой сложных зависимостей и системных библиотек, таких как NumPy или TensorFlow. Conda также облегчает создание виртуальных окружений, что важно для работы с различными версиями библиотек.

3) Почему расширение py лучше чем ipynb?

Расширение .py лучше для производственных задач, так как скрипты запускаются быстрее и не требуют загрузки интерфейса Jupyter. Файлы .py универсальны, их легко интегрировать в системы контроля версий и CI/CD. Они удобнее для отладки и тестирования, особенно при работе в IDE. В то время как .ipynb полезен для исследований и визуализаций, .py предпочтительнее для развертывания и поддержания кода.

4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/

pep8 — это официальный стиль написания Python-кода, описанный в официальной документации. Он включает рекомендации по форматированию, отступам, именованию переменных и других аспектах, чтобы сделать код читаемым и единообразным. Соблюдение pep8 улучшает качество и поддержку кода в командах.

4.1) линтеры проверяют на соблюдение pep8?

Да, линтеры проверяют код на соответствие pep8. Они помогают находить и исправлять несоответствия в стиле написания, такие как отступы, длина строк, пробелы вокруг операторов и другие правила, указанные в стандарте.

4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

Для переменных используется snake_case нотация, где слова пишутся строчными буквами и разделяются символом подчеркивания (например, user_name). Этот стиль рекомендуется стандартом PEP 8, так как он повышает читаемость и единообразие кода. Для констант используется UPPER_CASE, а для переменных экземпляров в классах — префикс _ для защиты от внешнего доступа. Не допускается применение для переменных имён, совпадающих с ключевыми словами Python (например, class, def, if).

4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?

Да, переменная может состоять из одной буквы, включая _, и это часто используется для обозначения временных или неиспользуемых значений.

4.4) Зачем и где мы используем андерскор _ 

Символ _ используется в Python в нескольких случаях:

a) Игнорирование значений: Например, при распаковке кортежей (_, x = (1, 2)), чтобы явно показать, что значение не используется.
b) Последнее вычисленное значение в REPL: В интерактивной оболочке Python _ хранит результат последней операции.
c) Имя временной переменной: _ часто используют для обозначения переменной, значение которой неважно (например, в циклах for _ in range(5):).
d) Международализация (i18n): Иногда _ используется как алиас для функции перевода текста (например, _('hello')).
e) Приватные переменные: Переменные с _ в начале (_var) считаются "защищёнными" и предназначены для использования только внутри класса.

4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

Да, согласно PEP8, переменные в одну букву допустимы, но их использование рекомендуется ограничивать. Обычно такие имена применяются в коротких, понятных контекстах, например, в итерациях (`for i in range(10):`) или для временных переменных. Однако для улучшения читаемости кода предпочтительнее использовать более описательные имена.
