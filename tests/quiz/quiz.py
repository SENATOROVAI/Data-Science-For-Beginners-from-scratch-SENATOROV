"""Квиз ишью Quiz #6.

https://github.com/SENATOROVAI/intro-cs/issues/6
"""

# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# Чат HomeWork. Сообщение вида:
# "@ник прими пул"
# 00:05
#
# 2) Как принять домашку?
# В Github Desktop делаем fetch origin
# Смотрим подтянувшиеся коммиты (последний или несколько последних).
# Затем "Open in VSCode".
# 00:17
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# Кнопка history открывает историю коммитов. При клике правой кнопкой на коммит открывается контекстное меню, в котором доступны операции с коммитом: Reset, Revert, Amend, View on Github и пр.
# 00:33
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ссылку на коммит берем в github на странице коммита.
# Скидываем в чат HomeWork с припиской "Коммит отдал"
# 03:59
#
# 4) Что такое файл лога?
# Файл log.ipynb надо заполнять в конце каждого урока. Заносить информацию о том, что было сделано.
#
# 4.1) Когда нужно его пушить?
# Понедельник, среда, пятница
#
# 5) Что такое интерпретатор?
# Программа, которая построчно выполняет код
# 02:49
#
# 6) Где можно выбрать интерпретатор?
# При первом запуске ячейки вверху появляется список интерпретаторов, из которого нужно выбрать нужный (anaconda)
# Так же интерпретатор можно выбрать кликом на кнопку в правом верхнем углу "Select Kernel"
# 02:55
#
# 7) Что такое модуль?
# В контексте Python это файл *.py или *.ipynb
# 08:50
#
# 8) Как создать и отправить коммит?
# Github Desktop -> Changes -> Заполняем заголовок коммита и описание -> Commit to main -> Push origin
# 03:13
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# History -> Правой кнопкой на коммит -> View on Github
# 03:50
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# pre-commit run --all-files
# 05:55
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# docformatter - форматирует docstrings.
# Add trailing commas - добавляет запятые в конце списков/словарей/аргументов.
# black - автоматический форматтер кода.
# nbqa-black - применяет black для файлов *.ipynb.
# pyupgrade - обновляет синтаксис Python до более современного.
# nbqu-pyupgrade - применяет pyupgrade для файлов *.ipynb.
# isort - сортирует и группирует импорты.
# nbqu-isort - применяет isort для файлов *.ipynb.
# blacken-docs - применяет Black к коду внутри документации.
# trim trailing whitespaces - удаляет пробелы в конце строк.
# check yaml - проверяет синтаксис YAML-файлов.
# debug statements (python) - ищет оставленные print(), pdb.set_trace(), breakpoint() и т.п.
# python tests naming - проверяет, что тесты названы по соглашению (например, test_*.py, Test*, test_*())
# fix requirements.txt - нормализует/исправляет requirements.txt.
# codespell - орфографические ищет ошибки в коде и комментариях.
# flake8 - проверяет стиль кода и ошибки.
# nbqa-flake8 - применяет flake8 для файлов *.ipynb.
# mypy - статический анализ типов.
# nbqa-mypy - применяет mypy для файлов *.ipynb.
# pylint - мощный линтер, который проверяет стиль, ошибки, архитектура, дублирование кода.
# nbqa-pylint - применяет pylint для файлов *.ipynb.
# nbqa-pydocstyle - проверяет соответствие docstrings стандарту PEP 257 для файлов *.ipynb.
# 05:20
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# В логах в Терминале после выполнения команды pre-commit run --all-files.
# 06:30
#
# 12) Линтер Pylint видит markdown?
# Нет
# 07:10
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Может. Если в файле ipynb есть ячейки маркдаун, линтер их игнорирует.
#
# 14) Где посмотреть номер ячейки в vscode?
# В нижней панели VSCode
# 07:20
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# В формате JSON
#
# 16) Где посмотреть в какой ячейке ошибка?
# В логах в Терминале после выполнения команды pre-commit run --all-files
# 06:39
#
# 17) Как запустить терминал?
# В VSCode: Terminal -> New Terminal
# 05:55
#
# 18) Что такое линтер?
# Статический анализатор кода, который проверяет наш код на ошибки.
# 06:13
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# https://pylint.readthedocs.io/
# 08:13
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Да
# 10:13
#
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Да, это информация о том, что находится в модуле.
# 08:45
#
# 21.1) С какой  git команды начинается утро программиста?
# git pull / git fetch
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Правкой кнопкой мыши на Current repository -> Open in VSCode
# 14:13
#
# 23) Что такое stash?
# Это "тайник", куда мы временно можем спрятать изменения, сделанные в файлах. При этом файлы откатываются до состояния предыдущего коммита.
#
# 23.1) Как сохранить стэш?
#   Вначале добавляем файлы в Stage (например, git add .)
#   Затем:
#   git stash - сохранить в stash
#   git stash save "NAME_STASH" - сохранить в stash с указанием алиаса
#
#   Кнопка в vs code:
#   Вкладка "Source Control" -> Кнопка "Стрелка с +" Stash All Changes.
#   Или три точки -> Контекстное меню -> Пункт Stash
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#   git stash apply "NUMBER_STASH" - извлечь stash по указанному имени без его удаления из stash
#   git stash pop - извлекает stash и удаляет его из stash
#
#
# 23.3) Различие между стэшем и коммитом.
#   Коммит - фиксирует изменения в истории. Можно отправить в удаленный репозиторий и поделиться с коллегами.
#   Stash - временно "скрывает" незакоммиченные локальные изменения
#
# 23.4) Как просмотреть список сохраненных стэшей?
# git stash list
#
# 23.5) Как удалить стэш?
# git stash pop
# git stash clear
#
# 23.6) Практические примеры использования стэша.
#   Чаще всего используется, чтобы сделать git pull и обновить ветку. Реже для быстрого отката незакомиченных изменений.
#
# 24) Где посмотреть что есть конфликт в файлах?
# В Github Desktop красный треугольник с восклицательным знаком. Или в VSCode во вкладке Source Control
# 16:17
#
# 24.1) Когда он появляется?
# Он появляется во время ПР или во время подтягивания изменений в ветку.
# 16:17
#
# 25) Как решить конфликт в файлах?
# Accept Current Change
# Accept Incoming Change
# Accept Both Changes
#
# Или редактирование вручную
# 16:40
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# Зелёное то что пришло с гитхаба и синее локальные изменения
# 16:33
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Да
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Может произойти Merge Conflict
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Accept Current Change
# Accept Incoming Change
# Accept Both Changes
#
# Или редактирование вручную
# 16:40
#
# 29) Что делает кнопка complete merge?
# Завершает merge после разрешения merge-конфликтов
#
# 30) В какой чат нужно писать если остались вопросы?
# HELP ME
# 18:31
#
# 31) Что такое FORK? Зачем его делают?
# Копирование к себе чужого репозитория
# 19:05
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Через Github Desktop -> Clone repository
# Или через командную строку git clone
# 19:40
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Скорее всего, уже были решены. Если речь о стороннем коде - другими разработчиками. Если речь об ошибках во время обучения - другими студентами, Русланом.
#
# 34) Как создать файл в vs code?
# Меню File -> New File
# Кнопка New File в VSCode (листок с +)
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# jupytext notebook.ipynb --to py
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Это программа для менеджмента зависимостей. Использую pip. Лучше pip
#
# 3) Почему расширение py лучше чем ipynb?
# Более чистый и читаемый код.
# Возможность сразу импортировать и использовать в другом коде.
#
# 4) Что такое pep8?
# Руководство по стилю кода Python.
#
# 4.1) линтеры проверяют на соблюдение pep8?
# Да
#
# 4.2) Какая нотация используется для создания переменных?
# snake_case
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Да
#
# 4.4) Зачем и где мы используем андерскор _
# Для неиспользуемых переменных / неиспользуемых позиционных аргументов.
#
# 4.5) По PEP8 допустима переменная в одну букву?
# Да
#
