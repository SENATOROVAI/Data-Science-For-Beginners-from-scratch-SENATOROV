# # Quiz # 1

# Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию ) В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# Если в чате *homework* вы увидите своё имя с сообщением "прими пул", это значит, что домашка пришла.
#
# 2) Как принять домашку?
# Открываем GitHub Desktop, нажимаем **Pull Origin**, затем **Fetch Origin**. Проверяем коммиты в истории, основной — это *homework*, но важно просмотреть и другие коммиты.
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# В *History* можно просматривать все коммиты. Функции при правом клике: доступны просмотр изменений, создание ветки, откат и т.д.
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# На GitHub копируем ссылку на нужный коммит и отправляем в чат *homework* с комментарием "коммит отдал(а)".
#
# 4) Что такое файл лога?
# Файл лога — это конспект занятий в формате .ipynb с описанием (Markdown) изученных тем.
#
# 4.1) Когда нужно его пушить?
# После каждого занятия.
#
# 5) Что такое интерпритатор?
# Интерпретатор выполняет код, преобразуя его в машинный код без предварительной компиляции.
#
# 6) Где можно выбрать интерпритатор?
# При запуске ячейки VSCode или Cursor предложат выбрать интерпритатор.
#
# 7) Что такое модуль?
# Это файл с расширением .py или .ipynb, содержащий код Python.
#
# 8) Как создать и отправить коммит?
# Изменения попадают в *Changes*. Перемещаем их в *Staged Changes* с помощью кнопки +, вводим сообщение коммита и нажимаем "Commit". Для отправки на GitHub нажимаем "Push".
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Проверяем историю коммитов в GitHub или используем `git log`.
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# `pre-commit run --all-files`
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# - **Pylint**: проверка на ошибки и стиль.
# - **pydocstyle**: проверка документации.
# - **Flake8**: анализ кода на ошибки и стиль.
# - **Mypy**: проверка типов.
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# Выполняем `pre-commit run --all-files` — в терминале отобразится линтер с пометкой *Failed*.
#
# 12) Линтер Pylint видит markdown?
# Нет, линтер игнорирует ячейки Markdown.
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Да, если есть Markdown-ячейки. VS Code учитывает все ячейки, терминал — только кодовые.
#
# 14) Где посмотреть номер ячейки в vscode?
# Внизу справа отображается номер текущей ячейки (Cell).
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# В формате JSON, который структурирует данные для удобства хранения.
#
# 16) Где посмотреть в какой ячейке ошибка?
# Ошибка отображается в терминале или под ячейкой в Jupyter.
#
# 17) Как запустить терминал?
# *Terminal → New Terminal*
#
# 18) Что такое линтер?
# Программа для проверки кода на ошибки и соответствие стандартам.
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# На сайт [pylint.pycqa.org](https://pylint.pycqa.org).
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# После исправления ошибок, особенно если они связаны с Pylint.
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Докстринг в начале файла, кратко описывающий его функционал.
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# `git pull` для обновления локального репозитория.
#
# 23) Что такое stash?
#   Общее объяснение концепции.
# Временное хранилище для незакоммиченных изменений.
#
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#
# Команда: `git stash apply` или `git stash pop` (удаляет стэш после восстановления).
#
# 23.3) Различие между стэшем и коммитом.
# Стэш — временное сохранение. Коммит — постоянное.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# Команда: `git stash list`
#
# 23.5) Как удалить стэш?
# Команды:
# - `git stash drop stash@{N}` — удалить конкретный стэш.
# - `git stash clear` — удалить все стэши.
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает. Ответ: "Одновременное редактирование одного и того же файла несколькими пользователями. Сохрание локальных изменений файла в стэш."
#
# 24) Где посмотреть что есть конфликт в файлах?
# В VS Code конфликтные файлы помечены значком с восклицательным знаком.
#
# 24.1) Когда он появляется?
# При слиянии веток с разными изменениями в одном файле.
#
# 25) Как решить конфликт в файлах?
# Используйте опции:
# - *Accept Current Changes*
# - *Accept Incoming Changes*
# - *Accept Both Changes*
# - Ручное редактирование и *Complete Merge*
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# Зелёное — изменения с GitHub, синее — локальные изменения.
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Да.
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Возможен конфликт, если изменения пересекаются.
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 4 способа:
# 1. Accept Current Changes
# 2. Accept Incoming Changes
# 3. Accept Both Changes
# 4. Ручное редактирование
#
# 29) Что делает кнопка complete merge?
# Завершает процесс слияния изменений.
#
# 30) В какой чат нужно писать если остались вопросы?
# В чат "HELP ME" в группе в Телеграме.
#
# 31) Что такое FORK? Зачем его делают? Копия репозитория для работы в своём аккаунте.
# Копия репозитория для работы над проектом независимо от оригинала.
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Команда: `git clone <URL>`.
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Высока, так как другие студенты могли столкнуться с ними раньше.
#
# 34) Как создать файл в vs code?Иконка "В поле Explorer нажимаем на иконку "New File" в верхней панели (Лист с +).
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Да, для систематизации знаний и отслеживания прогресса.
#
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# 3) Почему расширение py лучше чем ipynb?
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# 4.4) Зачем и где мы используем андерскор _
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
#
#
#

# # Quiz # 2

# Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE? [0:01] - В VSCode перейти во вкладку File -> Auto Save
# 2. Как настроить перенос строки? [0:14] - В VSCode перейти во вкладку File -> Preferences -> Settings -> пишем "wrap" -> в пунтке Word Wrap выбираем значение "wordWrapColumn" -> сохраняем изменения (Enter)
# 3. Сколько символов по pep8 разрешено на строке? [0:34] - 79 символов
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\) - нет
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)  - нет
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join  - нет
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки  - нет
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок  - нет
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью + [4:07] - Да
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится? - [4:30] нижняя панель вкладок, первая кнопка
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку? [6:30] - левая панель в VSCode, три кружочка, соединенных в граф.  Создаем коммит, пишем название коммита -> далее нажимаем "Commit and Push"
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту? [7:30] GIT - контроль версий и изменений репозитория. В GITLINES можно посмотреть изменения по каждому из коммитов и сделать откат
# 8. Как вставить картинку в маркдаун? [7:58] - ctrl + v (вставка скриншота из буфера обмена в ячейку с Markdown)
# 9. Где посмотреть длину строки в vs code? [1:20] - при работе с файлом с расширением .py VScode внизу показывает длину текущей строки
# 10. Как поменять тип ячейки с питона на маркдаун? [7:46] - в правом нижнем углу ячейки можно изменить тип ячейки с Python на Markdown
# 11. Как запустить сразу все ячейки в юпитере? [8:30] - Кнопка "Run all" в верхней панели VSCode запускает все ячейки в jupyter ноутбуке по порядку
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML? [8:25] - необходимо знать теги из HTML, чтобы было возможно изменяит размер картинки
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую? [8:45] - Shift + Enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)? [9:05] - выбираем три точки над ячейкой -> выбрать пункт "Show cell line numbers"
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку? [9:31] - GoTo позволяет перейти на ту ячейку, на которой произошла ошибка
# 16. Как очистить вывод ячеек которые уже запущены? [10:49] - на верхней панели VSCode выбираем "Clear All Outputs"
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT? [10:56] - Выбираем пункт "Split Edit" для возможности одновременной работы в нескольких файлах
# 18. Каким сочетанием убирается левый сайдбар? [11:52] - ctrl + B
# 19. Кнопка два листочка это наши локальные файлы? - [11:36] Да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST? [9:49] - name "Dict" is not defined
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet? - Да
# 22. Что такое валидация? Проверка кода на ошибки
# 23. Что такое трассировка ошибки? [10:05] - визуальное отображение ошибки в интерпретаторе
# 24. Что значит отвалился интерпритатор? - Интерпретатор не смог выполнить код и сработал Exception
#
# Отвечаете на вопросы в вашем редакторе кода.
#
