# %% [code]
"""Ответы на вопросы на issue: "Контрибьютинг в Open Source." """

# %% [markdown]
# Что такое GitHub?
# 
#         GitHub основан на Git — распределённой системе контроля версий. Git используется для управления версиями кода, а GitHub предоставляет удобный интерфейс и дополнительные функции, такие как визуализация изменений, управление задачами и совместная работа.

# %% [markdown]
#  Как GitHub связан с Git?
# 
#    Git используется для управления версиями кода, а GitHub предоставляет удобный интерфейс и дополнительные функции, такие как визуализация изменений, управление задачами и совместная работа.

# %% [markdown]
# Чем отличается fork репозитория от его клонирования (clone)?
# 
#    Fork — это создание копии чужого репозитория в вашем аккаунте GitHub. Вы можете вносить изменения в fork, не затрагивая оригинальный репозиторий.
#    
#    Clone — это локальная копия репозитория на вашем компьютере. Вы можете клонировать как оригинальный репозиторий, так и fork, чтобы работать с ним локально.

# %% [markdown]
# Чем отличается fork репозитория от его клонирования (clone)?
# 
#    Fork — это создание копии чужого репозитория в вашем аккаунте GitHub. Вы можете вносить изменения в fork, не затрагивая оригинальный репозиторий.
#    
#    Clone — это локальная копия репозитория на вашем компьютере. Вы можете клонировать как оригинальный репозиторий, так и fork, чтобы работать с ним локально.

# %% [markdown]
# Зачем нужны и как работают pull requests?
# 
#    Pull requests (PR) используются для предложения изменений в репозитории. Вы создаёте PR, чтобы показать свои изменения владельцам репозитория. Они могут просмотреть, обсудить и принять или отклонить ваши изменения. Это основной инструмент для совместной работы в GitHub.

# %% [markdown]
# GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# 
#    Да, GitHub использует ваш почтовый адрес, указанный в настройках Git, чтобы связать ваши коммиты с вашей учётной записью. Это позволяет отображать ваш профиль рядом с вашими изменениями. Вы можете использовать приватный email, предоставленный GitHub, чтобы скрыть свой реальный адрес.

# %% [markdown]
# Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
# 
#    «Add an SSH key»
# 
#    ~/.ssh/id_rsa.pub

# %% [markdown]
# Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку?
# 
#    https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/221/commits/314243f5e3d77afc6dc3733102039b42f1b3d282

# %% [markdown]
# как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно?
# 
#    Открытие запроса слияния (Pull Request, PR), который указывает на другой PR, называется "stacked PR" (стековый PR) или "chained PR" (цепочечный PR). Это полезно, когда у вас есть изменения, зависящие от других изменений, которые еще не слиты в основную ветку.

# %% [markdown]
# Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
# 
#    1. Форкните репозиторий
#    2. Клонируйте форк на свой компьютер
#    3. Добавьте оригинальный репозиторий как upstream
#    4. Создайте новую ветку для ваших изменений
#    5. Внесите изменения и закоммитьте их
#    6. Запушьте изменения в свой форк
#    7. Откройте Pull Request (PR)
#    8. Дождитесь ревью и внесите правки (если нужно)

# %% [markdown]
# Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues?
# 
#    Формат закрытия Issues в PR:
#        Fixes #xxx
#        Resolves #xxx
#        Closes #xxx
#                Закроет Issue с номером 123 после слияния PR

# %% [markdown]
# Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
# 
#    GitHub позволяет автоматически закрывать Issue при пуше коммита в основную ветку (main, master, develop и т. д.), если в сообщении коммита указаны специальные ключевые слова. 
#    например Closes #xxxx
# 
#    GitHub закроет Issue только после слияния коммита в основную ветку.
# 
#    Работает только в публичных репозиториях и репозиториях, где включены Issues.

# %% [markdown]
# Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
# 
#    Через GitHub UI
#    1. Откройте ваш репозиторий на GitHub.
#    2. Перейдите во вкладку Pull Requests.
#    3. Найдите PR, который хотите закрыть, и кликните по нему.
#    4. Внизу страницы нажмите "Close pull request" (Закрыть pull request).
# 
#        Запросить изменения (Request changes)
#            В разделе "Files changed" можно оставить комментарии.
# 
#            Нажать "Request changes", чтобы автор исправил PR.
# 
#            PR не сможет быть слит, пока автор не внесет правки.

# %% [markdown]
# ![alt text](screenshots/Screenshot_7.png)

# %% [markdown]
# Перед отправкой пул реквеста нужно ли создавать ишьюс?
# 
#    yes

# %% [markdown]
# В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
# 
#    File changes

# %% [markdown]
# В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# 
#    Conversation

# %% [markdown]
# Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# 
#    Да, можно открыть Pull Request (PR) даже если вы ничего не изменяли в своём форке.

# %% [markdown]
# Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# 
#    Перейдите в ваш форк на GitHub.
#    Нажмите "Compare & pull request".
#    Убедитесь, что основная ветка (base) – это main (или другая рабочая ветка оригинального репозитория).
#    Добавьте описание PR:
#    Что изменено?
#    Почему это нужно?
#    Как протестировать?
#    Ссылка на Issue (Fixes #123) (если есть).
#    Нажмите "Create pull request".

# %% [markdown]
# Что нужно сделать Если ваш Форк устарел?
# 
#    синхронизировать

# %% [markdown]
# Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
# 
#    изменить свою ветку так, чтобы исключить конфликты и сопровождающий не делал лишнюю работу либо слить целевую ветку в свою.

# %% [markdown]
# Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# 
#    обрамить его обратными кавычками.
#    Если вы укажите название языка, как показано на примере, GitHub попробует применить к нему подсветку синтаксиса.

# %% [markdown]
# На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
# 
#    Если в комментарии выделить текст, на который вы собираетесь ответить, и нажать клавишу r, то выделенный текст будет включён как цитата в ваш комментарий.

# %% [markdown]
# Как вставить картинку в ишьюс? (Рисунок 108)
# 
#    «Parsed as Markdown». Нажав не неё, вы получите полную подсказку по использованию GitHub разметки.

# %% [markdown]
# Как понять что ваш форк устарел?
# 
#    Проверка через GitHub Compare:
#    Откройте ваш форк на GitHub.
#    Перейдите во вкладку Pull Requests → New Pull Request.
#    Выберите base: your-fork/main и compare: upstream/main.
#    GitHub покажет, есть ли новые коммиты.
# 
#    Проверка через GitHub UI (Простой способ):
#    Откройте свой форк на GitHub.
#    Посмотрите вверх – если форк устарел, появится кнопка:
#    🔄 "Sync fork" или "This branch is behind the upstream".
#    Можно нажать "Compare", чтобы увидеть разницу.
#    ✅ Если есть новые коммиты в upstream, форк устарел.

# %% [markdown]
# Как обновить форк?
# 
#    Если ваш форк устарел, его нужно синхронизировать с оригинальным репозиторием (upstream).
#        Откройте ваш форк на GitHub.
#        Над списком файлов найдите кнопку "Sync fork" (или "Fetch upstream").
#        Нажмите "Update branch".
#    Обновление форка через Rebase (Чистая история коммитов):
#        Если вы хотите переписать историю без merge-коммитов, используйте rebase:
#            git checkout main
#            git fetch upstream
#            git rebase upstream/main
#            git push origin main --force

# %% [markdown]
# Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
# 
#    Перейдите по ссылке «Settings» в нижней части панели справа.
#    Затем выберите «Collaborators» в меню слева. Напишите имя пользователя в поле для ввода и нажмите кнопку "Add collaborator".

# %% [markdown]
# Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# 
#    @

# %% [markdown]
# Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# 
#    https://github.com/notifications

# %% [markdown]
# Что такое и зачем нужен файл README
# 
#    README.md – это основной файл документации в репозитории GitHub. Он объясняет, что делает проект, как его использовать и как в него внести вклад.

# %% [markdown]
# Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# 
#    Идея состоит в том, что вы можете указать конкретные вещи, которые вы хотите или не хотите видеть в новых запросах на слияние. Таким образом люди могут ознакомиться с руководством, перед тем как создавать новый запрос на слияние.

# %% [markdown]
# Как измененить основную ветку (Рисунок 123)
# 
#    в настройках репозитория на закладке "Options". Просто выберите нужную ветку из выпадающего меню и она станет основной для большинства операций, включая извлечение кода при клонировании репозитория.

# %% [markdown]
# Как передать проект? какая кнопка? (рисунок 124)
# 
#    «Transfer ownership»

# %% [markdown]
# Что такое файл .gitignore?
# 
#    Файл .gitignore — это специальный файл, в котором указываются файлы и папки, которые Git должен игнорировать и не добавлять в репозиторий.