"""github."""

# 1.1. Что такое GitHub?
# - Это крупнейшее хранилище Git репозиториев, а также центр сотрудничества для миллионов разработчиков и проектов
# 1.2. Как GitHub связан с Git?
# - GitHub - это облачный хостинг и веб-интерфейс для работы с репозиториями Git
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# - Fork - создание собственной копии чужого репозитория на GitHub, clone - скачивание репозитория с GitHub на компьютер
# 1.4. Зачем нужны и как работают pull requests?
# - Для предложения изменений в чужой репозиторий. Автор делает fork, вносит изменения в свою копию, затем через PR предлагает владельцу оригинального репозитория принять эти изменения
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# - Да, при условии, что email в настройках Git на локальной машине совпадает с email, привязанным к Github
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
# - ssh-keygen -o
#
#
# # Внесение собственного вклада в проекты
# 2. Создайте ишьюс и запомните его номер, в https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues, назовите его "UPDATE README", в дескрипшене добавьте список задач (Рисунок 102)
# - Сделал issue \#366
#
# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых у нас нет прав на внесения изменений путём отправки (push) изменений, вы можете создать своё собственное ответвление, что нужно сделать чтобы создать собственное ответвление? (Рисунок 88), сделайте ответвление https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и вставьте сюда ссылку на ваше ответвление
# - Чтобы сделать своё ответвление, нужно нажать 'Fork'. Ссылка на моё ответвление: https://github.com/smrnvdn/Data-Science-For-Beginners-from-scratch-SENATOROV
#
# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev
# - https://github.com/smrnvdn/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# 2.3 В README файле вашего ФОРКА, добавьте ссылку на мой телеграм канал https://t.me/RuslanSenatorov, сохраните коммит, название коммита - в тайтле название ишьюса (#номер_ишьюс), в дескрипшене - Closes #NUMBER-ISSUES номер возьмите из пункта 2
#
# - Ссылка на коммит: https://github.com/smrnvdn/Data-Science-For-Beginners-from-scratch-SENATOROV/commit/51b5c7ae833f02d1a701678a611f3de81b6e4fe4
#
# 2.4 Отправьте пул реквест из ФОРКА в основу В ВАШУ ВЕТКУ, тайтл пул реквеста скопируйте из ISSUES-TITLE, в дескрипшине пул реквеста напишите Closes #NUMBER-ISSUES вставьте номер из пункта 2
# - Сделал
#
# 2.5 Прокомментириуйте ваш пул реквест перед слиянием, перейдите во вкладку(Рисунок 92) и напишите "ок", потом нажимайте сабмит ревью затем не выходя из этой вкладки, в файле README , добавьте туда ссылку на https://t.me/SENATOROVAI
# - Сделал
#
# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш пул реквест
# - Ссылка на PR: https://github.com/smrnvdn/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
#
# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории, найти можно тут
# - https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed
#
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку?
# - Чтобы посмотреть, какие файлы были в репозитории на момент определённого коммита, надо выбрать нужный коммит и нажать на 'Browse files'.
# - Ссылка на коммит: https://github.com/smrnvdn/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/acb60ca6109f4a0ed7ce2f309a9ceebcf557f8d7
#
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно? (Рисунок 117)
# - Если вы видите толковый запрос слияния и у вас есть идея как его улучшить или вы не уверены, что это хорошая идея, или у вас просто нет прав записи в целевую ветку, то в таком случае вы можете открыть запрос слияния, указывающий на данный запрос.
# При открытии запроса на слияние вверху страницы вы увидите меню для выбора целевой и исходной веток. Если нажать кнопку Edit справа, то станет доступным выбор не только исходной ветки, а ещё и форка. Здесь можно указать вашу новую ветку для слияния с другим запросом слияния или другим форком проекта.
#
# # Рабочий процесс с использованием GitHub
# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
# - 1. Создать форк проекта
# - 2. Создать тематическую ветку на основе ветки master/main
# - 3. Внести и закоммитить изменения
# - 4. Запушить ветку на Github
# - 5. Создать запрос на слияние
# - 6. Обсудить с владельцем репозитория/ревьюером внесённые изменения
# - 7. Дождаться принятия или отклонения своих изменений
# - 8. В случае принятия обновить свой форк
#
# 3.1.
#
# Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues?
# - В тайтле PR указывается ссылка/номер ишью, в описании используются ключевые слова с номером ишью (например, Closes \#123, Fixes \#123)
#
# Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
# - Правила те же, что и для PR, важно только помнить, что сам по себе коммит с ключевым словом, отправленный в свою feature-ветку, не закроет ишью. Ишью закроется только в тот момент, когда коммит, содержащий ключевое слово, попадёт в целевую ветку через операцию слияния
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
# - Перейти на вкладку Pull Requests в репозитории, выбрать PR, внизу открывшейся страницы будет кнопка 'Close pull request'
#
# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
# - В большинстве случаев желательно создать ишью, но не всегда
#
# 3.4 В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
# - Files changed
#
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# - Conversation
#
# # Создание запроса на слияние
# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# - Нельзя, суть пулл реквеста в отображении разницы между кодом в форке и оригинальном репозитории
#
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# - Внести изменения в своём форке, закоммитить и запушить изменения, нажать Compare & pull request
#
# 4.2 Что нужно сделать Если ваш Форк устарел?
# - Нажать Sync fork
#
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
# - Существует два основных варианта исключить конфликты. Вы можете либо перебазировать свою ветку относительно целевой ветки (обычно, относительно master/main), либо слить целевую ветку в свою.
# Большинство разработчиков на GitHub выбирают последний вариант, поскольку важна история и окончательное слияние, а перебазирование не принесёт ничего, кроме немного более чистой истории, при этом оно гораздо сложнее и может стать источником ошибок.
#
# # Отрывки кода
# 5 Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# - Для добавления отрывка кода следует обрамить его обратными кавычками
#
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
# - r
#
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# - 'Вставить' или просто перетащить картинку в окно комментария, также можно воспользоваться шаблоном Markdown \!\[описание\]\(ссылка\)
#
# # Поддержание GitHub репозитория в актуальном состоянии
# 6 Как понять что ваш форк устарел?
# - В GitHub тобразится сообщение 'This branch is behind main by X commits'
#
# 6.1 Как обновить форк?
# - Нажать Sync fork
#
# # Добавление участников
# 7 Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
# - Settings -> Collaborators -> Add collaborator
#
# # Упоминания и уведомления
# 8 Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# - @
#
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# - https://github.com/notifications
#
# # Особенные файлы
# 9 Что такое и зачем нужен файл README
# - Это файл-визитка проекта: объясняет суть проекта, даёт основные инструкции, показывает примеры кода и его работы
#
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# - Если в вашем репозитории будет файл CONTRIBUTING с любым расширением, то GitHub будет показывать ссылку на него при создании любого запроса на слияние. Идея состоит в том, что вы можете указать конкретные вещи, которые вы хотите или не хотите видеть в новых запросах на слияние. Таким образом люди могут ознакомится с руководством, перед тем как создавать новый запрос на слияние.
#
# # Управление проектом
# 10 Как измененить основную ветку (Рисунок 123)
# - Settings -> General -> Default branch
#
# 10. 1 Как передать проект? какая кнопка? (рисунок 124)
# - Transfer ownership
#
# 10.2 Что такое файл .gitignore?
# - Это конфигурационный файл для Git, который указывает, какие файлы и папки не нужно отслеживать и добавлять в репозиторий
#

#
