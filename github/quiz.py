"""This notebook contains my answers to the questions."""

# ### GitHub
# 1.1. Что такое GitHub?
# Ответ: GitHub — это крупнейшее хранилище Git репозиториев, а так же центр
# сотрудничества для
#  миллионов разработчиков и проектов. Многие проекты с открытым исходным
# кодом используют его ради Git хостинга,
#  баг-трекера, рецензирования кода и других вещей
# 1.2. Как GitHub связан с Git?
# Ответ: git это программа для управления управления версиями локально, а
# GitHub - платформа надстройка над git, которая выполняет функцию хостинга
# репозиториев, а также удобна в командной разработке и в автоматизации
# рабочих процессов.
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# Ответ: clone просто локально скачивает репозиторий, а форк делается через
# веб-интерфейс GitHub и создаёт копию репозитория под твоим аккаунтом, с
# которого можно открывать pull requests
# 1.4. Зачем нужны и как работают pull requests?
# Ответ: pull requests - это способ предложить изменения из вашего форка в
# оригинальный репозиторий. После внесения правок через веб-интерфейс GitHub
# выбираем из какой ветки берём изменения и в какую ветку оригинального
# репозитория хотим предложить изменения, затем создаём пулреквест и ждём
# ответа.
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к
# вашей учётной записи?
# Ответ: да
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию
# (Рисунок 83)
# Ответ: Либо add key через веб-интерфейс, либо командой ssh-keygen -o,
# программа, которая устанавливается вместе с git.
#
# ### Внесение собственного вклада в проекты
# 2. Создайте ишьюс и запомните его номер, в https://github.com/SENATOROVAI/
# Data-Science-For-Beginners-from-scratch-SENATOROV/issues, назовите его
# "UPDATE README", в дескрипшене добавьте список задач (Рисунок 102)
# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых
# у нас нет прав на внесения изменений путём отправки (push) изменений, вы
# можете создать своё собственное ответвление, что нужно сделать чтобы создать
# собственное ответвление? (Рисунок 88), сделайте ответвление https://github.
# com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и
# вставьте сюда ссылку на ваше ответвление
# Ответ: https://github.com/vladimirgutuev/
# data-science-for-beginners-from-scratch-senatorov
# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда
# ссылку на вашу ветку dev
# Ответ: https://github.com/VladimirGutuev/
# Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
# 2.3 В README файле вашего ФОРКА, добавьте ссылку на мой телеграм канал
# https://t.me/RuslanSenatorov, сохраните коммит, название коммита - в тайтле
# название ишьюса (#номер_ишьюс), в дескрипшене - Closes #NUMBER-ISSUES номер
# возьмите из пункта 2
# 2.4 Отправьте пул реквест из ФОРКА в основу В ВАШУ ВЕТКУ, тайтл пул реквеста
# скопируйте из ISSUES-TITLE, в дескрипшине пул реквеста напишите Closes
# #NUMBER-ISSUES вставьте номер из пункта 2
# 2.5 Прокомментириуйте ваш пул реквест перед слиянием, перейдите во вкладку
# (Рисунок 92) и напишите "ок", потом нажимайте сабмит ревью затем не выходя
# из этой вкладки, в файле README , добавьте туда ссылку на https://t.me/
# SENATOROVAI,
# => инструкция
# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш
# пул реквест
# Ответ: https://github.com/VladimirGutuev/
# Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1 - закрытый
# пулреквест в моем репозитории
# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории, найти можно
# тут
# Ответ: https://github.com/VladimirGutuev/
# Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr
# +is%3Aclosed - ссылка на закрытые пулреквесты
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного
# коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? подсказка:
# Ответ: В нашем репозитории нажимаем выбираем нужную нам ветку, нажимаем на
# commits, чтобы просмотреть всю историю коммитов, нажимаем browse, смотрим
# изменения
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем
# это нужно? (Рисунок 117)
# Ответ: Делаем изменения, и открываем пулреквест для слияния с пулреквестом,
# а именно с форком репозитория, с которого уже открыт пулреквест. Это может
# помочь, если ты уже видишь, что есть пулреквест, который уже хорошо решает
# проблему, но ты можешь его дополнить, или же сделать лучше. Второй сценарий
# использования это если у вас нет доступа к открытию пулреквестов, тогда вы
# можете открыть пулреквест к человеку, у которого есть права, и если он
# примет его, и потом пулреквест этого человека тоже примут, то поздравляю, вы
# законтрибьютили опенсорс
#
# ### Рабочий процесс с использованием GitHub
# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой
# проект.
# Ответ:
# 1) Создать Issue
# 2) Сделать fork
# 3) Создать ветку dev
# 4) Внести изменения
# 5) Сделать commit
# 6) Отправить PR с привязкой к Issue
# 7) Прокомментировать и обновить PR
# 8) Смержить PR (коммит слияния)
# 3.1.
# - Какие практики принято соблюдать при создании Pull Request чтобы закрыть
# автоматический issues?
# Ответ: в описание pull request-а указывать closes #(номер ишьюса) либо
# ссылка на ишьюс, полезно, когда закрываем issues в другом репозитории
#
# - Какие практики принято соблюдать при создании commit чтобы закрыть
# автоматический issues?
# Ответ: в title коммита пишем closes (#номер или ссылка) и в описании коммита
# #номер или ссылка
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в
# гитхабе)
# Ответ:
#
# ![image.png](attachment:image.png)
#
# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
# Ответ: не обязательно, но желательно предварительно создать ишьюс чтобы было
# понятно, какую проблему это закрывает, отслеживать более детальную
# статистику, помогать другим людям со схожей проблемой, если ишьюс является
# оповещением о проблеме или баге, а не задачей
# 3.4 В какой вкладке можно посмотреть список изменений который был в пул
# реквесте? (Рисунок 92)
# Ответ: Files changed
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# Ответ: Conversation
#
# ### Создание запроса на слияние
# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# Ответ: нет, нельзя, т.к. для этого нужны изменения
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# Ответ: запушить изменения форка на гитхаб, зайти на главную страницу форка,
# -> Pull Requests -> New Pull Request
# 4.2 Что нужно сделать Если ваш Форк устарел?
# Ответ: Кнопка Sync fork. Выйдут 2 варианта, либо отменить все коммиты,
# которые ты сделал, либо обновить ветку, не удаляя прошлые конфликты, но с
# большой вероятностью возникнет конфликт, если коммиты двух репозиториев
# связаны с изменениями в одних и тех же файлах.
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок
# 96)
# Ответ: Нужно будет решить конфликт, оставить нужную часть реализации. Можно
# решить как в редакторе кода, так и с помощью интерфейса GitHub: Нажимаем
# Resolve conflicts -> решаем конфликт -> Mark as resolved -> Commit merge.
#
# ### Отрывки кода
# 5 Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу?
# (Рисунок 104)
# Ответ: Обрамить его обратными тройными кавычками, желательно ещё указать
# язык для подсветки синтаксиса
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как
# цитата в ваш комментарий?(Рисунок 105)
# Ответ: r
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# Ответ: перенести картинку в поле Write
#
# ### Поддержание GitHub репозитория в актуальном состоянии
# 6 Как понять что ваш форк устарел?
# Ответ: В форкнутом репозитории будет написано This branch is n commits
# behind original:branch
# 6.1 Как обновить форк?
# Ответ: Кнопка Sync fork. Выйдут 2 варианта, либо отменить все коммиты,
# которые ты сделал, либо обновить ветку, не удаляя прошлые конфликты, но с
# большой вероятностью возникнет конфликт, если коммиты двух репозиториев
# связаны с изменениями в одних и тех же файлах.
#
# ### Добавление участников
# 7 Как добавить участников в ваш репозиторий, чтобы команда могла работать
# над одним репозиторием? (Рисунок 112)
# Ответ: Заходим в настройки репозитория -> collaborators -> add collaborator
#
# ### Упоминания и уведомления
# 8 Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# Ответ: @
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# Ответ: https://github.com/notifications
#
# ### Особенные файлы
# 9 Что такое и зачем нужен файл README
# Ответ: README файл - файл, который GitHub автоматически отображает на
# главной странице репозитория.  Большинство команд используют его для
# поддержания актуальной информации о проекте. Как правило, он включает
# следующее:
# - Для чего предназначен проект
# - Инструкции по конфигурации и установке
# - Примеры использования
# - Используемую лицензию
# - Правила участия в проекте (если нет файла CONTRIBUTING.md)
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# Ответ: CONTRIBUTING - файл, который автоматически распознаёт GitHub и
# показывает ссылку на него при создании любого запроса на слияние.  Идея
# состоит в том, что вы можете указать конкретные вещи, которые вы хотите или
# не хотите видеть в новых запросах на слияние. Таким образом люди могут
# ознакомится с руководством, перед тем как создавать новый запрос на слияние
#
# ### Управление проектом
# 10 Как измененить основную ветку (Рисунок 123)
# Ответ: В настройках репозитория во вкладке options
# 10.1 Как передать проект? какая кнопка? (рисунок 124)
# Ответ: Тоже в настройках репозитория кнопка Transfer
# 10.2 Что такое файл .gitignore?
# Ответ: файл .gitignore - файл для указания файлов проекта, которые не будет
# видеть git. Это создано для того, чтобы не закоммитить случайно
# конфиденциальную информацию, пароли, апи ключи и т.д.
#
#
