"""Ответы на вопросы по GitHub."""

# ## GitHub
# 1) Что такое GitHub?
# - это крупнейшее хранилище Git репозиториев, а так же центр сотрудничества для
# миллионов разработчиков и проектов. Огромный процент всех репозиториев хранится на
# GitHub, а многие проекты с открытым исходным кодом используют его ради Git хостинга,
# баг-трекера, рецензирования кода и других вещей.
# 2) Как GitHub связан с Git?
# - это хостинг-платформа для Git-репозиториев, которая расширяет возможности Git,
# добавляя веб-интерфейс, инструменты для командной работы и интеграции.
# 3)  Чем отличается fork репозитория от его клонирования (clone)?
# - это ответвление от проекта который нам интересен, он просто кланируется
# в ваш репозиторий в GitHub. Мы можем создавать свои собственные ветвления (fork),
#  вносить туда изменения, а затем отправлять свои внесённые изменения в
# оригинальный репозиторий проекта путём создания запроса на принятие изменений
# (Pull Request)
# - Clone — скачивание репозитория к нам на компьютер
# 4) Зачем нужны и как работают pull requests?
# - позволяет создать запрос на принятие изменений, который отправит твои изменения
# в оригинальный репозиторий
# -сверху есть зеленая кнопка,если нажать на эту кнопку, появится экран ввода
# заголовка и описания предлагаемых изменений на рассмотрение владельцу проекта.
# Рекомендуется серьёзно подойти к составлению описания и сделать его максимально
# информативным, чтобы владелец проекта понимал, зачем эти изменения и какую пользу
# они принесут.
# 5) GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# - Да
# 6) Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
# - ssh-keygen -o
# ## Внесение собственного вклада в проекты
# - Ссылка на ответвление:
# https://github.com/ViktorVinogradov89/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/main
#
# - создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev
# https://github.com/ViktorVinogradov89/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# - ссылка на закрытие пул реквеста
# https://github.com/ViktorVinogradov89/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed
#
# 1) Как посмотреть какие файлы были в репозитории на момент определенного
# коммита?
# - В нашем репозитории нажимаем выбираем нужную нам ветку, нажимаем на
# commits, чтобы просмотреть всю историю коммитов, нажимаем browse, смотрим
# на изменения
# 2) как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно?
# открыть:
# - Перейдите в свой форк на GitHub
# - Нажмите "Pull requests" → "New pull request"
# - Выберите:
# - Base: ветка в оригинальном репо (обычно main)
# - Head: ваша ветка (например dev)
# - Заполните:
# - Title: "UPDATE README (#310)"
# - Description: "Closes #310"
# - Нажмите "Create pull request"
# Это нужно для:
# - Предотвращает конфликты (изменения применяются по порядку).
# - Показывает логическую связь между задачами.
# - Автоматизирует контроль зависимостей.
#
# ## Рабочий процесс с использованием GitHub
# 1) Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
# - Создать Issue
# -Сделать fork
# - Создать ветку dev
# - Внести изменения
# - Сделать commit
# - Отправить PR с привязкой к Issue
# - Прокомментировать и обновить PR
# - Смержить PR (коммит слияния)
# 2) Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues?
# - описание pull request указывать closes #(номер ишьюса) или
# ссылку на ишьюс, когда закрываем issues в другом репозитории
# 3) Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
# - в title коммита пишем closes (#номер или ссылка), в описании коммита номер или ссылка
# 4) Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
# - https://drive.google.com/file/d/1tPnHXXLB8qiJmMg8K-G_SG6u8M6YksFq/view?usp=sharing
# 5) Перед отправкой пул реквеста нужно ли создавать ишьюс?
# - Да, чтобы понимать какую проблему это закрывает.
# 6) В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
# - Files changed
# 7) В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# - Conversation
#
# Создание запроса на слияние
# 1) Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# - нет, для этого нужны измениения
# 2) Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# - сделать пуш изменений форка на гитхаб, зайти на главную страницу форка
# -> Pull Requests -> New Pull Request
# 3)  Что нужно сделать Если ваш Форк устарел?
# - Нажимаем на кнопку Sync fork, выйдут 2 варианта, либо отменить все коммиты
# которые сделали, либо обновить ветку, не удаляя прошлые конфликты.
# 4) Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
# - Необходимо решить конфликт оставив необходимое. Можно
# решить как в редакторе кода, так и с помощью интерфейса GitHub: Нажимаем
# Resolve conflicts -> решаем конфликт -> Mark as resolved -> Commit merge.
#
# Отрывки кода
# 1) Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# - заключить его обратными тройными кавычками
# 2) На какую клавишу нажать чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
# - r
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# - перенести картинку в поле Write
#
# Поддержание GitHub репозитория в актуальном состоянии
# 1) Как понять что ваш форк устарел?
# - по надписи This branch is n commits behind original:branch
# 2) Как обновить форк?
# - нажимаем на кнопку Sync fork, появятся 2 варианта, либо отменить все коммиты которые сделали,
#  либо обновить ветку не удаляя прошлые конфликты
#
# Добавление участников
# 1) Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
# - настройки репозитория -> collaborators -> add collaborator
#
# Упоминания и уведомления
# 1) Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# - @
# 2) Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# - https://github.com/notifications
#
# Особенные файлы
# 1) Что такое и зачем нужен файл README
# - README.md — это основной информационный файл в проекте:
# Что это?
# - Текстовый файл (обычно в формате Markdown .md).
# - Содержит описание проекта, инструкции по установке, использование и другую ключевую информацию.
# Зачем нужен?
# - Объясняет, что за проект
# - Цель, особенности, технологии.
# - Помогает быстро начать работу
# - Как установить, настроить и запустить.
# - Стандарт для open-source
# - Без README проект выглядит непрофессионально.
# 2) Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# - CONTRIBUTING.md — файл с правилами для участников проекта
# Что это?
# - Файл в корне репозитория (обычно CONTRIBUTING.md).
# - Содержит инструкции для контрибьюторов.
# Зачем нужен?
# - Объясняет, как участвовать
# - Как предлагать изменения, оформлять пул-реквесты, сообщать о багах.
# - Стандартизирует процесс
# - Требования к коду, тестам, коммитам.
# - Упрощает onboarding
# - Новые участники быстрее вникают в проект.
# Управление проектом
# 1) Как измененить основную ветку (Рисунок 123)
# - В настройках репозитория во вкладке options
# 2) Как передать проект? какая кнопка? (рисунок 124)
# - в настройках репозитория кнопка Transfer
# 3) Что такое файл .gitignore?
# - .gitignore - файл, в коротый вносятся названия файлов,
# чтобы их не  видел git
