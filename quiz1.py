"""
quiz1.ipynb - ответы на вопросы.

В этом ноутбуке я даю ответы на вопросы, связанные
с issues.
"""

# 1) Как понять, что домашка пришла?
# Ответ: если в чате HomeWork тегнули твой ник и написали "прими пул", значит,
# домашка пришла [0:07]
# 2) Как принять домашку?
# Ответ: Заходим в github desktop, нажимаем fetch origin, нажимаем на history
# и видим историю коммитов. Самый недавний коммит скорее всего и есть
# присланная домашка. Далее открываем vscode и работаем с ней. [0:16]
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой
# кнопки мыши на коммит?
# Ответ: кнопка history показывает историю коммитов [0:30]. При нажатии правой
# кнопкой на коммит мыши на коммит выходят следующие функции: Amend commit,
# Reset to commit, Checkout commit, Reorder commit, Revert changes in commit,
# Create branch from commit, Create Tag, Cherry-pick commit, Copy SHA, Copy
# tag, View on GitHub. [3:48]
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ответ: в history правой кнопкой мыши нажимаем View on GitHub, копируем
# ссылку и отправляем в чат HomeWork и пишем "Коммит отдал (ссылка)" [3:45]
# 4) Что такое файл лога?
# Ответ: это файл формата .ipynb, который содержит в себе дату урока, и что мы
# запомнили в течение урока [1:13]
# 4.1) Когда нужно его пушить?
# Ответ: Этот файл нужно заполнять в конце каждого урока после выполнения
# урока, затем пушить. [1:13]
# 5) Что такое интерпритатор?
# Ответ: интерпретатор - это программа, которая читает и запускает наш код.
# [2:48]
# 6) Где можно выбрать интерпритатор?
# Ответ: в vscode в панели сверху. Можно нажать Ctrl+Shift+P, Select
# interpreter и выбрать нужный. (из опыта)
# 7) Что такое модуль?
# Ответ: обычный файлик .py или .ipynb [8:47]
# 8) Как создать и отправить коммит?
# Ответ: выбираем необходимые файлы, пишем название, описание и нажимаем
# commit to (название ветки). Чтобы отправить на гитхаб, нажимаем push origin.
# [3:25]
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Ответ: Заходим в history, нажимаем правой кнопкой мыши на наш коммит и
# нажимаем view on GitHub [3:45]
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# Ответ: pre-commit run --all-files
# 10.1) Напишите список линтеров которые используются для проверки кода и
# дайте их краткую характеристику.
# Ответ: pylint - проверяет синтаксис, стиль PEP8, потенциальные ошибки.
# Flake8 - PEP8. Pydocstyle - проверяет соответствие документации (описание
# модуля и т.д.). Mypy - проверяет соответствие аннотаций типов. При запуске
# форматирует код к единому стилю, а именно PEP8.
# 11) Как узнать какой именно линтер не прошёл проверку?
# Ответ: в терминале выйдет имя линтера с надписью "Failed" [6:12]
# 12) Линтер Pylint видит markdown?
# Ответ: не видит [7:06]
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в
# каком случае?
# Ответ: Если формат файла .ipynb, то vscode видит как ячейку markdown, так и
# ячейку code, когда линтеры(в терминале) могут не видеть ячейку markdown.
# [7:20]
# 14) Где посмотреть номер ячейки в vscode?
# Ответ: справа снизу (из опыта)
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Ответ: файл .ipynb отображает всё в формате json, поэтому и отправляется в
# этом формате. [3:20]
# 16) Где посмотреть в какой ячейке ошибка?
# Ответ: будет видно при нажатии на коммит [5:33] и при команде pre-commit run
# --all-files (из опыта)
# 17) Как запустить терминал?
# Ответ: В панели сверху слева нажимаем на три точечки, terminal, new terminal
# [5:53]
# 18) Что такое линтер?
# Ответ: линтер - это программа, которая проверяет файл на соответствие
# стандартам, на корректность. [6:14]
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# Ответ: https://pylint.readthedocs.io/en/stable/ [8:13]
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после
# исправления ошибок в каком линтере?
# Ответ: Когда закрыли ошибки по Pylint [10:03]
# 21) Что такое описание модуля? Оно должно отражать информацию о том что
# находится в модуле?
# Ответ: описание модуля - обобщает информацию в коде, многострочный
# комментарий. Да, отражает. [9:27]
# 21) С какой  git команды начинается утро программиста?
# Ответ: fetch origin(для обновления информации о репозитории на GitHub) и
# затем pull origin(принять изменения) [15:10]
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в
# кошке, как по другому открыть vs code из кошки?
# Ответ: попробовать в панели changes или history
# 23) Что такое stash?
#   Общее объяснение концепции.
#   Ответ: stash - сохраняем локальные файлы в буфер обмена (обычно перед тем,
# как забрать обновлённые с конфликтом файлы с GitHub)
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: git stash save "NAME_STASH". В кавычках комментарий.
#   Кнопка в vs code:
# Ответ: Stash all changes
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747):
# Ответ: в GitHub desktop нажать stashed changes, затем restore
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# Ответ: git stash apply n
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   Ответ: стэш это всего лишь буфер, в котором временно храним файлы. А
# коммит же полноценное сохранение версии. Также можно использовать стэш для
# незавершённого кода, например, когда нужно пофиксить баг,  и текущий
# незавершенный код сохранить там.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   Ответ: git stash drop stash@{n} - удаляет определённую запись n или
#   git stash clear - удаляет все стэши
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#   Ответ: проверка конфликта, исправить баг
#
# 24) Где посмотреть что есть конфликт в файлах?
# Ответ: после команды pull origin GitHub desktop сам сообщит об проблеме, а
# посмотреть на конфликт в коде можно нажав на open in vscode.
# 24.1) Когда он появляется?
# Ответ: когда ты и кто-то в репозитории, от которого берёшь изменения, оба
# изменили одну и ту же часть кода, в следствии чего и возникает конфликт
# 25) Как решить конфликт в файлах?
# Ответ: спрятать свои изменения в стэш, принять новые с репозитория, открыть
# в vscode и решить конфликт, нажать complete merge.
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то
# что пришло с гитхаба и зелёное это локальные изменения
# Ответ: Зелёное то, что пришло с гитхаба и синее локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы
# спрячете в стэш свои изменения?
# Ответ: да
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Ответ: конфликт, который нужно будет решить
# 28) Сколько способов решения конфликтов было показано в видео? Напишите
# ЧИСЛО и укажите их способы.
# Ответ: 4 способа. Принять текущие изменения, принять входящие изменения,
# принять оба изменения, убрать лишнее ручками [16:38]
# 29) Что делает кнопка complete merge?
# Ответ: окончательно принимает изменения, решает конфликт. [17:40]
# 30) В какой чат нужно писать если остались вопросы?
# Ответ: help me
# 31) Что такое FORK? Зачем его делают?
# Ответ: форк - копия проекта на гит хаб. Если нужно сделать правки в чужой
# проект, хочется развить его или к примеру помочь[20:08]
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Ответ: на сайте репозитория нажимаем fork, new fork, затем в GitHub desktop
# нажимаем clone repository, выбираем форкнутый и нажимаем clone [19:00]
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Ответ: 90%, другими студентами [12:44]
# 34) Как создать файл в vs code?
# Ответ: в панели сверху слева нажать на file, new file
# 35) Файл лога нужно заполнять в конце каждого урока?
# Ответ: да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# Ответ: nbconvert
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или
# pip? Какой лучше использовать для дата сайнс?
# Ответ: пакетный менеджер - программа, которая устанавливает и удаляет
# зависимости, управляет ими и обновляет. Пользуюсь conda,  и для дата сайнс
# лучше использовать conda т.к. уже имеет предустановленные пакеты для дата
# сайнс.
# 3) Почему расширение py лучше чем ipynb?
# Ответ: оба расширения имеют свои плюсы и минусы, но из плюсов формата .py
# то, что при работе с ним не надо работать с json, т.к. Github принимает
# именно его и просматривать изменения может быть не так удобно.
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# Ответ: pep8 - общепринятый стандарт написания кода.
# 4.1) линтеры проверяют на соблюдение pep8?
# Ответ: да
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: по pep8 используется нижний змеиный регистр, слова в именах
# переменных пишутся строчными буквами и разделяются подчёркиванием.
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Ответ: да, но узкоспециализированные i j k для циклов, x y для координат и т.
# д.
# 4.4) Зачем и где мы используем андерскор _
# Ответ: андерскор _ используется как "мусорная переменная" или как приватный
# атрибут/метод.
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: да, хотя не рекомендауется по pep8 т.к. там говорится давать понятные
# имена.
