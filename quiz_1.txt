Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):

В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?

Преподаватель сообщит в Telegram о необходимости принять pull

2) Как принять домашку?

Нажать "Fetch origin" для проверки изменений
Если есть изменения, появится кнопка "Pull origin"

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?

History показывает историю всех коммитов
При правом клике доступны функции:
Revert Commit (отменить коммит)
Copy Commit SHA (копировать хеш коммита)
View on GitHub (открыть коммит на GitHub)
Create Branch from Commit (создать ветку из коммита)

3.1) Где брать ссылку на коммит? куда её отправлять? 

В History правый клик на коммит
View on GitHub
Скопировать URL из браузера
Отправлять ссылку преподавателю для проверки

4) Что такое файл лога? 

Тезисный конспект урока. Содержит основные темы и что было изучено

4.1) Когда нужно его пушить?

После каждого урока

5) Что такое интерпритатор?

Программа, которая построчно читает и выполняет код на языке программирования
Для Python это программа, которая преобразует Python-код в машинные инструкции

6) Где можно выбрать интерпритатор?

В VS Code: через Command Palette (Ctrl+Shift+P)
Выбрать "Python: Select Interpreter"
В нижнем статус-баре VS Code

7) Что такое модуль? 

Файл с Python кодом (.py)
Содержит функции, классы, переменные
Можно импортировать в другие программы
Позволяет организовать код для переиспользования


8) Как создать и отправить коммит?

Открыть GitHub Desktop
Выбрать изменения для коммита (галочками слева)
Внизу написать заголовок коммита (Summary)
Опционально добавить описание (Description)
Нажать "Commit to main"
Нажать "Push origin" для отправки в GitHub


9) Как посмотреть что коммит точно отправлен и находится в github?

В GitHub Desktop: History
На GitHub.com в репозитории: вкладка Commits

10) Какая команда показывает что код не прошёл проверки на ошибки? 

pre-commit run all--files

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.

Вот список линтеров  с их характеристиками:

1. **jupytext**
   - Конвертирует между форматами .ipynb и текстовыми форматами
   - Помогает версионировать Jupyter ноутбуки

2. **docformatter**
   - Форматирует докстринги Python
   - Приводит документацию к единому стилю PEP 257

3. **black**
   - Строгий форматтер кода Python
   - Автоматически форматирует код в единый стиль
   - Не допускает настроек стиля форматирования

4. **nbqa-black**
   - Применяет black к ячейкам кода в Jupyter notebooks
   - Форматирует код внутри .ipynb файлов

5. **pyupgrade**
   - Автоматически обновляет синтаксис Python до новых версий
   - Модернизирует устаревший код

6. **isort**
   - Сортирует и группирует импорты Python
   - Организует импорты по категориям

7. **nbqa-blacken-docs**
   - Форматирует код в документации Jupyter notebooks
   - Применяет стиль black к примерам кода

8. **nbqa-pyupgrade**
   - Применяет pyupgrade к ячейкам Jupyter notebooks
   - Модернизирует код в ноутбуках

9. **nbqa-isort**
   - Сортирует импорты в Jupyter notebooks
   - Применяет isort к ячейкам notebooks

10. **codespell**
    - Проверяет орфографию в коде и комментариях
    - Исправляет распространенные опечатки

11. **nbqa-flake8**
    - Проверяет стиль кода в Jupyter notebooks
    - Применяет flake8 к ячейкам кода

12. **flake8**
    - Проверяет соответствие стилю PEP 8
    - Находит синтаксические ошибки
    - Проверяет сложность кода

13. **nbqa-mypy**
    - Проверяет типы в Jupyter notebooks
    - Применяет mypy к ячейкам кода

14. **mypy**
    - Статический анализатор типов для Python
    - Проверяет корректность типов переменных

15. **nbqa-pylint**
    - Применяет pylint к Jupyter notebooks
    - Проверяет качество кода в ноутбуках

16. **pylint**
    - Комплексный анализатор кода Python
    - Проверяет стиль, ошибки, сложность кода
    - Выдает рекомендации по улучшению

Все инструменты из префикса **nbqa-** это специальные версии соответствующих линтеров, адаптированные для работы с Jupyter notebooks.



11) Как узнать какой именно линтер не прошёл проверку?

В выводе терминала искать Failed после имени линтера
В GitHub Desktop: смотреть детали ошибок в Changes

12) Линтер Pylint видит markdown?

Нет, pylint проверяет только Python код

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?

????

14) Где посмотреть номер ячейки в vscode?

В нижнем статус-баре  указывается cell

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?

Это JSON файл, содержащий код, вывод и метаданные

16) Где посмотреть в какой ячейке ошибка?

В выводе терминала после названия файла указывается cell_1:строка:позиция
В VS Code подсвечивается проблемное место

17) Как запустить терминал?

Ctrl + ` в VSCode
Terminal -> New Terminal в меню

18) Что такое линтер?

Инструмент анализа кода
Проверяет:
Стиль кода
Потенциальные ошибки
Соответствие стандартам (PEP8)
Форматирование

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?

pylint.pycqa.org для поиска кодов ошибок

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?

 pylint

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?

Докстринг в начале файла


21) С какой  git команды начинается утро программиста?

git pull для получения последних изменений

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?

Правый клик на файл -> Open with -> VS Code
Через меню кошки - репозиторий - Open VS Code


23) Что такое stash?  
  Общее объяснение концепции.

Временное хранилище изменений

23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 

  Кнопка в vs code:   ???

Repository -> Stash Changes
Написать описание (опционально)
Нажать "Create Stash"

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

      Git команда: git stash pop (восстанавливает и удаляет) или git stash apply (только восстанавливает)

      В GitHub Desktop:
      Repository -> View Stash
      Выбрать нужный stash
      Нажать "Restore"

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.

Stash: временное хранение, незавершенная работа
Commit: постоянное сохранение, завершенные изменения
Когда использовать:
Stash: при переключении задач, перед pull
Commit: когда функционал готов и протестирован

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  Git команда: git stash list

  В GitHub Desktop: Repository -> View Stash
  В VS Code: Source Control -> More Actions -> Stashes

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

Удалить конкретный: git stash drop stash@{номер}
Удалить все: git stash clear

В GitHub Desktop:
Repository -> View Stash
Выбрать stash
Delete Stash


23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

Срочная задача требует чистого рабочего пространства
Перед pull при незакоммиченных изменениях
Временное сохранение экспериментального кода


24) Где посмотреть что есть конфликт в файлах? 

git status
В VS Code показываются цветными маркерами в файлах

Где посмотреть конфликты в GitHub Desktop:
Желтый восклицательный знак на файлах
Статус "Conflicted" у файлов
В Changes показываются конфликтующие файлы

24.1) Когда он появляется?

Одни и те же строки изменены в разных ветках
При слиянии веток с разными изменениями
При pull с конфликтующими локальными изменениями

25) Как решить конфликт в файлах?

В GitHub Desktop кликнуть на конфликтующий файл
"Open in Visual Studio Code"
В VS Code выбрать:

      Accept Current Change
      Accept Incoming Change
      Accept Both Changes
Сохранить файл
Закоммитить решение конфликта

26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 

Зеленое = входящие изменения (с GitHub)
Синее = локальные изменения

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 

Да, можно делать pull после сохранения в stash

27.1) Что может произойти когда stash восстановите после принятия pull?

Возможен конфликт если были изменены те же файлы
Потребуется решать конфликты

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.

3
accept incoming changes - принять изменения пришедшие изменения
accept current changes - принять локальные изменения
accept both changes - принять оба изменения


29) Что делает кнопка complete merge?

Завершает процесс слияния
Появляется после решения всех конфликтов
Создает коммит слияния

30) В какой чат нужно писать если остались вопросы?

HELP ME в тг

31) Что такое FORK? Зачем его делают? 

Копия репозитория на ваш GitHub аккаунт

32) Как скачать форкнутый репозиторий на локальный компьютер?

Клонировать через git clone или GitHub Desktop

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?

хз

34) Как создать файл в vs code?

New File в Explorer

35) Файл лога нужно заполнять в конце каждого урока?

Да

==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 

В VS Code через контекстное меню.

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?

Программа для управления библиотеками Python


Conda vs pip для Data Science:
      Conda лучше для data science:
            Управляет не только Python пакетами
            Имеет бинарные пакеты для науки
            Лучше работает с виртуальными окружениями

3) Почему расширение py лучше чем ipynb?

Лучше работает с git (меньше конфликтов)
Меньше размер файла
Быстрее выполняется
Проще редактировать и отлаживать
Легче использовать в проектах

4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/

Стандарт оформления Python кода
Описывает правила форматирования

4.1) линтеры проверяют на соблюдение pep8?

Да, большинство линтеров проверяют соответствие PEP8
Особенно flake8 и pylint

4.2) Какая нотация используется для создания переменных? 

Змеиный регистр (snake_case): для переменных и функций
Верблюжий регистр (camelCase): первое слово с маленькой, остальные с большой
Схема Pascal (PascalCase): все слова с большой буквы
UPPER_CASE для констант (MAX_VALUE)

ответ на 85-95 страницы https://t.me/c/1937296927/1/16676


4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?

Да, может 

4.4) Зачем и где мы используем андерскор _ 

В начале имени (_name): указывает на "внутреннее использование"
Двойной в начале (__name): для "сильного сокрытия" в классах
Одиночный (_): для временных/неиспользуемых переменных
В REPL: хранит результат последнего выражения
Для разделения слов в snake_case

4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

Допустимы, но не рекомендуются


