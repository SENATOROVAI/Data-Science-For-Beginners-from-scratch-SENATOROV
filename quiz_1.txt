Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):

В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
  00:08 
  1. Зайти в чат homework.
  2. Ищем сообщение с упоминанием своего ника с просьбой принять пулл.
  3. Делаем вывод о том, что она пришла.
  4. Задаёмся вопросом о том, как её принять.
2) Как принять домашку?
  00:16
  1. Заходим в github desktop
  2. Нажимаем на кнопку fetch origin и ждём пока получим обновления с удалённой ветки.
  3. Заходим на вкладку history и смотрим на изменения в последних коммитах.
  4. После ознакомления открываем проект в vs-code.
3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
  00:30
  1. Она нужна для отслеживания изменений в файле домашнего задания.
  2. Функции:
      a. Amend commit - изменить коммит, даёт внести изменения в последний коммит.
      b. Reset to commit - сброс к коммиту, возвращает проект к состоянию коммита для которого вызвана функция.
      c. Checkout commit - переключиться на коммит, временно переключает проект на указанный коммит для просмотра.
      d. Reorder commit - изменение порядка коммитов, изменяет порядок коммитов в истории 
      e. Revert changes in commit - откат изменений в коммите, отменяет изменения последнего коммита но оставляет его в истории.
      f. Create Tag - cоздать тег, позволяет создать тег на выбранном коммите.
      g. Cherry-pick commit - копировать коммит, берёт коммит и копирует его в другую ветку.
      h. Copy SHA - копировать SHA, копирует уникальный идентификатор коммита в буфер обмена.
      i. Copy tag - копировать название тега в буфер обмена.
      j. View on GitHub - открыть страницу выбранного коммита в интерфейсе GitHub.
3.1) Где брать ссылку на коммит? куда её отправлять? 
  04:21
  1. Нажимаем в github desktop на ссылку View on GitHub.
  2. Копируем.
  3. Отправляем в чат телеграм.
4) Что такое файл лога? 
  01:40 
  Файл, в котором мы ведём историю того, что изучили на уроках. Заполняется после каждого урока.
4.1) Когда нужно его пушить?
  После каждого занятия.
5) Что такое интерпритатор? 
  Это программа, которая запускает наш код.
6) Где можно выбрать интерпритатор?
  При запуске ячейки можно выбрать в выпадающем списке
7) Что такое модуль? 
  Модуль это независимый блок кода, содержащий функции, классы или переменные, предназначенные для выполнения определённых задач.
8) Как создать и отправить коммит?
  1. Зайти в github desktop .
  2. Написать название коммита и описание по желанию.
  3. Нажать на кнопку commit to main.
9) Как посмотреть что коммит точно отправлен и находится в github?
  На странице проекта можно нажать на значок времени со стрелкой против часовой стрелки.
10) Какая команда показывает что код не прошёл проверки на ошибки? 
  pre-commit run --all-files
10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
  1. Pylint проверка на соответствие стилю кодирования PEP 8 и на потенциальные ошибки.
  2. Pydocstyle проверяет строки документации в коде на соответствие стандартам
  3. Flake8 проверяет соответстие стилю и проверяет код на ошибки.
  4. Mypy проверяет типы данных на соответствие в коде.
11) Как узнать какой именно линтер не прошёл проверку?
  Pylint(пример линтера)............................Failed
12) Линтер Pylint видит markdown?
  Не видит.
13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
  Если ячейка с ошибкой после ячейки md.
14) Где посмотреть номер ячейки в vscode?
  Внизу справа будет кнопка-панель.
15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
  JSON. То как мы видим интерфейс работы ipynb файлов - это надстройка, а в реальности это текстовый файл JSON.
16) Где посмотреть в какой ячейке ошибка?
  В окне ошибок будет блок с указанием.
17) Как запустить терминал?
  ctrl + shift + `
18) Что такое линтер?
  Инструмент для проверки кода на ошибки и на несоответствие стандартам до его запуска.
19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
  https://pylint.readthedocs.io/en/stable/index.html
20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
  pylint
21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
  1. Описание модуля это ячейка(строка), которая должна описывать суть кода в написанного в модуле.
  2. Да
21) С какой  git команды начинается утро программиста?
  git fetch
22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
  1. Навести на current repository
  2. Нажать на правую кнопку мыши
  3. В выпадающем меню выбрать "open in vs code"
23) Что такое stash?  
  Общее объяснение концепции.
  Команда для сохранения локальных изменений, которые не были внесены в коммит, до лучших времён.
23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 
  git stash (save)
  Кнопка в vs code:
  stashed changes
23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
  1. Нажать на кнопку stashed changes
  2. view stash
  3. restore
      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.
  1. Изменения в стэше не входят в историю коммитов, подходят для случаев, когда нет логического завершения планируемых изменений.
  2. Коммит подходит при логическом завершении действий.

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
  git stash list
23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
  git stash drop
23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.
  1. Изменения не готовы для коммита, не хотим делать много коммито маленьких
  2. Хотим что-то протестировать, но не хотим затрагивать код на основной ветке.
24) Где посмотреть что есть конфликт в файлах? 
  git diff.
  или вкладка changes.
24.1) Когда он появляется?
  Когда изменился код в одной и той же ветке в удалённом репозитории, а в локальном он остался прежним.
25) Как решить конфликт в файлах?
  Открыть конфликтный файл и выбрать один из вариантов, либо отредактировать лично.
26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 
  Зелёное то что пришло с гитхаба и синее локальные изменения
27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
  Да.
27.1) Что может произойти когда stash восстановите после принятия pull?
  Конфликт.
28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
  4. Accept current, Accept incoming, Accept both, ручное редактирование.
29) Что делает кнопка complete merge?
  Подтверждает изменения.
30) В какой чат нужно писать если остались вопросы?
  Help me.
31) Что такое FORK? Зачем его делают? 
  Для того, чтобы иметь личный экземпляр репозитория, в котором можем делать изменения, а после делать пулл реквест на основной.
32) Как скачать форкнутый репозиторий на локальный компьютер?
  git clone https:...
33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
  С высокой, pull request других разработчиков.
34) Как создать файл в vs code?
  Правой кнопкой мыши new file.
35) Файл лога нужно заполнять в конце каждого урока?
  Да.
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 
2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или 
pip? Какой лучше использовать для дата сайнс?
  Инструмент автоматизации процесса установки, обновления и удаления пакетов(библиотек).
  Я пользуюсь poetry(pip), но conda вероятно лучше.
3) Почему расширение py лучше чем ipynb?
  Потому, что его можно легко проверить на соответствие стандартам в автоматическом режиме.
4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/
  Стандарт стиля написания кода на python.
4.1) линтеры проверяют на соблюдение pep8?
  Да.
4.2) Какая нотация используется для создания переменных? 
  snake_case
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
  Да, но обычно так называют переменную, которую не планируют переиспользовать.
4.4) Зачем и где мы используем андерскор _ 
  Для связки слов в наименовании переменных.
4.5) По PEP8 допустима переменная в одну букву?
  Да, но в редких случаях и не рекомендуется.
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676


