Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):

В ответе подробно всё опишите и обязательно нужно указывать тайм код в видео где я это сказал, по желанию дополнительно прикладываем скриншот из видео.

1) Как понять, что домашка пришла?
tg-> home work->прими пул(0:13)
2) Как принять домашку?
Кошка->fech origin, history, hw(0:30)
3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
Это история коммитов. Верху самый свежий.
View in vs code, view in GitHub(4:25)
3.1) Где брать ссылку на коммит? куда её отправлять? 
в Кошка->стать на коммит-> пр.кнопка-> 
view in GitHub->copy url->tg->homework(4:18) 
4) Что такое файл лога? 
Файл для заполнения тэзисно что было на уроке + дата(2:00)
4.1) Когда нужно его пушить?()
после урока(2:00)
5) Что такое интерпритатор? 
Программа, которая читает и запускает код(3:18)
6) Где можно выбрать интерпритатор?
Select another kernel->python envoeriments(3:19)
7) Что такое модуль? 
Модуль  - это файл. 
8) Как создать и отправить коммит?
Кошка->enter coomit->commit to main->push origin(4:06)
9) Как посмотреть что коммит точно отправлен и находится в github?
Кошка->history(4:19). Или в GitHub ->commits
10) Какая команда показывает что код не прошёл проверки на ошибки? 
pre-commit run all--files(6:31)
10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.

docformatter - автоматически форматирует строки документации (docstrings) в соответствии с PEP 257. Он помогает поддерживать единообразие в форматировании документации, включая отступы и длину строк.

black - форматировщик кода. Он автоматически форматирует код.
pyupgrade-автоматически обновляет синтаксиса Python до более новых версий. Поддержзивает обновление f-строк, удаление устаревших синтаксических конструкций и преобразование старых стилей форматирования.

blacken-docs - обрабатывает блоки кода внутри Markdown-файлов, обеспечивая единообразное форматирование и улучшая читаемость документации

isort - сортирует импорты 

11) Как узнать какой именно линтер не прошёл проверку?
указана ошибка в GIT при отправке коммита.Слева указано имя линтера(5:45)
12) Линтер Pylint видит markdown?
нет (8:12)
13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
да. в vs code учитывются markdown (8:14)
14) Где посмотреть номер ячейки в vscode?
в терминале (8:10) или внизу справа(8:14)
15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
 в формате json. Ipynb отображается в данном формате(3:52)
16) Где посмотреть в какой ячейке ошибка?
 в терминале (8:09) 
17) Как запустить терминал?
vs code-> new terminal(6:37)
18) Что такое линтер?
программа для  проверки кода на корректность(6:58)
19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
https://pylint.pcqa.org (7:17)
20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
pylint (11:21)
21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
Описание модуля - это информация в первой ячейке модуля о том, что в нем будет содержатся. (10:03)
21)  С какой  git команды начинается утро программита?
fech origin (16:23)
22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
Кошка->current repository->right click-> open in vs code(15:29)


23) Что такое stash?  
  Общее объяснение концепции.
  Это сохранение локальных изменение в файле буфер обмена
23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 
git stash - автоматическое сохранение со странным именем
git stash save "NAME_STASH" - сохранение с комментарием
Кнопка в vs code:

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
      git stash apply "NUMBER_STASH"
      git stash apple stash@{n}
23.3) Различие между стэшем и коммитом. 
Стэш: 
  • Временное хранилище для незавершенных изменений.

  • Не сохраняется в истории проекта.

  • Используется, когда изменения готовы к фиксации и вы хотите сохранить их в истории.

Когда лучше сохранить изменения в стэше, а когда коммитить:

• Используйте стэш, когда вам нужно временно отложить изменения и переключиться на другую задачу.

• Коммитьте, когда изменения завершены и готовы к интеграции в основную ветку.

• Коммит:

  • Постоянное сохранение изменений в истории проекта.

  • Сохраняет состояние проекта и может быть возвращено позже.

  • Используется, когда изменения готовы к фиксации и вы хотите сохранить их в истор

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
  git stash list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
  git stash drop stash@{n} — удаляет указанный стэш.
  git stash clear — удаляет все сохраненные стэши.
23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

• Сценарий 1: Вы работаете над новой функцией, но получаете срочную задачу, требующую переключения на другую ветку. Вы можете сохранить текущие изменения в стэш, переключиться на нужную ветку, решить проблему, а затем вернуться и восстановить изменения из стэша.
 
• Сценарий 2: Вы хотите протестировать новый подход или исправление, но не хотите коммитить незавершенные изменения. Сохраните их в стэш, выполните тестирование, и если все в порядке, вернитесь к работе над функцией.

• Сценарий 3: Вы работаете с несколькими задачами одновременно и хотите сохранить промежуточные изменения для каждой из них. Сохраните каждую задачу в отдельный стэш с описанием, чтобы легко вернуться к ним позже

Сценарий 4: Вы отправляете коммит,но система сначала просит принять пул. В данном случае надо сохранить локальные изменения в стэш. Затем принять пул.

24) Где посмотреть что есть конфликт в файлах? 
Кошка (17:22)
24.1) Когда он появляется?
Когда изменние внесено в один и тот же файл на локальном ПК и в GitHub.
25) Как решить конфликт в файлах?
Кошка -> file->right click->open in vs code(17:35)
26) Напишиие правильное утверждение
Зелёное то что пришло с гитхаба (Current change) и синее локальные изменения(Incoming change) (17:44)
27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
Да. Stash changes -> history (view commit) -> fech changes -> stashed changes-> restore (17:06)
27.1) Что может произойти когда stash восстановите после принятия pull?
Конфликт. На файлк треугольник с "!", тк Гит не понимает какие измеения применить к файлу. (17:35)
28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
- vs code (17:37)
Выбираем из 4 вариантов:
- Accept current changes - GitHub (17:57)
- Accept incoming cahnges - local (17:58)
- Accept both changes (18:19)
- убрать вручную -> resolve in merge editor (18:32)
29) Что делает кнопка complete merge?
Применяет внесенные изменения в файл при решении конфликта(18:50)
30) В какой чат нужно писать если остались вопросы?
Help me (19:43)

31) Что такое FORK? Зачем его делают? 
FORK исаользуют для копирования чужого репозитория себе в GitHub  на локалку, то мы делаем его личным репозиторием(20:34)
GitHub->Fork->create fork 
32) Как скачать форкнутый репозиторий на локальный компьютер?
Кошка -> Add-> clone repository-> clone (21:18)
33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
90% - или коллеги или Руслан (19:46)
34) Как создать файл в vs code?
File -> new file 
35) Файл лога нужно заполнять в конце каждого урока?
Да
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 

Вводим в терминал:
pip install jupytext

Конвертация (ipynb to py)
jupytext --to py *.ipynb

Конвертация (py to ipynb)
jupytext --to notebook *.py  

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?

Пакетный менеджер — это инструмент, который позволяет устанавливать, обновлять и управлять библиотеками и зависимостями в проекте. 

 `pip` лучше подходит для установки пакетов из PyPI, в то время как `conda` предоставляет более широкие возможности, включая управление средами и установку пакетов, которые могут не быть доступны в PyPI. Для дата-сайенса многие предпочитают использовать `conda`, так как он упрощает установку библиотек, которые требуют специфических зависимостей (например, NumPy, SciPy).

3) Почему расширение py лучше чем ipynb?

потому что файлы `.py`-это  обычные текстовые файлы с кодом, которые легче редактировать и версионировать с помощью систем контроля версий (например, Git). Кроме того, `.py` файлы можно запускать напрямую в командной строке, что делает их более универсальными для использования в различных средах разработки.

4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/
PEP 8 — это документ, который содержит рекомендации по стилю написания кода на Python. Он охватывает такие аспекты, как отступы, длина строк, имена переменных и функции, а также форматирование комментариев.

4.1) линтеры проверяют на соблюдение pep8?
Да, например `flake8` и `pylint
4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

snake_case, где слова разделяются символом подчеркивания (например, `my_variable_name`). 

4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
да
4.4) Зачем и где мы используем андерскор _ 
 - для обозначения "неиспользуемых" переменны
 - для временных переменных в циклах
 - если стоит 1 _ перед именем переменной может указывать на то, что эта переменная является "приватной".
4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
да допустимо, но не рекомендуется.


