"""Intro's exercise no.

20: quizzes.
"""

# ## **[QUIZ 1](https://www.youtube.com/watch?v=hW_7hodGxVU)**

# ### 1) Как понять, что домашка пришла?
#
# ***0:07*** *—* ***0:15***
#
# Открыть группу «*SENATOROV BOOTCAMP*» в **Telegram**, перейти в тему "HomeWork" и если вы увидите ваш "ник" и задание в формате `@ваш_ник задание`, то вам пришло домашнее задание. Пример: `@gorop51 прими пул`.
#
# ### 2) Как принять домашку?
#
# ***0:16*** *—* ***0:33***
#
# Открыть установленное приложение **GitHub Desktop**, в верхней панели нажать на кнопку "Fetch origin", дождаться завершения процесса и перейти во вкладку "History" на боковой панели, расположенной в левой части приложения, тут помимо предыдущих "коммитов" появятся и те, которые находились в "пул реквесте" с вашим домашним заданием, в начале списка.
#
# ### 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
#
# ***0:34*** *—* ***0:40***
#
# Вкладка "History" нужна для отображения истории коммитов. При нажатии правой кнопкой мыши на один из коммитов будут доступны следующие функции:
#   * "**Amend commit...**" (отображается только в том случае, если "коммит" был создан вами) — редактирование ранее опубликованного "коммита";
#   * "**Reset to commit...**" — возврат состояния репозитория к определённому "коммиту";
#   * "**Checkout commit**" — временный переход состояния репозитория к определённому "коммиту";
#   * "**Reorder commit**" — изменение порядка выпущенных "коммитов";
#   * "**Revert changes in commit**" — обращение изменений определённого "коммита", путём создания нового с противоположными действиями.
#   -----------------
#   * "**Create branch from commit**" — создание новой ветки начиная с определённого "коммита;
#   * "**Create Tag...**" — создание "тега", привязанного к определённому "коммиту", для пометки важных версий;
#   * "**Cherry-pick commit...**" — перенос изменений из определённого "коммита" в другие ветки.
#   -----------------
#   * "**Copy SHA**" — сохранение уникального идентификатора ("хеша") определённого "коммита" в буфер обмена;
#   * "**Copy tag**" — сохранение имени тега определённого "коммита" в буфер обмена;
#   * "**View on GitHub**" — просмотр определённого "коммита" в браузере на сайте GitHub.com.
#
#
# ### 3.1) Где брать ссылку на коммит? куда её отправлять?
#
# ***13:13*** *—* ***13:40***
#
# Переходите во вкладку "History", после чего из списка "коммитов" кликните правой кнопкой мыши по нужному и выберите "View on GitHub", в браузере откроется страничка с вашим "коммитом", где вы можете скопировать ссылку на него из адресной строки. Отправлять ссылку нужно в **Telegram**, в тему "HomeWork" канала «*SENATOROV BOOTCAMP*», с сообщением по типу `коммит отдал <ссылка>`.
#
# ### 4) Что такое файл лога?
#
# ***1:09*** *—* ***2:15***
#
# Файл в котором мы проводим логирование уроков, то есть отмечаем каждый урок, дату и что было пройдено.
#
# ### 4.1) Когда нужно его пушить?
#
# После каждого урока, добавив запись о нем в сам файл лога.
#
# ### 5) Что такое интерпретатор?
#
# ***2:48*** *—* ***2:51***
#
# Это программа, которая запускает и читает написанный код.
#
# ### 6) Где можно выбрать интерпретатор?
#
# Если вы используете **Cursor** или **VS Code**, то при запуске любой ячейки файла с расширением ".ipynb", при условии, что интерпретатор не был выбран ранее или автоматически, вам будет предложен список доступных интерпретаторов в верхней части приложения в окне "Command Center". Или же вы можете сами открыть список доступных интерпретаторов нажав на соответствующую кнопку в правом верхнем углу интерфейса файла с расширением ".ipynb".
#
# ### 7) Что такое модуль?
#
# ***8:49*** *—* ***8:51***
#
# Это обычный файл с расширением ".py" или ".ipynb".
#
# ### 8) Как создать и отправить коммит?
#
# ***3:13*** *—* ***3:41***
#
# Чтобы создать "коммит" после внесения изменений в локальном репозитории, нужно в левом нижнем углу приложения **GitHub Desktop** заполнить ячейки с названием и описанием "коммита", а затем нажать кнопку "Commit to **main**". Чтобы отправить созданный "коммит" на главной вкладке приложения нажмите кнопку "Push origin".
#
# ### 9) Как посмотреть что коммит точно отправлен и находится в github?
#
# ***3:42*** *—* ***3:49***
#
# Необходимо перейти во вкладку "History" вашего репозитория в **GitHub Desktop**, и если ваш новый "коммит" заменяет первую строчку в списке, то всё отправилось.
#
# ### 10) Какая команда показывает что код не прошёл проверки на ошибки?
#
# ***5:48*** *—* ***6:13***
#
# `pre-commit run --all-files`
#
# ### 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#
#   * **flake8** — проверяет PEP8, синтаксис, неиспользуемые переменные и т.д;
#   * **mypy** — проверяет аннотации типов, типовую безопасность;
#   * **pylint** — проверяет стиль, ошибки, сложность, неиспользуемый код;
#   * **pydocstyle** — проверяет, что "docstring" написаны по стандарт;
#   * **codespell** — ищет распространённые орфографические ошибки.
#
# ### 11) Как узнать какой именно линтер не прошёл проверку?
#
# ***6:20*** *—* ***6:34***
#
# При запуске команды `pre-commit run --all-files` напротив "линтера" непрошедшего проверку будет написано "Failed".
#
# ### 12) Линтер Pylint видит markdown?
#
# ***6:53*** *—* ***7:09***
#
# Нет, не видит.
#
# ### 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
#
# ***7:09*** *—* ***7:28***
#
# В том случае если перед ячейкой, в которой произошла ошибка, была хотя бы одна ячейка типа "markdown".
#
# ### 14) Где посмотреть номер ячейки в vscode?
#
# ***6:40*** *—* ***6:48***
#
# На нижней панели, в правом нижнем углу приложения.
#
# ### 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#
# ***3:19*** *—* ***3:23***
#
# В формате "JSON", потому что формат "ipynb" сделан на основе него.
#
# ### 16) Где посмотреть в какой ячейке ошибка?
#
# ***5:30*** *—* ***5:40***
#
# В информации об ошибке, вы сможете увидеть строку по типу `file_name.ipynb:cell_X`, где X - номер ячейки, в которой произошла ошибка.
#
# ### 17) Как запустить терминал?
#
# ***5:50*** *—* ***5:60***
#
# Если вы используете **VS Code** или **Cursor**, то в левом верхнем углу приложений нажмите на кнопку с троеточием, затем кнопку "Terminal" и "New Terminal".
#
# ### 18) Что такое линтер?
#
# ***6:14*** *—* ***6:19***
#
# Это программа, которая проверяет ваш файл на корректность и соответствие принятым стандартам написания кода.
#
#
# ### 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#
# ***8:10*** *—* ***8:23***
#
# "[pylint.pycqa.org](pylint.pycqa.org)"
#
# ### 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
#
# ***10:03*** *—* ***10:16***
#
# **Pylint**
#
# ### 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
#
# ***09:26*** *—* ***09:38***
#
# Это описание информации, содержащейся в модуле. Да, должно.
#
# ### 21) С какой  git команды начинается утро программиста?
#
# `git pull`
#
# ### 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
#
# ***14:07*** *—* ***14:26***
#
# Необходимо в приложении **GitHub Desktop** навестить на панель "Current repository" в левом верхнем углу экрана, затем кликнуть по ней правой кнопкой мыши и выбрать "Open in Visual Studio Code".
#
# ### 23) Что такое stash?
#
# ***14:21*** *—* ***15:40***
#
# Это буфер обмена, в который временно сохраняются локальные изменения репозитория при конфликте версий с изменениями, полученными из интернета.
#
# ### 23.1) Как сохранить стэш?
#
# Команда: `git stash`.
#
# Кнопка в **VS Code**: переходим в "Primary Side Bar", которая по умолчанию расположена в правой части приложения, в предложенном списке инструментов выбираем "Source Control" (символ веточки) и затем в верхней панели инструмента выбираем иконку со всплывающей подсказкой "Stash All Changes..." (символ завернутой влево стрелочки).
#
# ### 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
# Команда: `git stash apply`
#
# В **Cursor** переходим в "Primary Side Bar", которая по умолчанию расположена в правой части приложения, в предложенном списке инструментов выбираем "Source Control" (символ веточки) и затем в верхней панели инструмента выбираем иконку со всплывающей подсказкой "More Actions..." (символ троеточия), затем в открывшемся списке выбираем "Stash" и "Apply Stash...".
#
# ### 23.3) Различие между стэшем и коммитом.
#
# "Стеш" позволяет временно сохранить локальные изменения, не добавляя их в текущую версию, а "коммит" - добавляет изменения в текущую версию.
#
# ### 23.4) Как просмотреть список сохраненных стэшей?
#
# `git stash list`
#
# ### 23.5) Как удалить стэш?
#
# Команды:
#     * `git stash drop` - удаление последней записи сохранённых изменений;
#     * `git stash drop stash@{x}` - удаление x записи по порядку;
#     * `git stash clear` - удаление всех записей.
#
# ### 23.6) Практические примеры использования стэша.
#
# При конфликтах версий, также можно использовать как временное хранилище, когда нужно срочно переключится на другую задачу и нужно сохранить код без "коммита", или когда нужно отдать "коммит" или сделать "пул" с "незакоммиченными" изменениями, или если хочется протестировать код в другой ветке.
#
# ### 24) Где посмотреть что есть конфликт в файлах?
#
# ***15:10*** *—* ***15:19***
#
# В соответствующей всплывающей ошибке в **GitHub Desktop** во время процедуры "Pull origin".
#
# ### 24.1) Когда он появляется?
#
# ***16:08*** *—* ***16:20***
#
# Когда изменения из нескольких версий накладываются друг на друга.
#
# ### 25) Как решить конфликт в файлах?
#
# ***16:38*** *—* ***17:43***
#
# Возможные решения:
#   * Принять локальные изменения, сохраненные в "стеше";
#   * Принять изменения с **GitHub**;
#   * Принять все изменения;
#   * Вручную решить конфликт, отредактировав изменения.
#
# ### 26) Напишите правильное утверждение
#
# ***16:30*** *—* ***16:37***
#
# Зелёное - то, что пришло с "гитхаба", а синее - локальные изменения.
#
# ### 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
#
# ***15:40*** *—* ***15:46***
#
# Да.
#
# ### 27.1) Что может произойти когда stash восстановите после принятия pull?
#
# ***16:06*** *—* ***16:20***
#
# Конфликт версий.
#
# ### 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
#
# ***16:38*** *—* ***17:43***
#
# Четыре способа:
#   * Принять локальные изменения, сохраненные в "стеше";
#   * Принять изменения с **GitHub**;
#   * Принять все изменения;
#   * Вручную решить конфликт, отредактировав изменения.
#
# ### 29) Что делает кнопка complete merge?
#
# Подтверждает слияние версий, после разрешения их конфликта.
#
# ### 30) В какой чат нужно писать если остались вопросы?
#
# ***18:30*** *—* ***18:33***
#
# В тему "HELP ME (bags&reports)" группы «*SENATOROV BOOTCAMP*» в **Telegram**.
#
# ### 31) Что такое FORK? Зачем его делают?
#
# ***19:02*** *—* ***19:10***
#
# Операция копирования репозитория и присвоения его себе. Например когда вы захотели добавить какой-то новый функционал в чужой проект.
#
# ### 32) Как скачать форкнутый репозиторий на локальный компьютер?
#
# ***19:26*** *—* ***19:58***
#
# В приложении **GitHub Desktop** нажмите левой кнопкой мыши по панели "Current repository", затем на кнопку "Add" и "Clone repository...", после чего выберите нужный репозиторий из вашего списка.
#
# Или воспользуйтесь командой `git clone <url>`.
#
# ### 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#
# ***12:44*** *—* ***12:50***
#
# С вероятностью 90% ошибки уже решены Русланом Сенаторовым и другими его студентами.
#
# ### 34) Как создать файл в vs code?
#
# ***0:45*** *—* ***0:56***
#
# в "Primary Side Bar", которая по умолчанию расположена в правой части приложения, в предложенном списке инструментов выбираем "Explorer" (символ два листа), затем в верхней панели инструмента выбираем иконку со всплывающей подсказкой "New File..." (символ файл) и вводим название файла.
#
# ### 35) Файл лога нужно заполнять в конце каждого урока?
#
# ***1:10*** *—* ***1:12***
#
# Да.
#
# -------------------------------------
# ## Дополнительные вопросы:
#
# ### 1)Какая команда конвертирует файл в py из ipynb?
#
# `jupyter nbconvert --to python example.ipynb`
#
# ### 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
#
# Пакетный менеджер - это программа позволяющая скачивать готовы модули, которые решают какие либо распространенные задачи. Я пользуюсь **conda-forge** (miniforge3). **Conda** лучше для "дата сайнс", так как работает с окружениями без дополнительных инструментов и у нее меньше проблем с совместимостью.
#
# ### 3) Почему расширение py лучше чем ipynb?
#
# Ключевое преимущество в том что ".py" - это просто текстовый файл, а ".ipynb" - JSON.
#
# ### 4) Что такое pep8?
#
# Руководство по внешнему виду написанного кода на Python.
#
# ### 4.1) линтеры проверяют на соблюдение pep8?
#
# Да, иногда частично, иногда полностью.
#
# ### 4.2) Какая нотация используется для создания переменных?
#
# - `snake_case` для имён переменных;
# - имена должны быть понятными и описательными;
# - избегайте однобуквенных имён, кроме `i`, `j`, `k` в циклах и `x`, `y`, `z` для координат;
# - константы пишите `ВЕРХНИМ_РЕГИСТРОМ_С_ПОДЧЕРКИВАНИЕМ`;
# - не называйте переменные как ключевые слова Python (`list`, `str`, `type`, `id`, `max`, `min`, `filter` и т.д.);
# - переменные — строчными буквами, классы — `PascalCase`;
#
# ### 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
#
# Да.
#
# ### 4.4) Зачем и где мы используем андерскор _
#
# Для имени переменной, которая сразу после использования нам больше не понадобится, например в качестве счетчика цикла `for`.
#
# ### 4.5) По PEP8 допустима переменная в одну букву?
#
# Да, но только в ограниченных, очевидных случаях. Во всех остальных не рекомендуются, потому что нарушают принцип читаемости.

# ## **[QUIZ 2](https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E)**

# ### 1. Как включить автосохранение данных в VSCODE?
#
# ***0:09*** *—* ***0:13***
#
# На верхней панели в левом углу приложения нажимаем кнопку "File" и затем "Auto Save".
#
# ### 2. Как настроить перенос строки?
#
# ***0:14*** *—* ***0:39***
#
# На верхней панели в левом углу приложения нажимаем кнопку "File", затем "Preferences"，"Settings", пишем в строку поиска сверху "wrap" и в пункте "Word Wrap" ставим "wordWrapColumn", а затем в пункте "Word Wrap Column" ставим 79 символов.
#
# ### 3. Сколько символов по pep8 разрешено на строке?
#
# ***0:24*** *—* ***0:26***
#
# Не более 79 символов.
#
# ### 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# ***0:50*** *—* ***4:30***
#
# В видео показаны следующие способы:
#
# * для комментариев:
#     - Разбитие длинного комментария на несколько коротких;
#
# * для выражений (4.4):
#     - оборачиваем длинное выражение в круглые скобочки и переносим на нижние строки;
#
# * для длинных строк (4.6):
#     - при записи в переменную разбиваем на несколько частей и соединяем с помощью конкатенации строк.
#
# ### 5. Проверка на ошибки c помощью кнопки problems, где она находится?
#
# ***4:47*** *—* ***4:55***
#
# На нижней панели приложения, если она открыта, если нет, то на верхней панели в левом углу приложения нажимаем кнопку "View", затем "Problems".
#
# ### 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
#
# ***6:23*** *—* ***6:48***
#
# В панели инструментов, расположенной в левой части приложения, (иконка веточки). В клиенте "гита" перейти в раздел "Source Control", ввести название и описание "коммита", и подтвердить создание, нажав на кнопку "Commit", и затем оправить его кликнув на панели инструментов инструмента на кнопку с иконкой троеточия, а затем "Push"; домашнее задание принимается там же, где и "Push", но по кнопке "Pull".
#
# ### 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
#
# ***7:10*** *—* ***7:30***
#
# Это контроль версий. Да, он размещает репозитории и их версии на ваше устройство. Да, можно.
#
# ### 8. Как вставить картинку в маркдаун?
#
# ***7:57*** *—* ***8:07***
#
# Скопировать картинку в буфер обмена и вставить в ячейку сочетанием клавиш "ctrl+v", или кликом правой мыши и кнопкой "Paste".
#
# ### 9. Где посмотреть длину строки в vs code?
#
# ***1:05*** *—* ***1:30***
#
# При работе в файле "py", необходимо выделить строку, и в нижнем правом углу приложения, на нижней панели, можно будет увидеть надпись по типу `Ln 1, Col 1 (x selected)`, где x - длина вашей строки.
#
# ### 10. Как поменять тип ячейки с питона на маркдаун?
#
# ***7:42*** *—* ***7:49***
#
# В правом нижнем углу кликнуть на кнопку, отображающую текущий тип ячейки - "Python", и выбрать из выпадающего типа списков "Markdown".
#
# ### 11. Как запустить сразу все ячейки в юпитере?
#
# ***8:28*** *—* ***8:34***
#
# В интерфейсе "ipynb" файла, на верхней панели, необходимо нажать "Run All".
#
# ### 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
#
# ***8:13*** *—* ***8:23***
#
# Нужно использовать конструкцию `<img href='...'></img>` из языка **HTML**.
#
# ### 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
#
# ***8:40*** *—* ***8:47***
#
# "Shift + Enter".
#
# ### 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
#
# ***8:57*** *—* ***9:10***
#
# В любой из ячеек, нажать на панели инструментов на иконку троеточия и поставить галочку перед "Show Cell Line Number".
#
# ### 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
#
# ***9:27*** *—* ***9:47***
#
# Это кнопка, которая показывает в какой ячейке произошла ошибка и переносит на неё же.
#
# ### 16. Как очистить вывод ячеек которые уже запущены?
#
# ***10:40*** *—* ***10:51***
#
# В интерфейсе ipynb файла, на верхней панели, необходимо нажать "Clear All Outputs".
#
# ### 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
#
# ***10:55*** *—* ***11:10***
#
# Кнопка "Split Editor Right" расположена в правом верхнем углу приложения, и разделяет экран на две части, позволяя работать с несколькими файлами одновременно.
#
# ### 18. Каким сочетанием убирается левый сайдбар?
#
# ***11:19*** *—* ***11:24***
#
# "Ctrl + b".
#
# ### 19. Кнопка два листочка это наши локальные файлы?
#
# ***11:32*** *—* ***11:36***
#
# Да.
#
# ### 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
#
# ***9:20*** *—* ***9:23***
#
# Ошибка "NameError".
#
# ### 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
#
# Да.
#
# ### 22. Что такое валидация?
#
# ***9:49*** *—* ***9:55***
#
# Валидация ноутбука, происходит при запуске всех ячеек, чтобы убедится в том, что код из всех ячеек работает без ошибок.
#
# ### 23. Что такое трассировка ошибки?
#
# ***10:02*** *—* ***10:11***
#
# Это визуальный вывод ошибки ячейки для дальнейшего исправления.
#
# ### 24. Что значит отвалился интерпритатор?
#
# ***9:56*** *—* ***10:00***
#
# Выполнение ячеек остановлено, из-за ошибки возникшей в одной из них.
