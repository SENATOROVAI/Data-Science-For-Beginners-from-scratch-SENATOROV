# %%
"""Quiz 1 and quiz 2."""

# %% [markdown]
# 1) Как понять, что домашка пришла?
# Таймкод. 00:05
# Ответ:
# В чате Homework видим ник и фразу "прими пул"
#
# 2) Как принять домашку?
# Таймкод. 00:18
#
# Ответ:
# - В GitHubDesktop нажимаем Pull origin, Fetch origin
# - Заходим в History и видим коммиты
# - Открываем директорию в VSCode
#
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# Таймкод. 00:28, 3:48
# Ответ: можно посмотреть коммиты
# При нажатии ПКМ можно открыть коммит в GitHub
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Таймкод. 3:45
#
# Ответ:
# Ссылку на коммит берем:
# - В GitHubDesktop заходим в History
# - Нажимаем ПКМ и выбираем View on GitHub
#
# Отправляем ссылку в чат ТГ (Homework) и пишем "коммит отдал + ссылка на коммит"
#
# 4) Что такое файл лога?
# Таймкод. 1:05
#
# Ответ:
# Нужно заполнять в конце каждого урока. Пишем дату урока и что запомнили в течение урока.
#
#
# 4.1) Когда нужно его пушить?
# Ответ: После выполнения урока
#
#
# 5) Что такое интерпритатор?
# Таймкод. 2:47
# Ответ: программа, запускающая код
#
# 6) Где можно выбрать интерпритатор?
# Таймкод. 2:45
# Ответ: В выпадающем меню наверху. Select ANother Kernel... -> Python Environments -> base (Python 3.xx.x). Можно выбрать с анакондой.
#
#
# 7) Что такое модуль?
# Таймкод: 08:47
# - Это файл .py или .ipynb
#
# 8) Как создать и отправить коммит?
# Таймкод. 3:12
#
# Ответ:
# - В GitHubDesktop пишем заголовок коммита и нажимаем Commit to main,
# - а далее push origin
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Таймкод. 3:45
#
# Ответ:
# - В GitHubDesktop заходим в History
# - Нажимаем ПКМ и выбираем View on GitHub
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# Таймкод. 5:50
#
# Ответ:
# - Открываем терминал
# - запускаем команду pre-commit run --all-files
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Таймкод. 6:00
# Ответ:
# - flake8 (nbqa-flake8) - проверка стиля Python (PEP8).
# - pylint (nbqa-pylint) - анализ кода, проверка стиля.
# - mypy (nbqa-mypy) - статическая проверка типов.
# - pydocstyle (nbqa-pydocstyle) - проверка docstring.
# - debug-statements - поиск отладочного кода (например, print).
# - python-tests-naming - проверка именования тестов.
# - codespell - поиск орфографических ошибок.
# - check-yaml - проверка YAML-файлов.
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# Таймкод. 6:20
#
# Ответ: после запуска pre-commit run --all-files увидем линтеры с пометкой Failed в красной заливке.
#
# 12) Линтер Pylint видит markdown?
# Таймкод. 6:56
#
# Ответ: линтер не видит markdown
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Таймкод. 6:56
#
# Ответ: Если ошибка после markdown ячейки(ячеек).
#
# 14) Где посмотреть номер ячейки в vscode?
# Таймкод. 06:42
#
# Ответ: внизу справа
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Таймкод. 3:20
#
# Ответ: ipynb отображаются в формате JSON
#
#
# 16) Где посмотреть в какой ячейке ошибка?
# Таймкод. 06:38
#
# Ответ: в терминале. Например, lesson1.ipynb:cell_1
#
# 17) Как запустить терминал?
# Таймкод. 5:50
#
# Ответ:
# - В меню наверху Terminal -> New Terminal
#
# 18) Что такое линтер?
# Таймкод. 06:17
#
# Ответ: Программа, которая проверяет файл на корректность.
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# Таймкод. 08:05
#
# Ответ: Заходим на сайт pylint
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Таймкод. 09:48
#
# Ответ: в линтере pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Таймкод. 9:25
#
# Ответ: строка, описывающая, что содержится в модуле.
#
# 21) С какой  git команды начинается утро программиста?
# Ответ: pull
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Таймкод. 13:52
#
# Ответ:
# - ПКМ по Current repository
# - Open in Visual Studio Code
#
# 23) Что такое stash?
#   Общее объяснение концепции.
# Таймкод. 15:30
#
# Ответ: буфер обмена для сохранения локальных изменений
#
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash
#
#   Кнопка в vs code: В разделе Changes ... -> Stash -> Выбираем команду в списке
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?: Таймкод. 15:55. Нажимаем Stashed Changes и Restore.
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash apply
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# Ответ: Различие: стэш - локальное хранилище, а коммит можно отправить в GitHub/
# Стэш полезен, когда нужно принять pull, но при этом не потерять локальные наработки.
# А коммить стоит, когда дошли до логического завершения некого степа в задаче.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): отдельный git stash drop, все git stash clear
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# Ответ:
# - для принятия pull
# - перенос текста с одной ветки на другую через стэш
# - временно скрыть текущие изменения для работы со срочной задачей в рамках проекта.
#
# 24) Где посмотреть что есть конфликт в файлах?
# Таймкод. 15:12
#
# Ответ: В GitHubDesktop, когда делаем pull
#
# 24.1) Когда он появляется?
# Таймкод. 15:00
#
# Ответ: когда в одном файле работа происходит локально и в удаленном репозитории. При попытке pull появится Error с кнопкой Stash changes and continue.
#
# 25) Как решить конфликт в файлах?
# Таймкод. 15:30
#
# Ответ:
# - Сохранить локальные изменения в буфер обмена
# - Тем временем принимаются изменения из интернета
# - Заходим в Stashed Changes и восстановить локальные изменения, нажав Restore
# - Открываем конфликтный файл в IDE
# - Выбираем вариант решения конфликта
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# Таймкод. 16:30
#
# Ответ: Зелёное то что пришло с гитхаба и синее локальные изменения
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Таймкод. 15:15
#
# Ответ: В видео сначала приняли pull, а затем нажатие на кнопку спрятали в стэш свои изменения. Сценарий описанный в вопросе - возможен.
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Таймкод. 16:00
#
# Ответ: может произойти конфликт. Гит может не понять, какие изменения сохранить: из интернета или локальные.
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Таймкод. 16:40
#
# Ответ: 4
# - Нажать кнопку Accept Current Change (примется то, что пришло с Интернета)
# - Нажать кнопку Accept Incoming Change (примутся локальные изменения)
# - Нажать Accept Both Changes (принять оба изменения)
# - Устранить конфликт вручную
#
# 29) Что делает кнопка complete merge?
# Таймкод. 17:40
#
# Ответ: Разрешает конфикт по выбранному сценарию, в GitHubDescktop пропадает значок конфликта.
#
# 30) В какой чат нужно писать если остались вопросы?
# Таймкод. 18:30
#
# Ответ: HELP ME
#
# 31) Что такое FORK? Зачем его делают?
# Таймкод. 19:00
#
# Ответ: FORK позволяет скопировать репозиторий и сделать его личным.
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Таймкод. 19:20
#
# Ответ: В GitHubDecktop выбираем: Current repository -> Add -> Clone repository -> выбираем из списка репозиторий -> Clone
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Таймкод. 12:45
#
# Ответ: Вероятность 0.9. Решили: Руслан, студенты.
#
# 34) Как создать файл в vs code?
# Таймкод. 0:52
#
# Ответ: нажимаем на лист с плюсиком и пишем название.расширение.
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Таймкод. 1:05
# Ответ: да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# Ответ: по ссылке сообщение не найдено.
# Способов есть несколько, один из низ: jupyter nbconvert --to script имя_файла.ipynb
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Пакетный менеджер - это инструмент для действий над библиотеками.
# conda даёт готовую среду для создания DS проектов.
# pip можно взять, когда для проекта нужен проект, отсутствующий в conda.
#
# 3) Почему расширение py лучше чем ipynb?
# .py - стандартный формат Python, работающий в разных IDE
# .py - легче
# .py - не хранится в JSON-формате
# .py - хороши для деплоя.
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
#
# Ответ: набор правил по оформлению кода.
#
# 4.1) линтеры проверяют на соблюдение pep8?
#
# Ответ: да
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
# Ответ: Змеиный регистр (snake_case)
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Ответ: да
#
# 4.4) Зачем и где мы используем андерскор _
# Ответ:
# - при распаковке
# - в циклах
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
# Ответ:
# В отдельных случаях короткие имена переменных вполне допустимы. Например, имя i часто используется с переменными циклов for, перебирающих диапазоны чисел или индексов списка, а j и k (следующие за i в алфавитном порядке) используются с вложенными циклами. Еще одно исключение — использование x и y для декартовых координат.

# %% [markdown]
# 1. Как включить автосохранение данных в VSCODE?
# Таймкод. 00:07
# Ответ: File -> Auto Save
#
# 2. Как настроить перенос строки?
# Таймкод. 00:15
# Ответ: File -> Preferences -> Settings -> В поиске пишем "wrap" -> Выставляем значение wordWrapColumns в настройке Editor: Word Wrap
#
# 3. Сколько символов по pep8 разрешено на строке?
# Таймкод. 00:23
# Ответ: 79
#
# 4. Какие способы переноса строк показаны в видео:
# Таймкод. 01:47.
# Ответ:
# - 4.4 (Таймкод 02:36)
# - 4.6 (Таймкод 03:40)
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# Таймкод. 04:30
# Ответ: Находится в окошке рядом с терминалом, которое открывается, используя ctrl+shift+~
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Таймкод. 06:20
# Ответ: В меню слева, где иконки расположены в столбик. Нас интересует иконка с ветвлением.
#
# Таймкод. 06:43
# Ответ: Для команд Pull и Push нажимаем три точки и выбираем Pull (принятие домашки) или Push (отправка коммита).
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Таймкод. 6:25
# Ответ: GIT - система контроля версий. Можно посмотреть историю изменеий файлов и вернуться к любому коммиту.
#
# Таймкод. 06:55
# Ответ: Внизу рядом с терминалом есть GITLENS, где красиво показаны коммиты.
#
# 8. Как вставить картинку в маркдаун?
# Таймкод. 07:55
# Ответ: делаем скриншот, вставляем через ctrl+v
#
# 9. Где посмотреть длину строки в vs code?
# Таймкод. 01:00
# Ответ: в файле .py внизу показывается длина строки
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# Таймкод. 07:43
# Ответ: В нижнем левом углу ячейки нажимаем на название с типом ячейки и выбираем в появившемся списке Markdown.
#
# 11. Как запустить сразу все ячейки в юпитере?
# Таймкод. 08:25
# Ответ: кнопка Run All
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Таймкод. 08:07
# Ответ: Нужен тег img с атрибутом href(ссылка) + размеры картинки. Тег img из HTML.
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Таймкод. 08:40
# Ответ: Shift+Enter
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Таймкод. 08:55
# Ответ:
# - Нажимаем в верхем правом углу ячейки на ...
# - Ставим галочки у опции Show Cell Line Numbers
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# Таймкод. 09:20
# Ответ: Кнопка, позволяющая быстро найти ячейку с ошибкой
#
# 16. Как очистить вывод ячеек которые уже запущены?
# Таймкод. 10:40
# Ответ: Кнопка Clear All Outputs
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Таймкод. 10:54
# Ответ: Нужно справа навернху нажать на значок книжки (Split) и рабочая область разделится на 2 экрана. Можно сделать и больше 2 экранов.
#
# 18. Каким сочетанием убирается левый сайдбар?
# Таймкод. 11:18
# Ответ: ctrl+b
#
# 19. Кнопка два листочка это наши локальные файлы?
# Таймкод. 07:20
# Ответ: локальные файлы
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# Таймкод. 9:20
# Ответ: DICT
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Ответ: ознакомился. На репозиторий поставил Star
#
# 22. Что такое валидация?
# Таймкод. 09:50
# Ответ: Запуск ноутбука, используя кнопку Run All. По нажатии на Go To можно быстро найти ячейку с ошибкой
#
# 23. Что такое трассировка ошибки?
# Таймкод. 10:00
# Ответ: Визуальное представление ошибки. Например, NameError: name Dict is not defined.
#
# 24. Что значит отвалился интерпритатор?
# Таймкод. 9:25
# Ответ: произошла ошибка, интерпретатор не смог обработать.
