"""Выполнение Квиза по ишьюсь Quiz #6."""

# # Квиз №1
#
# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# **1) Как понять, что домашка пришла?**
# 0:06 - Зайти в чат HomeWork и обнаружить свой ник с сообщением "прими пул"
#
#
# **2) Как принять домашку?**
# 0:22 - зайти в кошечку, нажать кнопку Fetch Origin
#
#
# **3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?**
# Чтобы посмотреть коммиты. Функции на скрине
# ![alt text](<Снимок экрана 2025-09-17 221957.png>)
#
#
# **3.1) Где брать ссылку на коммит? куда её отправлять?**
# 3:48 - зайти в History в кошечке, найти коммит, нажать правой кнопкой, нажать Open in GitHub, скопировать ссылку из строки браузера.
# отправлять в чат телеграм
#
#
# **4) Что такое файл лога?**
# 1:14 - Это файл, который заполняется в конце каждого урока
#
#
# **4.1) Когда нужно его пушить?**
# После каждого урока
#
#
# **5) Что такое интерпритатор?**
# 2:51 - это программа, которая читает и запускает наш код
#
#
# **6) Где можно выбрать интерпритатор?**
# 2:56 - В палитре команд (верхняя строка в VSC) или с помощью кнопки base справа вверху
#
# **7) Что такое модуль?**
# это файл с кодом, который можно подключать и использовать в программе
#
#
#
# **8) Как создать и отправить коммит?**
# 3:20 - зайти в кошку, найти изменения в файле, внизу слева в окне комментария к коммиту заполнить заголовок и тело нажать Commit to main и нажать Push Origin
#
#
# **9) Как посмотреть что коммит точно отправлен и находится в github?**
# 3:50 - зайти в history и найти свой коммит в самом верху
#
#
# **10) Какая команда показывает что код не прошёл проверки на ошибки?**
# 6:06 - команда в терминале pre-commit run
#
#
# **10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.**
# flake8 - проверяет стиль и базовые ошибки в коде
# mypy - проверяет аннотации типов
# pylint - анализирует качество кода
# pydocstyle - проверяет докстринги
#
#
# **11) Как узнать какой именно линтер не прошёл проверку?**
# 6:27 - Напротив соответствующего линтера будет написано Failed и указан файл, ячейка, строка и номер ошибки (иногда) с сутью ошибки
#
#
# **12) Линтер Pylint видит markdown?**
# нет
#
#
# **13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?**
# 7:20 - да, если ячейка с ошибкой после ячейки markdown, то линтер не учтет такую ячейку в подсчете номера ячейки с ошибкой
#
#
# **14) Где посмотреть номер ячейки в vscode?**
# 7:19 - в правом нижнем углу написано Cell X of Y - где X - номер ячейки
#
#
# **15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?**
# JSON при том, что ipynb отправляется в гитхаб именно как JSON
#
#
# **16) Где посмотреть в какой ячейке ошибка?**
# после запуска pre-commit run в выводе покажутся ошибки с номерами ячейки
#
#
# **17) Как запустить терминал?**
# Через меню Terminal - New terminal
#
#
# **18) Что такое линтер?**
# Это программа, которая проверяет код и показывает в нем ошибки
#
#
# **19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?**
# 8:18 - https://pylint.readthedocs.io/en/stable/#
#
#
# **20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?**
# 10:15 - pylint
#
#
# **21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?**
# это комментарий в начале модуля, где прописывается, что делает модуль и зачем он нужен.
# да, должно отражать
#
#
# **21.1) С какой  git команды начинается утро программиста?**
# git pull
#
#
# **22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?**
# 14:21 - в кошке нажать правой кнопкой мыши на репозиторий и нажать Open in VSC
#
# **23) Что такое stash?**
#   15:32 - это сохранение моих изменений в файле в локальный буфер обмена и принятие из интернета изменений файла
#
#
# **23.1) Как сохранить стэш?**
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash save "NUMBER_STASH"
#   Кнопка в vs code: Stash changes and continue
#
# **23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:**
# 16:01 - зайти в Stashed Changes и нажать Restore
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash apply "NUMBER_STASH"
#
# **23.3) Различие между стэшем и коммитом.**
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   коммит фиксирует изменения в репозитории, а стэш временно локально сохраняет изменения
#   коммитим, если закончили работу
#   стэшим, если не закончили, и нужно будет продолжить или если нужно принять новые изменения git pull
#
#
# **23.4) Как просмотреть список сохраненных стэшей?**
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list
#
# **23.5) Как удалить стэш?**
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash drop (точечно) и git stash clear (все)
#
#
# **23.6) Практические примеры использования стэша.**
#   Краткие сценарии, где стэш помогает.
#   1 - если нужно принять изменения из интернета перед коммитом
#   2 - если нужно переключиться на другую задачу, а текущая еще не закончена
#
# **24) Где посмотреть что есть конфликт в файлах?**
# 16:24 - после восстановления Стэша, во вкладке Changes в кошечке отображается конфликт в окне справа
#
# **24.1) Когда он появляется?**
# 15:09 - когда два человека работают над одним файлом
#
#
# **25) Как решить конфликт в файлах?**
# 16:34 - открыть конфликт в IDE, посмотреть конфликт и выбрать способ решения (пункт)
#
#
# **26) Напишите правильное утверждение**
# **-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения**
# 16:34 - Зелёное то что пришло с гитхаба и синее локальные изменения
#
# **27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?**
# да
#
#
# **27.1) Что может произойти когда stash восстановите после принятия pull?**
# может произойти конфликт
#
#
# **28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.**
# 16:45 - 3 штуки:
# 1) Accept current changes - примется зеленое
# 2) Accept incoming changes - примется синее
# 3) Accept both changes - примется оба
#
#
# **29) Что делает кнопка complete merge?**
# 17:50 - фиксирует изменения тем способом, который я выбрал, и разрешает конфликт
#
#
# **30) В какой чат нужно писать если остались вопросы?**
# 18:33 - в Help Me
#
#
# **31) Что такое FORK? Зачем его делают?**
# 19:06 - это операция в GitHub, которая копирует репозиторий и делает его личным
#
#
# **32) Как скачать форкнутый репозиторий на локальный компьютер?**
# 19:28 - зайти в кошечку, выбираем репозиторий, нажимаем Clone
#
#
# **33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?**
# 12:50 - 90%, Руслан и студенты
#
# **34) Как создать файл в vs code?**
# нажать кнопку New File или через меню File - New File
#
#
# **35) Файл лога нужно заполнять в конце каждого урока?**
# Да
#
#
# ==================
#
# Дополнительные вопросы:
# **1)Какая команда конвертирует файл в py из ipynb?**
# подсказка https://t.me/c/1937296927/1/26527
# jupyter nbconvert --to script quiz.ipynb
#
#
# **2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?**
# это инструмент, которые устанавливает библиотеки и управляет ими (обновляет, удаляет и т.д.)
# conda
# лучше conda
#
# **3) Почему расширение py лучше чем ipynb?**
# подсказка:https://peps.python.org/pep-0008/
#
#
# **4.1) линтеры проверяют на соблюдение pep8?**
# да
#
#
# **4.2) Какая нотация используется для создания переменных?**
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Змеиный регистр (snake_case)
# Верблюжий регистр (camelCase)
# Схема Pascal (PascalCase)
#
#
# **4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?**
# да
#
#
# **4.4) Зачем и где мы используем андерскор _**
# чтобы обозначить неважные или ненужные значения
#
#
# **4.5) По PEP8 допустима переменная в одну букву?**
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
#
#

# # Квиз №2
#
# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# **1. Как включить автосохранение данных в VSCODE?**
# 0:10 - через меню File - Auto save
#
#
# **2. Как настроить перенос строки?**
# 0:20 - зайти в Preferences - Settings - написать в поиске wrap - в выпадающем списке справа выбрать wordWrapColumn - поставить 79 символов - сохранить
#
#
# **3. Сколько символов по pep8 разрешено на строке?**
# 0:24 - не больше 79
#
#
# **4. Какие способы переноса строк показаны в видео:**
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# Ответ: Показаны 4.4 (2:37), 4.6 (3:54)
#
#
# **5. Проверка на ошибки c помощью кнопки problems, где она находится?**
# 4:53 - в нижнем окне IDE первая слева вкладка
#
#
# **6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?**
# 6:26 - слева третья иконка слева
# 6:35 - отправить коммит во вкладке Source Control, вписать комментарий и нажать Коммит
# ![alt text](<Снимок экрана 2025-09-18 000834.png>)
# 6:47 - принимается с помощью кнопки Pull
#
#
# **7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?**
# git - это система контроля версий
# может быть локальный, а может и нет
# да, можно посмотреть историю и вернуться к любому коммиту
#
#
#
# **8. Как вставить картинку в маркдаун?**
# 8:02 - скопирвоать картинку, нажать в ячейке маркдаун ctrl+v
#
#
#
# **9. Где посмотреть длину строки в vs code?**
# в строке состояния (внизу справа)
#
#
# **10. Как поменять тип ячейки с питона на маркдаун?**
# 7:46 - в ячейке внизу справа нажать Python и в открывшемся окне выбрать MarkDown
#
#
#
# **11. Как запустить сразу все ячейки в юпитере?**
# 8:33 - нажать Run All
#
#
#
# **12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?**
# прописать специальный тег в markdown
# да
#
#
#
# **13. Какой хоткей чтобы запустить ячейку с смещением на следующую?**
# Shift + Enter
#
#
#
# **14. Как включить отображение номеров строк в юпитере(Cell line numbers)?**
# 9:03 - нажать три точки справа ячейки и нажать Show Cell Line Numbers
#
#
#
# **15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?**
# 9:30 - это кнопка, нажав на которую, можно попасть на ячейку, которая запустилась с ошибкой
# нажать на кнопку Go To
#
#
#
# **16. Как очистить вывод ячеек которые уже запущены?**
# Нажать кнопку Clear All Outputs
#
#
#
# **17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?**
# 11:00 - это кнопка, которая разделяет экран и позволяет работать в нескольких файлах одновременно
# чтобы работать нажать Split Edit (квадрат с вертикальной линией справа сверху)
#
#
#
# **18. Каким сочетанием убирается левый сайдбар?**
# Ctrl+B
#
#
#
# **19. Кнопка два листочка это наши локальные файлы?**
# да
#
#
#
# **20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?**
# 9:26 - Dict
#
#
#
# **21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?**
# да, спасибо
#
#
#
# **22. Что такое валидация?**
# проверка, что вводимые данные корректные
#
#
# **23. Что такое трассировка ошибки?**
# это отчёт о том, где и почему произошла ошибка во время выполнения программы
#
#
# **24. Что значит отвалился интерпритатор?**
# что интерпретатор, который выполняет мой код, перестал работать из-за ошибки
#
#
# Отвечаете на вопросы в вашем редакторе кода.
#
