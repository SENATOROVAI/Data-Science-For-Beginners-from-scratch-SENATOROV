"""quiz."""

# quiz1
#
# 1) Как понять, что домашка пришла?
# меня тегнут в чате HomeWork, формат "@мой_ник прими пул"
# 0:10-0:17
#
# 2) Как принять домашку?
# github desktop -> pull origin -> fetch origin
#
# 3) Зачем нужна кнопка history и какие функции появляются
# при нажатии правой кнопки мыши на коммит?
# В ней находится история коммитов, сверху вниз по новизне
# 0:30-0:43
# По нажатию ПКМ даются функции: amend, reset to, checkout, reorder revert changes... commit.
# А так же посмотреть коммит на гитхабе чтобы взять на него ссылку
# 3:47-3:50
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Коммит - локальная фиксация изменений
# Ссылка на коммит по нажатию ПКМ -> View on github.
# Отправляем в чат тг Homework с подписью "Коммит отдал"
# 3:50-4:30
#
# 4) Что такое файл лога?
# Файл формата ipynb(markdown) который нужно заполнять
# в конце урока(дата и что узнал в течение урока по пунктам),
# как сказано в видео, по факту он создается единожды, для прогона линтеров
# 1:10-2:16
#
# 4.1) Когда нужно его пушить?
# Как я понял, после выполнения домашней работы вместе с файлом домашки,
# либо же после окончания урока в случае если параллельно заполнялся лог
# 3:10-3:14
#
# 5) Что такое интерпритатор?
# Программа которая читает и запускает записанный пользователем код
# 2:44-2:51
#
# 6) Где можно выбрать интерпритатор?
# При запуске ячейки в ноутбуке предоставляется возможность
# выбора интерпретатора в поле для ввода
#
# в верхней части VSCODE далее select another kernel -> python environments -> ...\anaconda\...
#
# Либо по кнопке справа от ячейки в ноутбуке
# 2:51-3:06
#
# 7) Что такое модуль?
# Файл с расширением .py или .ipynb
# 8:47-8:51
#
# 8) Как создать и отправить коммит?
# После изменения файлов эти изменения отобразятся в github desktop, записываем summary и
# description для этого коммита и жмем Commit to main -> push origin
# 3:25-3:40
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Коммит точно отправлен если есть возможность взять на него ссылку с github,
# а также он отобразиться во вкладке history на github desktop
# 3:46-4:00
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# pre-commit run --all-files
# 6:03-6:15
#
# 10.1) Напишите список линтеров которые используются
# для проверки кода и дайте их краткую характеристику.
#
# pylint - линтер который проверяет код на синтаксические и другие ошибки
# black - позволяет писать код согласно стандарту pep8, соблюдая все отступы,
# пробелы и т.д. Сам переформатирует отступы, пробелы автоматически по стандарту PEP8
# mypy - позволяет проверять аннотацию типов (псевдостатическая типизация)
# из курса на степике
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# После запуска команды "pre-commit run --all-files" в терминале будут отображаться линтеры и
# описание результата их работы, в том случае если результат работы неуспех -
# ниже показывается имя файла в котором произошла ошибка,
# номер ячейки, а также краткое описание ошибки
# 6:15-6:50
#
# 12) Линтер Pylint видит markdown?
# Нет, из-за этого случаются расхождения в номерах ячеек в vscode и терминале
# 7:05-7:12
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Линтер не видит markdown
# Если ошибка в ячейке после markdown, то линтер укажет на ошибку в ячейке
# (номер ячейки в vscode - количество ячеек markdown до нее)
# 7:00-7:30
#
# 14) Где посмотреть номер ячейки в vscode?
# Внизу справа в окне vscode, "cell (сколько-то) of (сколько-то)"
# 6:41-6:53
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Файлы ipynb отправляются на гитхаб в формате JSON
# 3:19-3:25 из видео
#
# JSON, это стандартный текстовый формат для представления структурированных данных,
# основанный на синтаксисе объектов JavaScript.
# Так веб-приложения и не только, обмениваются данными, в таком формате.
# из курса на степике
#
# 16) Где посмотреть в какой ячейке ошибка?
# В информации после прогона линтеров, будет указано - файл:номер ячейки:код ошибки:краткое описание
# 6:31-6:50
#
# 17) Как запустить терминал?
# Кнопка "terminal" в верхней панели VSCODE,
# нажимаем на нее и далее "new terminal", либо сочетание ctrl+shift+'
# 5:55-6:00
#
# 18) Что такое линтер?
# Программа которая проверяет файл на корректность, насколько код соответствует стандартам
# 6:06-6:20
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# https://pylint.pycqa.org/en/latest/index.html
# 8:15-8:50
#
# 20) Секция pydocstyle в большинстве случаев
# автоматический закрывается после исправления ошибок в каком линтере?
#
# Секция pydocstyle автоматически закрывается когда закрыты ошибки по pylint
# 10:05-10:20
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Одно или несколько предложений, объясняющие суть этого модуля, должна быть
# точка в конце предложений(я), а то будет ругаться pydocstyle. Писать в тройных кавычках
# 9:23-9:45
#
# 21) С какой git команды начинается утро программиста?
#   git pull
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в
# кошке, как по другому открыть vs code из кошки?
# Главный репозиторий -> ПКМ -> open in vscode
# 14:10-14:21
#
# 23) Что такое stash?
#   Функция stash позволяет спрятать изменения пользователя в буфер обмена,
#   и принять изменения из репозитория на github
#
# 23.1) Как сохранить стэш?
#   git командa:
#     git stash
#   Кнопка в "кошке":
#     "Stash changes and continue"
#
# 23.2) Как восстановить стэш?:
#   В VScode:
#     Кнопка stashed changes либо же view stash -> restore
#   git команда?:
#     git stash save "NUMBER_STASH"
#     git stash apply "NUMBER_STASH"
#     Команда для терминала может сохранить стэш под определенным именем и
#     восстановить стэш в любой момент, а при нажатии discard в "кошке" данные удаляться безвозвратно
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#
# Как я понял, стэш позволяет отложить временные изменения в хранилище,
# изменения которые еще не готовы быть закоммиченными
# В то время как коммит это постоянное сохранение изменений в историю
# репозитория, это создание точки к которой может понадобиться вернуться после
# Формально можно сказать что для черновых изменений которые не
# готовы для публикации подходит стэш, а для готовых и протестированных - коммит
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда:
#     git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда:
#     git stash pop [] - применяет стэш и удаляет его из списка
#     сохраненных стэшэй, думаю можно засчитать за команду для удаления
#
#     git stash drop [] - позволяет удалить конкретный элемента из списка сохраненных стэшэй не трогая остальные
#
#     git stash clear - очищает список сохраненных стэшэй, полное удаление
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# Необходимость сделать pull при неготовых для коммита изменениях в файле
# Возможно какие-то эксперименты, в которых пользователь не уверен, но хочет из сохранить
# Проверка кода на ошибки, как вариант, допустим спрятать часть кода в стэш и затем запустить линтеры
#
# 24) Где посмотреть что есть конфликт в файлах?
# В "кошке" вылезет ошибка
# 24.1) Когда он появляется?
# Когда мы принимаем изменения из удаленного репозитория и эти изменения
# содержатся в файлах измененных пользователем, изменение на изменение накладывается в общем
#
# 25) Как решить конфликт в файлах?
# Гит не понимает какие изменения нужно оставить, нужно выбрать какое
# изменение оставить, с локального или удаленного репозитория, пути решения в п.28
#
# 26) Напишите правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения
# 16:30-16:39
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Да, потому что в случае если мы "спрячем" наши изменения - файл вернется
# к исходному состоянию и можно будет без проблем принять pull из удаленного репозитория
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# В случае изменений в разных частях кода - гит применит изменения из стэша без проблем
#
# При изменении одинаковых строк будет предложено решить конфликт вручную
#
# (В этом случае стэш не удалится, даже если вызывался
# через git stash pop и нужно будет удалить его вручную если нужно)
#
# Возможно так же частичное применение стэша если файл переименовали или удалили
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 4
# Accept current change - принятие изменений который пришли с гитхаба(чаще всего)
# Accept incoming change - принятие локальных изменений, вместо изменений с гитхаба(нежелательно)
# Accept both change - принять оба изменения
# Устранение конфликта вручную - resolve in merge editor -> complete merge
# 16:40-17:46
#
# 29) Что делает кнопка complete merge?
# Кнопка принимает изменения выполненные выбранным способом решения конфликта
# 17:36-17:50
#
# 30) В какой чат нужно писать если остались вопросы?
# Чат "HELP ME" в тг
# 18:30-18:39
#
# 31) Что такое FORK? Зачем его делают?
# FORK позволяет скопировать репозиторий и сделать его личным
# 18:58-19:15
# Его также можно рассматривать как внешнюю ветку для текущего репозитория
# из курса на степике
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Из github desktop заходим в главный репозиторий, нажимаем ПКМ на "add" ->
# clone repository ->
# выбираем репозиторий из списка ->
# clone
# 19:32-20:00
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# С вероятностью 90% эти ошибки решены преподавателем и другими студентами
# 12:48-13:00
#
# 34) Как создать файл в vs code?
# ПКМ в поле Explorer -> new file либо же по кнопке "new file" при наведении на корневую папку проекта
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Нет, файл лога заполняется единожды при начале обучения
#
# ==================
#
# Дополнительные вопросы:
# 1) Какая команда конвертирует файл в py из ipynb?
# "jupytext --to py *.ipynb", предварительно "pip install jupytext"
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip?
# Какой лучше использовать для дата сайнс?
#
# Пакетный менеджер — это инструмент для установки,
# обновления и управления библиотеками и зависимостями в проекте.
#
# Чаще в уроках я пользуюсь pip
#
# Для Data Science лучше использовать conda — он управляет Python-пакетами и системными зависимостями.
# Поддерживает изолированные окружения и хорошо работает с научными библиотеками типа numpy, pandas.
#
# 3) Почему расширение py лучше чем ipynb?
# .py легче запускать, версионировать в Git, интегрировать в системы.
# Меньше накладных расходов, чище код, лучше поддержка IDE и линтеров.
# .ipynb удобен для исследований и визуализаций — .py для финального кода.
#
# 4) Что такое pep8?
# pep8 - официальное руководство по стилю написания кода Python
#
# 4.1) линтеры проверяют на соблюдение pep8?
# Да, например flake8 или pylint проверяют код на соответствие рекомендациям pep8
#
# 4.2) Какая нотация используется для создания переменных?
# нотация snake_case - слова через нижнее подчёркивание, всё в нижнем регистре(например melon_count)
#
# Вместе с тем
#
# 1. Имена классов необходимо записывать в схеме Pascal.
# 2. Имена констант следует записывать в верхнем змеином регистре.
# 3. Имена функций, методов и переменных записывают в нижнем змеином регистре.
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Да, согласно pep8 это допустимо
#
# 4.4) Зачем и где мы используем андерскор _
# Временная переменная, к которой не нужно будет возвращаться
# Результат последнего исполнения операции
# Приватные атрибуты классов всегда начинают с символа подчеркивания _var
#
# 4.5) По PEP8 допустима переменная в одну букву?
#
# Допустима, но не рекомендована
# Допустима в случаях:
# - Имя i часто используется с переменными циклов for, перебирающих диапазоны чисел или индексов списка
# - j и k (следующие за i в алфавитном порядке) используются с вложенными циклами
# - использование x и y для декартовых координат

# quiz2
#
# 1. Как включить автосохранение данных в VSCODE?
# В окне VSCODE, File -> Auto Save
# 0:09-0-14
#
# 2. Как настроить перенос строки?
# В окне VSCODE, File -> Preferences -> Settings -> пишем "wrap" -> wordWrapColumn ->
# 79 -> сохраняемся -> нажимаем Enter или просто закрываем окно
# 0:14-0:40
#
# 3. Сколько символов по pep8 разрешено на строке?
# 79 символов
# 0:31-0:34
# Для строк с комментариями и документацией — 72 символа
#
# 4. Какие способы переноса строк показаны в видео:
# -Использование круглых скобок для продолжения строки(4.4)
#     Тем самым улучшается удобочитаемость кода
#     2:25-2:45
# -Сложение строк с помощью +(4.6)
#     Части строк записываются в отдельные переменные и
#     затем складываются в переменной для вывода
#     2:52-4:28
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# В нижней панели VScode слева от вкладки terminal
# 4:40-6:14
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Клиент гита находится в vscode в панели слева(три кружочка).
#
# Во вкладке source control отображается список изменений, мы можем дать
# название коммиту и выбрав в боковой панели кнопки "Commit" commit and push, отправить коммит
#
# Домашка принимается нажатием в секции source control repositories трех точек и далее pull
# 6:23-6:48
#
# 7. Что такое GIT? он локальный?
# В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
#
# GIT - система контроля версий
# GIT позволяет работать как локально, так и с удаленными репозиториями
# В нем можно как посмотреть историю изменений файлов так и вернуться к прошлым изменениям, коммитам
# В нижней панели vscode есть панель gitlens в ней можно удобно смотреть историю коммитов
# 6:53-7:32
#
# 8. Как вставить картинку в маркдаун?
# Сохранить картинку в буфер обмена и нажать ctrl+v, нажав предварительно на ячейку
# 7:59-8:04
#
# 9. Где посмотреть длину строки в vs code?
# 10. Как поменять тип ячейки с питона на маркдаун?
# Кнопка в нижнем правом углу ячейки, кликнуть на python или markdown,
# в зависимости от того какого типа ячейка сейчас
# 7:42-7:50
#
# 11. Как запустить сразу все ячейки в юпитере?
# Кнопка "run all" в верхней панели vscode под окном с названием файла
# 8:27-8:34
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Чтобы регулировать размер картинки нужно вставить ее в тэг <img href size>
# HTML для этого придется подучить
# 8:08-8:26
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# shift + enter
# 8:39-8:51
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Нажимаем на три точки находясь в ячейке и выбираем Show cell lines ИЛИ хоткей "L"
# 9:00-9:11
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# To Go позволяет нажатием на нее увидеть в какой ячейке произошла ошибка, она отвалилась
# При нажатии на Go To автоматически перебросит на ячейку с ошибкой
# 9:25-10:00
#
# 16. Как очистить вывод ячеек которые уже запущены?
# Кнопка "Clear all outputs", в той же менюшке что и "Run all"
# 10:46-10:54
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Работать одновременно в нескольких файлах в VSCODE можно с помощью команды Split editor right (ctrl+\\)
# Split позволяет разделить рабочую область на несколько частей, делить можно вертикально или горизонтально
# 10:55-11:10
#
# 18. Каким сочетанием убирается левый сайдбар?
# Ctrl + b либо нажатием на активное окно
# 11:20-11:27
#
# 19. Кнопка два листочка это наши локальные файлы?
# Да, нажав на эту вкладку нас перекинет в локальные файлы
# 11:33-11:36
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# DICT - NameError: name "Dict is not defined
# 10:17-10:22
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и
# https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# >**Да**
#
# 22. Что такое валидация?
# Валидация — это проверка данных на корректность и соответствие заданным правилам
# 9:48-10:00
#
# 23. Что такое трассировка ошибки?
# Трассировка - визуализация ошибки(Traceback), показывает где и в каком порядке возникли ошибки в программе
# 10:00-10:12
#
# 24. Что значит отвалился интерпритатор?
# Значит интерпритатор аварийно завершил работу или перестал отвечать, обычно из-за ошибки в коде
# 9:55-10:00
