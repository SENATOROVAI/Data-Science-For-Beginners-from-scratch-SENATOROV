"""intro."""

# +
# quiz1
# -

# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# - Руслан тегает ученика и пишет 'прими пулл' (или пишет, что надо сделать) - таймкод 0:12
# 2) Как принять домашку?
# - Зайти в GitHub Desktop, нажать Fetch origin, зайти в History и посмотреть последний коммит, открыть репозиторий в vscode/cursor - таймкод 0:20
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# - Кнопка history содержит историю коммитов. При нажатии на коммит появляются функции Reset to commit, Checkout commit, Reorder commit, Revert changes in commit, Create branch from commit, Create tag, Cherry-pick commit, Copy SHA, Copy tag, View on GitHub
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# - Ссылка в github после нажатия на 'view on github', отправляем в чат ТГ HomeWork
# 4) Что такое файл лога?
# - Файл с историей выполнения заданий, необходимо заполнять его проделанной работой после каждого урока
#
# 4.1) Когда нужно его пушить?
# - После выполнения ДЗ
# 5) Что такое интерпритатор?
# - Программа, читающая и выполняющая код
# 6) Где можно выбрать интерпритатор?
# - В окне Select Interpreter (можно открыть его, например, кликнув по текущему окружению в правом нижнем углу vscode)
# 7) Что такое модуль?
# - файл, содержащий определения функций, классов, переменных и т.д.
# 8) Как создать и отправить коммит?
# - в VScode это: Source control -> добавить changes в Stage -> написать commit message -> нажать Commit -> нажать Push
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# - нажать view in github
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# - pre-commit run --all-files
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# - Pylint - всесторонний статический анализ кода, проверяет стиль, ошибки, качество
# - Pydocstyle - проверяет соответствие докстринг стандартам (PEP 257)
# - Flake8 - комбайн: проверяет стиль (PEP 8), сложность кода и логические ошибки
# - Mypy - статическая проверка типов (type checking) для Python
# - Black - автоматический форматтер кода, применяет единый стиль
# 11) Как узнать какой именно линтер не прошёл проверку?
# - В выводе этот линтер будет помечен как Failed
# 12) Линтер Pylint видит markdown?
# - Нет
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# - Может, т.к. линтер не считает markdown за ячейку
# 14) Где посмотреть номер ячейки в vscode?
# - в правом нижнем углу 'Cell ...'
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# - Файл .ipynb — это JSON-файл с особой структурой. Jupyter Notebook сохраняет всё содержимое (код, вывод, метаданные) в виде стандартного текстового JSON-формата. GitHub просто отображает этот JSON в удобном для чтения виде.
# 16) Где посмотреть в какой ячейке ошибка?
# - либо в терминале после pre-commit, либо ошибка вывалится под самой ячейкой
# 17) Как запустить терминал?
# - ctrl + ` или Terminal -> New Terminal
# 18) Что такое линтер?
# - анализатор кода
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# - https://pylint.readthedocs.io/en/stable/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# - Pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# - Да, должно вкратце отражать суть модуля
# 21) С какой  git команды начинается утро программиста?
# - git pull
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# - пкм по current repository -> open in vscode
# 23) Что такое stash?
#   - локальное временное хранилище незакомиченных изменений. Часто требуется для избежания
#
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash save "name"
#   Кнопка в vs code:
#   - Source control -> Stashes -> Create Stash -> Enter
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#       - GitHub -> Stashed Changes -> Restore
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   - Стэш - чаще всего используется, когда надо временно локально сохранить недоделанную работу. Коммит - это уже подготовка к передаче кода вовне.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash clear   - удаляет все созданные
#   - git stash drop stash@{n}   - удаляет конкретные
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# - Например, когда нужно срочно переключиться в другую ветку, но текущий код ещё не готов для коммита. Или когда происходит конфликт внесённых изменений. Или нужно обновить свою ветку, но нужно сохранит изменения, ещё не готовые к коммиту.
# 24) Где посмотреть что есть конфликт в файлах?
# - Githud Desktop сообщит об этом при пулле изменений с сервера
#
# 24.1) Когда он появляется?
# - Когда разные разработчики вносят изменения в один и тот же файл и пытаются одновременно сохранить их
# 25) Как решить конфликт в файлах?
# - Stash changes and continue -> выбрать последний коммит в истории и выбрать, чьи изменения в итоге оставить (внешние, локальные или оба)
# 26) Напишите правильное утверждение
# - Зелёное то что пришло с гитхаба и синее локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# - Да, можно
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# - может произойти как автоматическое слияние (идеальный случай), так и конфликт, если правки в одних и тех же местах
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# - 3: accept current change, accept incoming change, accept both changes
# 29) Что делает кнопка complete merge?
# - Завершение слияния
# 30) В какой чат нужно писать если остались вопросы?
# - HELP ME
# 31) Что такое FORK? Зачем его делают?
# - Чтобы сделать независимую копию репозитория
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# - Например, с помощью GitHub Desktop: Code -> Open with GitHub Desktop
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# - С высокой вероятностью эти ошибки уже прорабатывались студентами ранее
# 34) Как создать файл в vs code?
# - нажать New file в левом верхнем углу
# 35) Файл лога нужно заполнять в конце каждого урока?
# - да
#
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# - jupyter nbconvert --to script <имя_файла.ipynb>
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# - Пакетный менеджер - программа-помощник для установки, обновления, удаления и отслеживания зависимостей в пакетах
# - Использую pip, conda, poetry
# - Для Data Science лучше использовать conda
#
# 3) Почему расширение py лучше чем ipynb?
# - Для ipynb необходима интерактивная среда
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# - Рекомендации по написанию/оформлению кода
#
# 4.1) линтеры проверяют на соблюдение pep8?
# - Да
#
# 4.2) Какая нотация используется для создания переменных?
#
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# - snake_case
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# - Да
#
# 4.4) Зачем и где мы используем андерскор _
# - Для игнорирования значений при распаковке, в именах переменных (leading, trailing, dunder, magic method), для улучшения читаемости чисел (1_000_000)
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# - PEP 8 не запрещает однобуквенные переменные, но даёт конкретные рекомендации, где их уместно использовать, чтобы не ухудшать читаемость кода (например, в циклах)

# +
# quiz2
# -

# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# - File -> Auto Save
# 2. Как настроить перенос строки?
# - Preferences -> Settings -> wrap -> Word Wrap = on -> Word Wrap Column = 79
# 3. Сколько символов по pep8 разрешено на строке?
# - 79
# 4. Какие способы переноса строк показаны в видео:
# - Перенос с помощью разбиения строки по переменным, конкатенации,
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
# - Обратный слэш склеивает следующую строку с предыдущей
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#  - Позволяет писать многострочный текст с сохранением переносов
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
# - Метод join позволяет конкатенировать элементы массива
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
# - Перенос строк внутри скобок позволяет их склеивать аналогично \
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
# - f-строки позволяют создавать "шаблоны" с переменными
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
# - Обычная конкатенация
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# - Слева от терминала
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# - В левом вертикальном меню кнопка Source Control, для отправки коммита надо ввести имя коммита и нажать commit & push. Для принятия домашки нужно сделать pull
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# - Git - система контроля версий, в первую очередь Git локальный. Да, с его помощью можно посмотреть всю историю изменений и и вернуться к любому коммиту
# 8. Как вставить картинку в маркдаун?
# - сделать скриншот -> ctrl + v или ссылкой с помощью тега <img>
# 9. Где посмотреть длину строки в vs code?
# - В файле .py длина строки выводится в нижней строке информации
# 10. Как поменять тип ячейки с питона на маркдаун?
# - Выйти из режима редактирования и нажать M или нажать три точки над ячейкой -> Change Cell to Markdown
# 11. Как запустить сразу все ячейки в юпитере?
# - Run All
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# - Да, с помощью тега <img>, знать весь HTML для этого необязательно, но конкретно с этим тегом надо разобраться
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# - Shift + Enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# - Show Cell Line Number или просто L
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# - Go To показывает, в какой ячейке ошибка, чтобы перейти к ней, надо нажать на Go To
# 16. Как очистить вывод ячеек которые уже запущены?
# - Clear All Outputs
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# - нажать Split Editor, это позволяет одновременно открыть в разных окнах несколько файлов
# 18. Каким сочетанием убирается левый сайдбар?
# - ctrl + B
# 19. Кнопка два листочка это наши локальные файлы?
# - Да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# - name 'Dict' is not defined
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# - Да
# 22. Что такое валидация?
# - Проверка данных на соответствие определённым критериям
# 23. Что такое трассировка ошибки?
# - Подробные сведения об ошибке, которые Python выводит при её возникновении
# 24. Что значит отвалился интерпритатор?
# - "Сломался" из-за ошибок во время выполнения программы
#
