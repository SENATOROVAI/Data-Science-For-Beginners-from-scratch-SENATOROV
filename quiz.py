"""АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ и НАСТРОЙКА VSCODE."""

# Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# - смс в телеге с тэгом
#
# 2) Как принять домашку?
# - кошечка - fetch origin - open in vscode - создание нового файла (lessonX.ipynb)
# *- выполнение - заполняем log.ipynb - далее пункт 8
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# - кнопка history -> для просмотра последнего коммита (версии)
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# - правая кнопка - view in github - копия ссылки выведенной страницы - отправка в телегу (Homework - "коммит отдал и ссылка")
#
# 4) Что такое файл лога?
# - по датам заполнять что изучили
#
# 4.1) Когда нужно его пушить?
# - при выполнении поставленного дз
#
# 5) Что такое интерпритатор?
# - программа которая запускает и читает код
#
# 6) Где можно выбрать интерпритатор?
# - запуск - Python Env-t - anaconda
#
# 7) Что такое модуль?
# задание
#
# 8) Как создать и отправить коммит?
# - после выполнения в кошке есть отображение изменений - даем название коммиту - нажимаем commit to main - push origin
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# - правая кнопка - view in github
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# pre-commit run --all-files
#
# - в кошке коммит не отправляется - вывод error
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Документация по линтерам:
# Pylint https://pylint.pycqa.org
# Pydocstyle https://docs.astral.sh/ruff/rules/#pydocstyle-d
# Flake8 https://flake8.pycqa.org/en/latest/index.html
# Mypy https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html#variables
#
# 11) Как узнать какой именно линтер не прошёл проверку?
#   - в кошечке при выведении error прописан линтер, который Failed (также показывается файл, номер ячейки и ошибка)
#
#   - запуск терминал - ввод pre-commit run --all-files - красный(Failed) - пропись линтера
#
# важно понимать!!!
# Первые 3 команды - это команды однократной настройки. Выполните их один раз для проекта, чтобы инициализировать репозиторий, установить pre-commit и настроить хуки.
# Четвертая — это команда для ручной проверки всех файлов. Вы можете использовать её по мере необходимости, например, после изменения конфигурации или для первоначальной проверки всего проекта.
# git init
# pip install pre-commit
# pre-commit install
# pre-commit run --all-files
#
# 12) Линтер Pylint видит markdown?
# - нет
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# - отличаются в нумерации для линтера и vscode
# - линтер не считает markdown не считает за ячейку
#
# 14) Где посмотреть номер ячейки в vscode?
# - внизу справа cell
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# так интерпретируется формат в гитхаб
#
# 16) Где посмотреть в какой ячейке ошибка?
# увидеть в терминале после запуска команды pre-commit run --all-files
#
# 17) Как запустить терминал?
# 18) Что такое линтер?
# анализатор кода, который указывает на «подозрительные» участки программы и тем самым помогает программисту писать более качественный код.
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# одноименный
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# да
#
# 21) С какой  git команды начинается утро программиста?
# с команды git pull (или её более конкретных вариантов, например, git pull origin main).
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# - правой кнопкой на репозиторий - open in vs code
# (т.е. применяется когда сделали изменение в файле, но не отправили коммит)
#
# 23) Что такое stash?
#   Общее объяснение концепции.
# Git stash — это функция в Git, которая позволяет временно сохранять незавершённые изменения, не фиксируя их в репозитории
#
# стэш это буфер куда мы временно прячем файлы, чтобы принять pull
#
# ![image.png](attachment:image.png)
# git stash apply "NUMBER_STASH" - позволяет применить изменения из stash к текущему рабочему каталогу в Git
# stash@{0}: WIP on main: a1b2c3d Последний коммит
# git stash apply stash@{1} // Применить второй stash (stash@{1}) - нулевой самый верхний
#
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# git stash save "NAME_STASH" - сохранение изменения в рабочем каталоге с указанием имени
#
#   Кнопка в vs code:
# 1. Через меню Source Control (Система управления версиями):
# ⦁ Откройте вкладку Source Control (значок с тремя линиями и кружком, обычно слева).
# ⦁ В разделе "Stashes" (Скрытые изменения) нажмите на знак + (плюс) или выберите "Create Stash" (Создать скрытые изменения) из контекстного меню.
# ⦁ В появившемся поле ввода вы можете добавить описание для вашего stash (опционально).
# ⦁ Нажмите Enter, чтобы сохранить stash.
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#        в кошке Stashed Changes - Restore
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   стэш - наши локальные изменения, коммит - внешние (но вообще это версия)
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   отдельных:
#   git stash drop stash@{<n>}
#   всех
#   git stash clear
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#
#
# 24) Где посмотреть что есть конфликт в файлах?
# конфликт (изменения в 1 файле мной и другим человеком) в кошечке fetch origin - pull origin - stash changes and continue
#
# - в history нажимаю на последний коммит(сохраняю изменения другого и кидаю в буфер обмена свой) - в changes восстанавливаем наши локальные изменения, т.е. Stashed Changes - Restore
#
# git не понимает какие изменения сохранить (те, что с инета или наши), потому воскл.знак на файле
#
# - open in vscode - (зеленое - пришло с гитхаба, синее - наши) можно нажать accept current changes(вне)/accept incoming changes(наше)/accept both changes(оба), также можно отредачить самому (вырезать стрелки)
#
# 24.1) Когда он появляется?
# одновременные изменения в 1 файле мной и другим человеком
#
# 25) Как решить конфликт в файлах?
# - stash changes and continue - в history нажимаю на последний коммит(сохраняю изменения другого и кидаю в буфер обмена свой) - в changes восстанавливаем наши локальные изменения, т.е. Stashed Changes - Restore
#
# git не понимает какие изменения сохранить (те, что с инета или наши), потому воскл.знак на файле
#
# - open in vscode - (зеленое - пришло с гитхаба, синее - наши) можно нажать accept current changes(вне)/accept incoming changes(наше)/accept both changes(оба), также можно отредачить самому (вырезать стрелки)
#
# - accept current changes - complete merge (в кошке воскл.знак пропал - конфликта больше нет) - сохраняем коммит
#
# 26) Напишите правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# да
#
# 27.1) Что может произойти когда восстановите stash после принятия pull?
# появиться воскл.знак около файла - конфликт
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 4
# accept current changes(вне)/accept incoming changes(наше)/accept both changes(оба), также можно отредачить самому (вырезать стрелки)
#
# 29) Что делает кнопка complete merge?
# Завершить слияние
#
# 30) В какой чат нужно писать если остались вопросы?
# help me
#
# 31) Что такое FORK? Зачем его делают?
# скопировать репозиторий и сделать его личным и делаем с ним все что хотим
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# в кошке нажать на репозиторий - add - clone repository
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# 100
#
# 34) Как создать файл в vs code?
# нажать на +
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# да
#
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# 1. Откройте файл .ipynb в VS Code. Он будет отображаться как интерактивный ноутбук.
# 2. В правом верхнем углу редактора ноутбука есть кнопка "Export" (Экспорт) - три точки на уровне +код.. около Структура. Нажмите на нее.
# 3. Выберите "Export as Python Script" (Экспортировать как скрипт Python).
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Пакетный менеджер — это программа, которая автоматизирует процесс установки, обновления, настройки и удаления программных пакетов. Он упрощает управление зависимостями (библиотеками и другими программами, от которых зависит ваш проект) и обеспечивает согласованность в различных средах разработки.
#
# ⦁ pip: Стандартный пакетный менеджер для Python. Он отлично подходит для управления пакетами, размещенными на PyPI (Python Package Index), основном репозитории для пакетов Python. pip фокусируется исключительно на Python и не управляет зависимостями вне Python.
#
# ⦁ conda: Кроссплатформенный пакетный и менеджер сред. Он может управлять пакетами не только для Python, но и для других языков, таких как R, C++, Java и т.д. conda также управляет зависимостями вне Python, что особенно полезно для научных вычислений, где часто используются библиотеки, написанные на других языках (например, NumPy, который зависит от библиотек линейной алгебры, написанных на C).
#
# Для проектов Data Science conda часто предпочтительнее pip
#
# 3) Почему расширение py лучше чем ipynb?
# преимущества файлов с расширением .py перед файлами с расширением .ipynb:
#
#   - Меньше ошибок. Файлы с расширением .py легче отлаживать с помощью IDE, например VS Code, что упрощает поиск ошибок. Выполнение таких файлов начинается с чистого листа, в отличие от файлов с расширением .ipynb, где некоторые пропущенные переменные переносятся из предыдущего выполнения или удалённых ячеек. 1
#   - Лучшее использование общего сервера. После выполнения файлы с расширением .py освобождают ресурсы, например память GPU. В то время как в случае с файлами с расширением .ipynb может быть неудобно вручную освобождать ресурсы из блокнота Jupyter. 1
#   - Повышенная производительность. При работе с файлами с расширением .py можно использовать расширения для автоматического завершения и подсветки синтаксиса, что экономит время. 1
#   - Улучшение сотрудничества. Файлы с расширением .py не требуют времени на отображение на GitHub, в отличие от файлов с расширением .ipynb. Также в таких файлах легче увидеть изменения, сделанные другими пользователями. 1
# Повышенная модульность. В файлах с расширением .py легко реализуются вызовы функций и классов из других файлов.
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# Руководство по стилю кода Python. Он описывает, как форматировать ваш код, чтобы он был читабельным и согласованным. Это помогает сделать код более понятным для других разработчиков (и для вас самих в будущем).
#
# 4.1) линтеры проверяют на соблюдение pep8?
# Да, линтеры (например, pylint, flake8, mypy) проверяют код на соответствие PEP 8 (и другим стандартам). Они помогают выявлять стилистические ошибки и потенциальные проблемы.
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Да, переменная может состоять из одного символа подчеркивания (_). Это имеет специальное значение – обычно _ используется для обозначения переменной, значение которой не используется. (как в цикл for)
#
# 4.4) Зачем и где мы используем андерскор _
# Андерскор _ используется в нескольких случаях:
#
# ⦁ Для игнорирования значения: Например, в цикле for _ in range(5): print("Hello") переменная _ не используется, а просто служит счетчиком.
# ⦁ Для обозначения "внутреннего" использования: Один ведущий подчеркивание перед именем переменной (например, _internal_variable) указывает, что эта переменная предназначена для внутреннего использования в модуле и не должна быть импортирована напрямую из других модулей.
# ⦁ Для локализации: Два ведущих подчеркивания (например, __private_variable) запускают механизм "name mangling" (искажение имен), который делает переменную более "приватной" внутри класса.
# ⦁ После имени переменной: Иногда используется для избежания конфликтов с зарезервированными ключевыми словами Python (например, class_).
# ⦁ В интерпретаторе: В интерактивном интерпретаторе Python, _ хранит результат последнего выполненного выражения.
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# По PEP 8, переменные в одну букву допустимы в ограниченных контекстах, таких как счетчики циклов или математические формулы, где их значение очевидно. В остальных случаях рекомендуется использовать более описательные имена переменных для повышения читабельности кода.
#

# Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# 2. Как настроить перенос строки?
# save - preferences - settings - печатаем wrap - настраиваем wordWrapColumn - 79
#
# 3. Сколько символов по pep8 разрешено на строке?
# 79
#
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# в терминале
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# ***тайм код 6:21
# система управления версиями (ветка слева)
# commits (изменения)
# отправка коммита - source control - даем название коммиту - выбираем commit & push
# принятие домашки - три точки на уровне нужного репозитория - pull
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Git — это распределенная система контроля версий. Что это значит?
#
# ⦁ Система контроля версий: Git отслеживает изменения в ваших файлах (например, коде, документах, изображениях) с течением времени, позволяя вам вернуться к любой предыдущей версии. Это как "машина времени" для ваших проектов.
# ⦁ Распределенная: Каждый разработчик, работающий с проектом, имеет полную копию всей истории изменений на своем локальном компьютере. Это отличает Git от централизованных систем, где вся история хранится на одном сервере.
#
# Git работает с двумя типами репозиториев:
#
# ⦁ Локальный репозиторий: Это копия истории проекта, хранящаяся на вашем компьютере. Все изменения сначала фиксируются (коммитятся) локально.
# ⦁ Удаленный репозиторий: Это репозиторий, хранящийся на сервере (например, GitHub, GitLab, Bitbucket). Он служит центральной точкой для обмена изменениями между разработчиками.
#
# Да, Git позволяет просматривать историю изменений файлов и возвращаться к любому предыдущему коммиту. Каждый коммит представляет собой "снимок" состояния проекта на определенный момент времени.
#
# GITLENS - коммиты в визуале
#
# 8. Как вставить картинку в маркдаун?
# 9. Где посмотреть длину строки в vs code?
# закинуть строчку в файл .py - снизу будет видно
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# 11. Как запустить сразу все ячейки в юпитере?
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# да
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# ***тайм код 8:42
# Shift+enter - запуск и сместиться на сл.ячейку
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# три точки на ячейки и Cell line numbers
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# когда полностью запустила код и есть ошибка. Go to это сразу переход на ошибочную ячейку
#
# 16. Как очистить вывод ячеек которые уже запущены?
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# ![image.png](attachment:image.png)
# дублирование экрана
#
# 18. Каким сочетанием убирается левый сайдбар?
# ctrl+B
#
# 19. Кнопка два листочка это наши локальные файлы?
# да
# это еще и левый сайдбар
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек: DICT или LIST?
# трассировка это NameError
# DICT
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# фичи для Markdown
#
# 22. Что такое валидация?
# идеальный код
# Проверка данных на корректность и соответствие заданным правилам.
#
# 23. Что такое трассировка ошибки?
# тестирование
# и выдача визуала ошибки
#
# 24. Что значит отвалился интерпритатор?
# кож не продолжает работать
#
#
# Отвечаете на вопросы в вашем редакторе кода.
#
