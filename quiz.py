#

"""Ответы на вопросы."""

# # quiz 1
#
# **Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШНЕЙ РАБОТЫ):**
#
# **(По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то time-code из видео не надо указывать и т.д.**
#
# **1. Как понять, что домашка пришла?**
#
# 0:01 В chat HW видим ник и прими pull
#
# **2. Как принять домашку?**
#
# 0:20 заходим в github desktop, нажимаем fetch origin
#
# **3. Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?**
#
#  - 0:25 посмотрели историю, commit. правая кнопка открывает функции: Отменить коммит...
#  - Сбросить до commit...
#  - Выполнить checkout по commit
#  - Переместить коммит
#  - Отменить изменения в commit
#  - Создать ветку из commit
#  - Создать тег...
#  - Выбрать коммит (Cherry-pick)
#  - Скопировать SHA
#  - Скопировать тег
#  - Просмотреть на GitHub
#
# **3.1. Где брать ссылку на коммит? куда её отправлять?**
#
# 3:47, 13:08 смотрим в history view in github и забираем ссылку на коммит и отправляем в chat HW со словами "коммит отдал"
#
# **4. Что такое файл лога?**
#
# 1:06 заполнять его нужно в конце каждого урока, в нем дата урока, содержание, что изучали
#
# **4.1. Когда нужно его пушить?** вместе со всеми файлами
#
# **5. Что такое интерпретатор?** 2:48 программа, читающая и запускающая код
#
# **6. Где можно выбрать интерпретатор?** 3:04 вверху в "поиске" либо справа на панели vscode
#
# **7. Что такое модуль?** 8:01 9:47 просто файл например .ipynb
#
# Модуль линтера — это инструмент для статического анализа исходного кода, который помогает находить ошибки, уязвимости, а также нарушения стандартов кодирования и стиля, улучшая тем самым качество, читаемость и поддерживаемость кода без его выполнения
#
# **8. Как создать и отправить коммит?**
#
# 3:28 пишем в github desktop название commit, нажимаем "commit to main" и делаем push origin
#
# **9. Как посмотреть что коммит точно отправлен и находится в github?**
#
# 3:47 смотрим в history view in github и забираем ссылку на коммит
#
# **10. Какая команда показывает что код не прошёл проверки на ошибки?**
#
# 4:50  после нажатия "commit to main" коммит может не пройти, если не прошел линтеры. появится окошко error об этой информации.
#
# **10.1. Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.**
#
#  - JupyterText автоматически синхронизирует Jupyter-ноутбуки с их текстовыми версиями в формате py:light, обеспечивая удобное управление версиями и совместимость с Git.
#  - Doc formatter приводит doc strings к единому стилю Google, автоматически форматируя описания функций и модулей для лучшей читаемости и соответствия стандартам.
#  - Black - formatter Python-кода, который без конфигурации выравнивает отступы, переносы и операторы, устраняя споры о стиле в команде.
# - nbQA позволяет применять такие инструменты, как Black, i sort, py upgrade и flake8, напрямую к Jupyter-ноутбукам, сохраняя при этом структуру ячеек и метаданные.
# - PyUpgrade автоматически обновляет синтаксис Python до более современных версий (например, f-строки, True/False вместо 1/0), поддерживая целевые версии через флаг --py39-plus.
# - i sort упорядочивает импорты в соответствии с профилем Black, разделяя стандартные, сторонние и локальные библиотеки и вынося импорты в нужные блоки.
# - blacken-docs форматирует примеры кода внутри Markdown-документов и doc strings, делая документацию согласованной с основным кодом проекта.
# - code spell сканирует исходный код и документацию на опечатки в словах, игнорируя бинарные файлы и технические термины, повышая качество текстовой составляющей проекта.
# - Flake8 проверяет код на соответствие PEP 8, выявляет синтаксические ошибки, дублирование импортов и неиспользуемые переменные, расширяясь плагинами для анализа имен и стиля.
# - My py выполняет строгую статическую типизацию Python-кода, выявляя несоответствия типов, отсутствующие аннотации и потенциальные ошибки до запуска программы.
# - Py lint проводит глубокий анализ кода на предмет стиля, потенциальных багов, сложности и нарушений архитектурных принципов, предлагая детальные рекомендации по улучшению качества.
# - Py doc style проверяет doc strings на соответствие стандартам (PEP 257), требуя наличия описаний, правильного формата и полноты информации о параметрах и возвращаемых значениях.
#
# **11. Как узнать какой именно линтер не прошёл проверку?** из error, из терминала
#
# **12. Линтер Pylint видит markdown?** 7:05 нет
#
# **13. Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?**
#
# 7:04 расхождения из-за того что линтер не видит markdown. можно посмотреть ячейку по коду ошибки
#
# **14. Где посмотреть номер ячейки в vscode?** 7:36 внизу
#
# **15. В каком формате ipynb отправляется в github? причём здесь JSON?** 3:24 .ipynb — это просто JSON-файл с расширением .ipynb, который описывает структуру ноутбука.
#
# **16. Где посмотреть в какой ячейке ошибка?** в терминале
#
# **17. Как запустить терминал?** терминал -> new terminal pre-commit run --all-files
#
# **18. Что такое линтер?** программа, которая проверяет файл на корректность
#
# **19. В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?**  сайт pylint, в документации
#
# **20. Секция pydocstyle в большинстве случае автоматически закрывается после исправления ошибок в каком линтере?**
#
# 10:05 pylint. если использовать flake8 как основной линтер (что очень распространено в Python-проектах), он встроенно включает py doc style как один из своих плагинов.
#
# **21. Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?** да, в начале файла
#
# **22. С какой  git команды начинается утро программиста?** git pull
#
# **23. После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?**
#
# навести на репозиторий, нажать правой кнопкой open in vscode
#
# **24. Что такое stash?Общее объяснение концепции.** сохранение локальных изменений в буфер обмена, принятие изменений из интернета
#
# **24.1. Как сохранить stash?**
#
#  - git, команда (подсказка: https://t.me/c/1937296927/3602/19531): stash это буфер куда мы временно прячем файлы, чтобы принять pull
#
#  - git stash save "NAME_STASH"
#  - git stash apply "NUMBER_STASH"
#  - git stash - Сохраняет изменения, не отправленные в commit(из рабочей директории и индекса) в стеке stashes, оставляя чистую рабочую директорию.
#
#   Кнопка в vs code:
#
# **24.2. Как восстановить stash (подсказка: https://t.me/c/1937296927/3602/25747)?** stashed changed + view stash
#
# git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#
# кнопки со стешем, это буфер обмена, после принятия пула ее обязательно нажимать и восстанавливать тем самым файлы, потом нажимаем рестор
#
# **24.3 Различие между stash и commit. Когда лучше сохранить изменения в stash, а когда commit.**
#
# Если нужно срочно переключиться на другую ветку, но текущие изменения ещё не готовы к commit, то это стеш. commit готовые изменения, чтобы их пушить в ветку.
#
#
# **24.4. Как просмотреть список сохраненных stash? git команда (подсказка: https://t.me/c/1937296927/3602/19531):**
#
# - git stash list Показывает список всех сохранённых stash.
#
# - git stash apply Применяет последний (верхний) stash из стека, но не удаляет его из списка.
#
# **24.5. Как удалить stash? Команды для удаления отдельных stash или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):**
#
#  - git stash drop Удаляет stash из списка (без применения). Используется, если вы больше не нуждаетесь в определённом stash.
#  - git stash pop Применяет последний stash и удаляет его из списка. Это эквивалентно: git stash apply && git stash drop.
#  - git stash clear Удаляет все stash-записи из стека.
#
# **24.6 Практические примеры использования stash.Краткие сценарии, где stash помогает.**
#
# Если работают несколько человек в одном файле, то в stash можно отправить локальные изменения и принять изменения из интернета
#
# **25. Где посмотреть что есть конфликт в файлах? 24.1) Когда он появляется?**
#
# Restore восстанавливает локальные изменения и возникает конфликт, отмеченный восклицательным знаком. правая кнопка - open in vscode
#
# **26. Как решить конфликт в файлах?**
#
# accept current change и принимаем изменения или incoming change локальные или accept both changes или ручками. после нажать resolve in merge editor, потом complete merge
#
# **27. Напишите правильное утверждение Зелёное то что пришло с github и синее локальные изменения или синее то что пришло с github и зелёное это локальные изменения**
#
# правильно: Зелёное то что пришло с github и синее локальные изменения
#
# **28. Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в stash свои изменения?** да
#
# **28.1. Что может произойти когда stash восстановите после принятия pull?**  Принятие или конфликт
#
# **29. Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.** 3 способа, см п. 26
#
# **30. Что делает кнопка complete merge?** Она завершает процесс слияния (merge), когда уже вручную разрешены все конфликты
#
# **31. В какой чат нужно писать если остались вопросы?** чат HELP ME
#
# **32. Что такое FORK? Зачем его делают?** копия репозитория, он становится личным
#
# **33. Как скачать forked репозиторий на локальный компьютер?** clone repository, выбираем из списка
#
# **34. С какой вероятностью ваши ошибки были уже решены? и кто их решил?** 0.9 преподавателем и студентами
#
# **35. Как создать файл в vs code?** new_file и сохранить
#
# **36. Файл лога нужно заполнять в конце каждого урока?** да
#
# #### Дополнительные вопросы:
#
# **1. Какая команда конвертирует файл в py из ipynb? подсказка https://t.me/c/1937296927/1/26527**
#
# jupyter nb convert --to python имя_файла.ipynb
#
# **2. Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для data science?**
#
# Пакетный менеджер — это инструмент, который автоматизирует установку, обновление, удаление и управление библиотеками (пакетами) для языка программирования. Я пользуюсь и тем, и тем, но для data science лучше конда, так как там много пакетов, окружения итп
#
# **3. Почему расширение py лучше чем ipynb?**
#
# Файл .py лучше .ipynb, потому что он представляет собой чистый, легко читаемый и тестируемый код, совместимый с системами контроля версий (Git), CI/CD и профессиональными инструментами разработки. В отличие от ноутбука, .py не содержит лишних метаданных, выводов или ячеек — он надёжен для deploy, масштабирования и командной работы
#
# **4. Что такое pep8? подсказка:https://peps.python.org/pep-0008/**
#
# В этом документе описаны соглашения по кодированию для кода Python, входящего в стандартную библиотеку основного дистрибутива Python.
#
# **4.1. линтеры проверяют на соблюдение pep8?** да, Flake8
#
# **4.2. Какая нотация используется для создания переменных? ответ на 85-95 страницы https://t.me/c/1937296927/1/16676**
#
#  - Змеиный регистр (snake_case) разделяет слова символом подчеркивания, который напоминает ползущую между словами змею. В этом случае все буквы записываются в нижнем регистре, а константы часто записываются в верхнем змеином регистре (UPPER_SNAKE_CASE).
#  - Верблюжий регистр (camelCase) — слова записываются в нижнем регистре, но второе и следующие слова начинаются с заглавной. Эта схема в большинстве случаев подразумевает, что первое слово начинается с буквы нижнего регистра. Буквы верхнего регистра напоминают верблюжьи горбы.
#  - Схема Pascal (PascalCase) — названа так, потому что применяется в языке программирования Pascal; аналогична схеме верблюжьего регистра, но первое слово в ней тоже начинается с заглавной.
#
# **4.3. Может ли переменная состоять из одной буквы например underscore  "_" ?**
#
# может, например, в цикле
#
# **4.4. Зачем и где мы используем underscore _**
#
# В цикле, когда не нужно значение, как временная игнорируемая переменная
#
# **4.5. По PEP8 допустима переменная в одну букву? ответ на 85-95 страницы https://t.me/c/1937296927/1/16676**
#
# допустимо, но не рекомендуется

# # quiz 2
#
# **Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):**
#
# **(По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то time-codes из видео не надо указывать и т.д.**
#
# **1. Как включить autosave данных в VSCODE?** файл - autosave
#
# **2. Как настроить перенос строки?** references - settings - wrap - word wrap column 79 - save
#
# **3. Сколько символов по pep8 разрешено на строке?** 79
#
# **4. Какие способы переноса строк показаны в видео:
#
# **4.1. Строки с использованием обратного слэша (\)
#
# **string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)**
#
# **4.2 Тройные кавычки (''' или """)**
#
# **multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)** да
#
# **4.3 Создание списка строк и объединение с помощью join
#
# **strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)**
#
# **4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)**
#
# **4.5 Форматированные строки (f-строки) с использованием скобок**
# **letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b**
#
# **message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)**
#
# **4.6 Сложение строк с помощью +
#
# **string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)** да
#
# **5. Проверка на ошибки c помощью кнопки problems, где она находится?**
#
# 5:23 в problems нажимаем на ошибку синим и попадаем на сайт с ее описанием
#
# **6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?**
#
# слева переходим в git и там можем отдавать commit и кнопка pull принять домашку
#
# **7. Что такое GIT? это контроль версий  он локальный?** да
#
# **В нём можно посмотреть историю изменений файлов и вернуться к любому commit?** да в git lines
#
# **8. Как вставить картинку в markdown?** ctrl+v
#
# **9. Где посмотреть длину строки в vs code?** Внизу окна VS Code есть строка состояния. Там отображается номер строки и столбца: Ln 10, Col 5
#
#
# **10. Как поменять тип ячейки с питона на markdown?** вверху можно выбрать тип ячейки
#
# **11. Как запустить сразу все ячейки в юпитере?** run all
#
# **12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?** <img size>
#
# **13. Какой hot-key чтобы запустить ячейку с смещением на следующую?**  8:40 shift+enter
#
# **14. Как включить отображение номеров строк в юпитере(Cell line numbers)?** 11:34 ... + show sell line number
#
# **15. Что такое "Go To" чем это полезно?**
#
# 9:40 Как перейти сразу на ошибочную ячейку? go to перебрасывает на проблемную ячейку
#
# **16. Как очистить вывод ячеек которые уже запущены?** 10:45 clear all outputs
#
# **17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?**
#
# split editor делит экран или дублирует
#
# **18. Каким сочетанием убирается левый sidebar?** 11:22  ctrl+b или нажатие на активное окно
#
# **19. Кнопка два листочка это наши локальные файлы?** да
#
# **20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?** is not defined
#
# **21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?** да
#
# **22. Что такое валидация?** 9:50 ран олл код валидируется, то есть нормально написан
#
# **23. Что такое трассировка ошибки?** 11:34 name error
#
# **24. Что значит отвалился interpreter?** 10:25 до устранения ошибки он не валиден
#
# **Отвечаете на вопросы в вашем редакторе кода.**
#
