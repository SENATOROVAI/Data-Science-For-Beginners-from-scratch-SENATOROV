# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# "@yournickname прими пул" в чате homework
# 2) Как принять домашку?
# fetch origin в github desktop в соответствующем репозитории
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# history нужна, чтобы посмотреть историю коммитов. при нажатии правой кнопкой мыши на коммит можно создать новую ветку от этого коммита, посмотреть коммит на гитхабе
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# ссылку брать из github desktop (history-> View on GitHub->скопировать url). ссылку нужно отправить в чат homework
# 4) Что такое файл лога?
# файл лога используется для записи(логгирования) того, что было зделано/пройдено на уроке
# 4.1) Когда нужно его пушить?
# нужно пушить после каждого урока
# 5) Что такое интерпритатор?
# программано построчно выполняющаю код
# 6) Где можно выбрать интерпритатор?
# интерпретатор выбирается с помощью кнопки "Select kernel" где можно выбрать либо локальный интерпретатор, который у нас утановлен на пк(python environments...), либо интерпретатор, который находится на сервере(Existing Jupyter server...)
# 7) Что такое модуль?
# файл с кодом
# 8) Как создать и отправить коммит?
# выбираем нужный нам файл, смотрим чтобы был выбран только он, пишем название коммита и нажимаем commit to "yourbranchhere"
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# history правой кнопкой мыши View on GitHub
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# precommit run --all-files
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# pylint - проверяет синтаксис, стиль и структуру кода
# pydocstyle - автоматически форматирует docstrings
# black - автоматический форматировщик кода
# 11) Как узнать какой именно линтер не прошёл проверку?
# при возникновении ошибки название линтера пишется в терминале
# 12) Линтер Pylint видит markdown?
# нет
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# да, могут отличаться т.к. ячейки markdown не учитывются
# 14) Где посмотреть номер ячейки в vscode?
# справа внизу (Cell "k" of ""n")
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# ipynb на гитхаб отправляются в JSON формате
# 16) Где посмотреть в какой ячейке ошибка?
# номер ячейки указывается в терминале после команды precommit run --all-files
# 17) Как запустить терминал?
# Terminal->New Terminal
# 18) Что такое линтер?
# программа, которая проверяет код на соответсвие стандартам качества
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# pylint.pycqa.org
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# краткое описание содержимого модуля
# 21) С какой  git команды начинается утро программиста?
# Fetch origin
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# правая кнопка мышки на current directory -> open in vscode
# 23) Что такое stash?
#   Общее объяснение концепции.
#   stash позволяет сохранить внесённые локальные изменения в буфер обмена
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# git stash save "STASH_NAME"
#   Кнопка в vs code:
# stash changes and continue
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# github desktop->stashed changes->restore
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# git stash apply "STASH_NUMBER"
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   commit если задание полностью готово, stash если не готово, но нужно либо закончить выполнение, либо переключится на другую задачу
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# git stash list
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# git shash drop/git stash clear
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# перед слиянием веток
# если нужно переключиться на другую задачу, но фича/исправление не доделано
# 24) Где посмотреть что есть конфликт в файлах?
# в github desktop
# 24.1) Когда он появляется?
# когда на локальном устройстве возникают измененияв тех же файлах, что были обновлены на гитхабе
# 25) Как решить конфликт в файлах?
# выбрать один из трёх вариантов разрешения: Accept current change, accept incoming change, accept incoming change
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# да
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# может возниктуть конфликт
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 3, Accept current change, accept incoming change, accept incoming change
# 29) Что делает кнопка complete merge?
# выполняет завершение слияния
# 30) В какой чат нужно писать если остались вопросы?
# Help me
# 31) Что такое FORK? Зачем его делают?
# Копирование репозитория, для внесения изменений локально
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# github desktop->clone repository->выбор репозитория из списка
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# с 90% вероятностью, Русланом или другими студентами
# 34) Как создать файл в vs code?
# Explorer->new file
# 35) Файл лога нужно заполнять в конце каждого урока?
# да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# 3) Почему расширение py лучше чем ipynb?
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# 4.4) Зачем и где мы используем андерскор _
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# File->autosave
# 2. Как настроить перенос строки?
#  File->Preferences->Settings->wordWrap==wordWrapColumn
# 3. Сколько символов по pep8 разрешено на строке?
# 79(72 для документации)
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# в нижней части экрана, раздел problems
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# в панели слева. выбираем нужные файлы, вводим название коммита и нажимаем commit, затем push. с помощью pull
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# GIT - это система контроля версий, можно посмотреть историю изменений файлов, можно вернуться к любому коммиту
# 8. Как вставить картинку в маркдаун?
# "["image:png](attachment:image.png)"
# 9. Где посмотреть длину строки в vs code?
# копируем строку->создаём py файл->вставляем строку в файл
# 10. Как поменять тип ячейки с питона на маркдаун?
# нажать  на кнопку "python" и выбираем "markdown"
# 11. Как запустить сразу все ячейки в юпитере?
# Кнопка Run all в верхней части экрана
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# <img hre>, да
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# shift+enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# кликнуть правой кнопкой мыши на ячейку-> show cell line numbers
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# переход к ячейке на ячейку с ошибкой
# 16. Как очистить вывод ячеек которые уже запущены?
# Clear all outputs
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# нажать Split editor, разделяет рабочее пространство на две части, где в каждой части располагаются свои файлы
# 18. Каким сочетанием убирается левый сайдбар?
# ctrl+b
# 19. Кнопка два листочка это наши локальные файлы?
# да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# Name Error: name Dict is not defined
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# да
# 22. Что такое валидация?
# проверка работы всех ячеек на ошибки
# 23. Что такое трассировка ошибки?
# смотр ошибки
# 24. Что значит отвалился интерпритатор?
# произошла критическая ошибка в работе программы
#
# Отвечаете на вопросы в вашем редакторе кода.
#
