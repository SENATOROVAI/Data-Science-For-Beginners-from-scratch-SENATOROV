# %% [markdown]
# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#     
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# 	в чате homework - сообщение с ником принять пул
# 	0:09
# 2) Как принять домашку?
# 	в кошке fetch origin
# 	0:22
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# 	посмотреть какие были коммиты, может быть полезным
# 	0:34
# 3.1) Где брать ссылку на коммит? куда её отправлять? 
# 	в гитхаб for decstop в истории на наш коммит тыкнуть на view in github - там берем ссылку на коммит и направить в чат homework 
# 4) Что такое файл лога? 
# 	файл с проделаной работой - создается для написания проделаной работы
# 	1:12
# 4.1) Когда нужно его пушить?
# 	в конце каждого урока
# 	1:10
# 5) Что такое интерпритатор? 
# 	программа, которая читает и запускает код
# 	2:50
# 6) Где можно выбрать интерпритатор?
# 	сверху в окне, сбоку около иконки компютера
# 	2:46, 3:05
# 7) Что такое модуль? 
# 	файл .py или .ipynb
# 	8:53
# 8) Как создать и отправить коммит?
# 	в кошке прописать комменатрии к изменениям, нажать commit to main - push origin
# 	3:40
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# 	в истории будет видно что коммит ушел
# 	3:50
# 10) Какая команда показывает что код не прошёл проверки на ошибки? 
# 	pre-commit run
# 	6:04
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# 	check yaml — проверяет, что .yaml/.yml файлы валидны (нет синтаксических ошибок).
# 	debug statements (python) — ищет отладочные вставки в коде (print(), pdb.set_trace(), ipdb, breakpoint() и т.д.)
# 	python tests naming — проверяет, что тесты названы по правилам (например, начинаются с test_ и лежат в нужной папке)
# 	fix requirements.txt — следит за файлом зависимостей (requirements.txt), может проверять сортировку, дубликаты
# 	codespell — ищет орфографические ошибки в коде, комментариях и документации
# 	nbqa-flake8 — запускает flake8 внутри Jupyter Notebook’ов 
# 	flake8 — классический линтер: проверяет стиль (PEP8), простые ошибки, лишние импорты и т.п.
# 	nbqa-mypy — запускает mypy внутри .ipynb (проверка типов)
# 	nbqa-pylint— то же самое для pylint (более строгий линтер)
# 	pylint — линтер для Python, проверяет стиль, сложность функций, структуру кода (гораздо более строгий, чем flake8)
# 	nbqa-pydocstyle — проверяет docstring-и в Jupyter ноутбуках (наличие и оформление документации)
# 	6:30
# 11) Как узнать какой именно линтер не прошёл проверку?
# 	в терминале написано на каком линтере не прошла проверка 
# 	6:38
# 12) Линтер Pylint видит markdown?
# 	нет
# 	7:10
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# 	линтер пропускает нумерацию ячеек
# 	7:30
# 14) Где посмотреть номер ячейки в vscode?
# 	внизу справа
# 	7:37
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# 	в формате ipynb хранится все от текстов маркдаун, картинок с графиками до вывода ячеек и слуебной информации, чтобы это объеденить
#   используют JSON, чтобы GitHub и Jupyter могли единообразно отображать всё содержимое ноутбука
# 	3:22
# 16) Где посмотреть в какой ячейке ошибка?
# 	в окне ошибок - отчете линтера / pre-commit прописан файл и номер ячейки где ошибка
#   или можно найти место ошибки по коду - ctrl+f, если текст ошибки это имя переменной в линтере 
# 	7:50
# 17) Как запустить терминал?
# 	сверху кнопка new terminal
# 	5:57
# 18) Что такое линтер?
# 	программа которая проверяет файл на корректность
# 	6:17
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# 	pylint
# 	8:11
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# 	да, после исправления ошибок pylint
# 	10:08
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# 	содержимое модуля - о чем он
# 	9:28
# 21.1) С какой  git команды начинается утро программиста?
#  начиаем с git pull - принять обновления и подятнуть их в локольном гите
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# 	в кошке - на репозитории выбрать open in vs code
# 	14:25
# 23) Что такое stash?  
# 	сохранение в буфер изменений при одновременной работа в одном файле в интернете и на локальном компьютере
# 	15:25
#
#   Общее объяснение концепции.
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): 
# 	git stash save
#   Кнопка в vs code:
# 	Stash changes and continue
# 	15:23
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# 	git stash apply - просто последний стеш
# 	или git stash apply n - если конкретный
# git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# 	в changes по кнопке Stashed changes - Restore
# 	16:00
# 23.3) Различие между стэшем и коммитом.  
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# 	стэш для временного хранения файлов, применить когда хотим временно скрыть от других результат работы
# 	коммит для фиксации результатов работы - только для закрепления
# 23.4) Как просмотреть список сохраненных стэшей?  
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# 	git stash list
# 23.5) Как удалить стэш?  
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# 	удалить последний git stash drop
# 	удалить вообще все git stash clear
# 23.6) Практические примеры использования стэша.  
#   Краткие сценарии, где стэш помогает.
# 	 сохранить временные изменения в буфер обмена
# 	 15:33
# 24) Где посмотреть что есть конфликт в файлах? 
# 	в Stashed Changes
# 	15:48
# 24.1) Когда он появляется?
# 	при одновременной работе в одном и том же файле
# 	15:25
# 25) Как решить конфликт в файлах?
# 	зайти в vs code в файл с конфликтом и выбрать что-то одно: 
#   - Accept current changes (принять то, что пришло с GitHub)
#   - Accept incoming changes (принять локальные)
#   - Accept both (оба)
#   - либо вручную отредактировать и сохранить
#   После нажать Resolve/Complete merge и выполнить коммит и push
# 	16:20
# 26) Напишиие правильное утверждение
# 	Зелёное то что пришло с гитхаба и синее локальные изменения 
# 	16:30
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
# 	да, можно
# 	15:25
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# 	будет конфликт изменений
# 	16:14
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 	было четыре:
# 	- принять изменения из интернета
# 	- принять свом изменения
# 	- принять оба изменения
# 	- самому просто отредактировать все изменения
# 	17:10
# 29) Что делает кнопка complete merge?
# 	объединение изменений
# 	17:42
# 30) В какой чат нужно писать если остались вопросы?
# 	HELP ME
# 	18:34
# 31) Что такое FORK? Зачем его делают? 
# 	скопировать репозиторий и сделать его личным
# 	19:05
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# 	клонировать репозиторий на устрйоство
# 	19:38
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# 	с вероятностью 99% ошибки были решены либо учителем либо комъюнити
# 	12:50
# 34) Как создать файл в vs code?
# 	нажать на плиточку с листочком с плюсом
# 	0:52
# 35) Файл лога нужно заполнять в конце каждого урока?
# 	да
# 	1:10
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb? 
# подсказка https://t.me/c/1937296927/1/26527 
# 	jupyter nbconvert --to script notebook.ipynb
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# 	менеджер устанавливает готовые библиотеки, лучше conda
# 3) Почему расширение py лучше чем ipynb?
# 	.ру для ревью , остальное ipynb
# 4) Что такое pep8? 
# подсказка:https://peps.python.org/pep-0008/
# 	набор правил, как писать код так, чтобы он был **читаемым и единообразным**.
# 4.1) линтеры проверяют на соблюдение pep8?
# 	да проверяют
# 4.2) Какая нотация используется для создания переменных? 
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 	snake_case
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# 	Да. PEP8 разрешает короткие имена *в ограниченных случаях:
#
# 	- i, j, k — индексы в циклах.
# 	- x, y, z — координаты, математика.
#     - _ (одиночный андерскор) — спец. переменная, имеет несколько значений
# 4.4) Зачем и где мы используем андерскор _ 
# 	1. игнорируемая переменная
# 	2. последний результат в REPL
# 	3. 3. **Спец-соглашения в именах**:
# 	    - _var → внутренняя переменная (protected).
# 	    - var → name mangling в классах (private).
#         - _ как имя модуля → используется для локализации (gettext).
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 	в исключительных случаях - EP8 рекомендует читаемость важнее краткости.

# %% [markdown]
# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# 	File - autosave
# 	0:12
# 2. Как настроить перенос строки? 
# 	через wrap 
# 	0:24
# 3. Сколько символов по pep8 разрешено на строке?
# 	79
# 	0:31
# 4. Какие способы переноса строк показаны в видео:
# 	3:12
# 4.1 Строки с использованием обратного слэша (\)
# 	
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """) 
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
# 	
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
# 	4:30
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# 	Вкладка Problems
# 	4:52
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# 	клиент сбоку
# 	6:25
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# 	в gitlens просмортеть
# 	7:00
# 	гит - контроль версий
# 	7:25
# 8. Как вставить картинку в маркдаун? 
# 	ctr+v
# 	7:55
# 9. Где посмотреть длину строки в vs code?
# 	внизу написана длина ячейки когда на нее тыкнул
# 	
# 10. Как поменять тип ячейки с питона на маркдаун?
# 	в типе ячейки
# 	7:50
# 11. Как запустить сразу все ячейки в юпитере?
# 	run all
# 	8:30
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# 	не очень много от HTML знать 
# 	8:15
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# 	shift+enter
# 	8:45
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# 	клик по трем точечкам и выбрать show cell lines
# 	9:03
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# 	подсвечивает какая ячейка отвалилась
# 	9:30
# 16. Как очистить вывод ячеек которые уже запущены?
# 	Clear All Outputs
# 	10:48
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# 	Script Edit
# 	10:58
# 18. Каким сочетанием убирается левый сайдбар?
# 	ctrl+b
# 	11:21
# 19. Кнопка два листочка это наши локальные файлы?
# 	да
# 	11:35
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# 	переменная DICT не была определена
# 	10:30
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# 	да
# 22. Что такое валидация?
# 	проверка качества кода
# 23. Что такое трассировка ошибки?
# 	визуализация ошибки
# 	10:05
# 24. Что значит отвалился интерпритатор?
# 	
#
# Отвечаете на вопросы в вашем редакторе кода.
#
