"""Стэш."""

# Офф дока 1 - https://www.atlassian.com/git/tutorials/saving-changes/git-stash
# Офф дока 2 - https://dev.to/pragativerma18/a-guide-to-git-stash-2h5d
#
# ### Что такое stash в Git?
#
# stash — это механизм в Git, позволяющий временно сохранить незакоммиченные изменения (как добавленные, так и изменённые файлы), чтобы очистить рабочее пространство и переключиться на другие задачи, не теряя текущих изменений. Сохранённые изменения помещаются в специальное хранилище (стэш), и вы можете позже их восстановить.
#
# #### Зачем применять stash?
# stash полезен в следующих ситуациях:
#
# 1. Нужно срочно переключиться на другую ветку или задачу.
# Например, вы работаете над новой функциональностью, но получаете запрос исправить ошибку в другой ветке. Используя git stash, вы сохраняете текущие изменения и переключаетесь на другую ветку.
#
# *ПОЧТИ В 100% СЛУЧАЕВ, ВЫ БУДЕТЕ ИСПОЛЬЗОВАТЬ СТЭШ, ПО ЭТОЙ ПРИЧИНЕ:
# 2. Рабочее пространство нужно очистить перед выполнением команды pull или merge веток.
# Если у вас есть незакоммиченные изменения, Git не позволит выполнить слияние или получение новых данных из удалённого репозитория.
#
# 3. Для временного сохранения работы, если изменения ещё не готовы для коммита.
# Например, вы пишете код, но не уверены, что хотите его зафиксировать в истории репозитория.
#
# 4. Чтобы протестировать что-то в чистом рабочем каталоге.
# Вы можете убрать все изменения с помощью stash, выполнить тесты и затем вернуть их обратно.
#
#
# #### Когда применять?
# Во время переключения веток, чтобы избежать конфликтов.
# Пример: вы работаете в ветке feature и хотите быстро переключиться на ветку main.
#
# Перед выполнением команды pull для синхронизации с удалённым репозиторием.
# Пример: у вас есть локальные изменения, но вы хотите сначала получить последние обновления с удалённого репозитория.
#
# В ситуациях, когда изменения временные и не готовы для фиксации.
# Пример: вы добавляете функциональность, но вам нужно проверить другую часть проекта.

# 1. Что делает команда git stash?
# отправляет индексированные (и неиндексированные при выборе stash (untracked)) в буфер обмена, убирая их из рабочей директории, для временного исключения. Дальнейшая задача вернуть их при необходимости
#
# 2. Как просмотреть список всех сохранённых изменений (стэшей)?
# git stash list
#
# 3. Какая команда применяется для использования верхнего стэша?
#
# git stash pop
# или
# git stash apply
#
# *объяснение команд в вопросе 5
#
# 4. Как применить конкретный стэш по его номеру?
# git stash apply stash@{номер}
# или
# git stash pop stash@{номер}
#
# Например, чтобы применить второй stash (stash@{1}, так как нумерация начинается с 0):
#
# 5. Чем отличается команда git stash apply от git stash pop?
# ⦁ git stash apply: Применяет изменения из stash к вашему рабочему каталогу, но не удаляет stash. Stash остается в списке и может быть применен повторно.
#
# ⦁ git stash pop: Применяет изменения из stash к вашему рабочему каталогу и удаляет stash из списка.
#
#
# 6. Что делает команда git stash drop?
# git stash drop [stash@{номер}]
# Удаляет указанный stash. Если номер не указан, удаляется верхний stash (stash@{0}).
#
# *pop - удаляет версию стэш из списка, но восстанавливает в рабочую директорию
# drop - удаляет версию стэш и изменения тоже
#
# 7. Как полностью очистить все сохранённые стэши?
# git stash clear
#
# 8. В каких случаях удобно использовать git stash?
# ⦁ Переключение между ветками с незакоммиченными изменениями.
# ⦁ Временное сохранение работы без коммита.
# ⦁ Очистка рабочего каталога перед выполнением других операций Git.
# ⦁ Быстрое переключение между задачами.
# ⦁ Сохранение изменений перед выполнением git pull или git rebase.
#
# 9. Что произойдёт, если выполнить git stash pop, но в проекте есть конфликтующие изменения?
# Git попытается применить stash, но если возникнут конфликты с вашими текущими изменениями, процесс остановится, и вам нужно будет разрешить конфликты вручную, как и при merge. После разрешения конфликтов, добавьте измененные файлы с помощью git add и продолжите работу.
#
# 10. Можно ли восстановить удалённый стэш после выполнения git stash drop?
# К сожалению, напрямую восстановить удаленный stash нельзя. Однако, если вы недавно удалили stash, вы можете попробовать использовать git reflog для поиска его хеша и затем восстановить его с помощью git checkout. Это сложный процесс и не всегда гарантирует успех.
#
# git checkout <коммит> <путь/к/файлу>
# ⦁ <коммит>: Хэш коммита, тег или имя ветки, до состояния которой вы хотите восстановить файл. Можно использовать HEAD для последнего коммита, HEAD^ для предпоследнего и т.д.
# ⦁ <путь/к/файлу>: Путь к файлу, который вы хотите восстановить.
#
# 11. Что делает команда git stash save "NAME_STASH"
# Это эквивалент git stash push -u "NAME_STASH". Сохраняет ваши изменения в stash с указанным сообщением ("NAME_STASH") и включает неотслеживаемые файлы.
#
# 12. Что делает команда git stash apply "NUMBER_STASH"
# Эта команда неверна.
# Используйте
# git stash apply stash@{номер}.
#
# 13. Что делает команда git stash pop "NUMBER_STASH"
# Эта команда также неверна. Аналогично apply, git stash pop ожидает имя stash или ничего.
# Используйте git stash pop stash@{номер}.
