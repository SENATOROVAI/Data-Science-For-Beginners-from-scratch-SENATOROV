"""This notebook contains my answers to the questions."""

# ### Введение в Python и CPython
#
# 1. Что такое CPython и чем он отличается от Python?
# Ответ:CPython - одна из шести реализаций языка программирования python,
# написанная на C. Cpython это и язык программирования, и интерпретатор.
# 3. Сколько существует реализаций Python, и какая из них самая популярная?
# Ответ: шесть реализаций, самая популярная CPython
# 4. На каком языке написан CPython?
# Ответ: на C
#
# ### Поиск и установка CPython
# 5. (опционально) Кто создал CPython?
# Ответ: Guido van Rossum
# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый
# язык?
# Ответ: потому что написан на C и он вызывает инструкции из C
# 7. Напишите путь к Интерпретатору CPython на вашем компьютере
# Ответ: C:\Users\USER\AppData\Local\Programs\Python\Python311
#
# ### Структура CPython
# Что содержится в папке include в CPython?
# Ответ: Исходники, написанные на C
# Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
# Ответ: https://github.com/python/cpython
# (опционально) Как работает интерпретатор CPython при выполнении кода?
# Ответ: читает и запускает наш код построчно
#
# ### Запуск файла с помощью CPython
# 11. Какая команда используется для запуска файла с помощью CPython?
# Ответ: путь_до_интерпретатора путь_до_файла
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
# Ответ: можно, потому что интерпретатору без разницы, какое расширение файла
# запускать
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
# Ответ: В проводнике или консоли ищем местонахождение интерпретатора и файла,
# копируем путь через свойства, выполняем пункт 11
#
# ### Введение в PyPy
# 14. Чем PyPy отличается от CPython?
# Ответ: PyPy - интерпретатор, который работает в 10 раз быстрее, чем CPython.
# 15. Почему PyPy не может использоваться для всех проектов на Python?
# Ответ: из-за его новизны он ещё не совместим со всеми проектами, поэтому мы
# не можем его использовать везде, но мы можем применять его точечно.
# 16. Где можно скачать PyPy?
# Ответ: https://pypy.org/
#
#
# # Практические задания
# Задание 1: Поиск и установка CPython
# Проверьте, установлен ли CPython на вашем компьютере:
# - Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
# - Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python
# https://www.python.org/downloads/ и установите.
# Ответ: установлен
#
# Задание 2: Исследование структуры CPython
# Найдите папку, где установлен Python (например, через команду which python в
# терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C
# там есть?
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython)
# и найдите файл README. Прочитайте информацию о проекте.
# Ответ: 73 файлов на C. Информацию прочитал
#
# Задание 3: Запуск файла с помощью CPython
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")
# Запустите файл через команду python <путь_до_файла> (замените
# <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на
# .py и повторите запуск.
# Ответ: Запустились оба варианта
#
# Задание 4: Установка и использование PyPy
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте
# подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.py с кодом:
# print("Hello from pypy!")
# Запустите файл через PyPy
# pypy <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему
# файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на
# .py и повторите запуск.
# Ответ: всё работает также, как и с заданием 3, но думаю быстрее
#
# Задание 5: Сравнение производительности CPython и PyPy
#
# Создайте файл performance_test.py с кодом:
#     import time
#     start_time = time.time()
#     total = 0
#     for i in range(1, 10000000):
#         total += i
#     end_time = time.time()
#
#     print("Result:", total)
#     print("Execution time:", end_time - start_time, "seconds")
#
# Запустите этот файл сначала через CPython, а затем через PyPy. Запишите
# результаты времени выполнения для обоих интерпретаторов
# Сделайте вывод о разнице в производительности.
#
# Ответ: Интерпретатор CPython сработал за 1.3 секунды, а интерпретатор PyPy
# выполнил тот же код за 0.36 секунд. Вывод: интерпретатор PyPy в данном
# случае работает быстрее, чем CPython
