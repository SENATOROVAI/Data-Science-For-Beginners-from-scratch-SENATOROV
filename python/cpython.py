"""
Ответы на вопросы к заданию "Введение в Python и CPython".
"""

# 1. Что такое CPython и чем он отличается от Python?
#    ![image.png](attachment:image.png)

# Сколько существует реализаций Python, и какая из них самая популярная?
#    CPython (Самая популярная)
#    PyPy
#    Jython
#    IronPython
#    MicroPython
#    RustPython
#    Brython

# На каком языке написан CPython?
#    C

# Поиск и установка CPython
#    Кто создал CPython?
#        Gvido Van Roso

# Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
#    Python — не самый быстрый по скорости выполнения, но он:
#    суперэффективен для программиста,
#    легко интегрируется с быстрыми языками,
#    использует оптимизированные нативные библиотеки.
#    А значит, он "быстрый" в масштабе производительности команды и проекта

# Напишите путь к Интерпретатору CPython на вашем компьютере
#    C:\Users\irina\AppData\Local\Programs\Python\Python313

# Структура CPython
#    Вот что происходит, когда ты запускаешь python script.py:
#    Читается исходный код.
#    Парсится в дерево.
#    Преобразуется в байткод.
#    Выполняется через стековую VM.

# Что содержится в папке include в CPython?
#    files .h, for ex.: abstract.h
#    Заголовочные файлы (API)

# Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
#    https://github.com/python/cpython

# Как работает интерпретатор CPython при выполнении кода?
#    построчно

# Запуск файла с помощью CPython
#    в командной строке 
#    путь самого интерпретатора пробел путь к файлу

# Какая команда используется для запуска файла с помощью CPython?
#    python

# Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#    Можно запускать текстовые файлы, если в них содержится Python-код.Python просто читает содержимое файла как обычный .py
#    Он не смотрит на расширение, а на содержимое файла

# Как указать путь к интерпретатору и файлу для выполнения кода?
#    Путь интерпретатора пробел путь к файлу

# Введение в PyPy

# Чем PyPy отличается от CPython?
#    PyPy — быстрее, отличный выбор для оптимизации производительности Python-кода, особенно в вычислительных задачах. Однако для проектов с обилием C-расширений или специфичных библиотек CPython остаётся более надежным вариантом.

# Почему PyPy не может использоваться для всех проектов на Python?
#    не совместим со всеми проектами на питоне

# Где можно скачать PyPy?
#    pypy.org

# Установка и запуск PyPy
#    Скачивание PyPy -- выбор версии -- Распакуйте архив -- Добавьте путь к pypy.exe в переменные среды PATH:
#    Win + R → sysdm.cpl → Дополнительно → Переменные среды → PATH → Изменить → Добавить C:\pypy\.

#    pypy3

# Как установить PyPy после скачивания?
#    Распакуйте архив -- Добавьте путь к pypy.exe в переменные среды PATH:
#    Win + R → sysdm.cpl → Дополнительно → Переменные среды → PATH → Изменить → Добавить C:\pypy\.

# Как запустить файл с помощью PyPy?
#    cmd >> путь самого интерпретатора пробел путь к файлу

# Почему PyPy выполняет код быстрее, чем CPython?
#    PyPy работает быстрее CPython благодаря JIT-компиляции (Just-In-Time) и ряду других оптимизаций. JIT-компиляция — главный ускоритель

#    Как работает в CPython:
#    CPython — это интерпретатор: он выполняет код построчно, преобразуя его в байт-код, который затем исполняется виртуальной машиной.

#    Каждая операция (например, сложение чисел или вызов метода) требует множества проверок и переходов, что замедляет выполнение.

#    Как работает в PyPy:
#    PyPy анализирует код во время выполнения и определяет "горячие" участки (те, что вызываются часто, например, циклы).

#    Эти участки компилируются в машинный код (x86/ARM и т. д.), который выполняется напрямую процессором — без промежуточных интерпретаций.

#    Это похоже на то, как работают современные JavaScript-движки (V8 в Chrome, SpiderMonkey в Firefox).

# Практические задания
# Задание 1: Поиск и установка CPython
#    done

# Задание 2: Исследование структуры CPython
#    Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть?
#        59

# Задание 3: Запуск файла с помощью CPython
#        done

# Задание 4: Установка и использование PyPy
#        done

# Задание 5: Сравнение производительности CPython и PyPy
#        CPython
#            Result: 49999995000000
#            Execution time: 1.7481276988983154 seconds
                
#        PyPy
#            Result: 49999995000000
#            Execution time: 0.04053044319152832 seconds