"""Block Cpython."""

# # Введение в Python и CPython
# 1. Что такое CPython и чем он отличается от Python?
# - Python - это название языка программирования, а CPython - конкретный интерпретатор, который выполняет Python-код
# ![image.png](attachment:image.png)
# 3. Сколько существует реализаций Python, и какая из них самая популярная?
# - 6, самая популярная CPython
# 4. На каком языке написан CPython?
# - На языке C
# # Поиск и установка CPython
#
# 5. (опционально) Кто создал CPython?
# - Гвидо Ван Россум
# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
# - Во-первых, он написан на C, во-вторых, он считается быстрым не столько в плане исполнения, сколько в плане разработки на нём
# 7. Напишите путь к Интерпретатору CPython на вашем компьютере
# - C:\Users\user\AppData\Local\Programs\Python\Python310
# # Структура CPython
#
# 8. Что содержится в папке include в CPython?
# - В ней содержатся заголовочные файлы, необходимые для разработки и сборки C-расширений для Python
# 9. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
# - https://github.com/python/cpython
# 10. (опционально) Как работает интерпретатор CPython при выполнении кода?
# - Cpython работает в 4 этапа: 1. Лексический анализ. 2. Синтаксический анализ. 3. Компиляция в байт-код. 4. Исполнение байт-кода
# # Запуск файла с помощью CPython
#
# 11. Какая команда используется для запуска файла с помощью CPython?
# - python filename.py
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
# - Можно, потому что ему неважно, какой формат файла
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
# - Открыть терминал и ввести <путь до интерпретатора> <пробел> <путь до файла>
# # Введение в PyPy
#
# 14. Чем PyPy отличается от CPython?
# - Он работает в 10 раз быстрее
# 15. Почему PyPy не может использоваться для всех проектов на Python?
# - Потому что он достаточно новый и ещё не совместим со всеми проектами
# 16. Где можно скачать PyPy?
# - htttps://pypy.org
# # Установка и запуск PyPy
#
# 17. Как установить PyPy после скачивания?
# - Разархивировать скачанный архив в удобное место
# 18. Как запустить файл с помощью PyPy?
# - Скопировать путь до интерпретатора PyPy и путь до файла в терминала
# 19. Почему PyPy выполняет код быстрее, чем CPython?
# - PyPy быстрее Cpython благодаря JIT-компилятору (Just-In-Time).
# Как это работает:
#
# 1. Интерпретация: Сначала PyPy, как и CPython, интерпретирует байт-код.
#
# 2. Анализ ("разогрев"): Во время выполнения JIT-компилятор анализирует "горячий" код - участки, которые выполняются много раз (например, циклы).
#
# 3. Компиляция в машинный код: Эти горячие участки на лету компилируются в оптимизированный машинный код, который процессор выполняет напрямую, без дальнейшей интерпретации.
#
# CPython же всегда интерпретирует байт-код, что медленнее выполнения скомпилированного машинного кода.
#
# Итог: PyPy жертвует скоростью запуска на анализ, но выигрывает в скорости выполнения долгоработающих программ.
#
# # Практические задания
# Задание 1: Поиск и установка CPython
#
# Проверьте, установлен ли CPython на вашем компьютере:
#     Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
#     Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python https://www.python.org/downloads/ и установите.
# - Установлен, версия Python 3.13.1
#
# Задание 2: Исследование структуры CPython
#
# Найдите папку, где установлен Python (например, через команду which python в терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть?
# - Около 100-150 файлов в зависимости от версии
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython) и найдите файл README. Прочитайте информацию о проекте.
# - Прочитал
#
# Задание 3: Запуск файла с помощью CPython
#
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")
#
# Запустите файл через команду python <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
# - Создал и запустил, отработало как с расширением .txt, так и с .py
#
# Задание 4: Установка и использование PyPy
#
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.txt с кодом:
# print("Hello from pypy!")
#
# Запустите файл через PyPy
# pypy <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
# - Создал и запустил, отработало как с расширением .txt, так и .py
#
# Задание 5: Сравнение производительности CPython и PyPy
#
# Создайте файл performance_test.py с кодом:
#     import time
#     start_time = time.time()
#     total = 0
#     for i in range(1, 10000000):
#         total += i
#     end_time = time.time()
#
#     print("Result:", total)
#     print("Execution time:", end_time - start_time, "seconds")
#
# - CPython: Result: 49999995000000; Execution time: 1.0441670417785645 seconds
# - PyPy:    Result: 49999995000000; Execution time: 0.046868324279785156 seconds
# - Видно, что PyPy ощутимо быстрее
