"""Recursion.

Decorator. Generator.
"""

# **–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é lru_cache**
#
# ### üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ `lru_cache` –Ω–∞ –ø–∞–ª—å—Ü–∞—Ö
#
# `lru_cache` ‚Äî —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π **–∫–µ—à–∏—Ä—É–µ—Ç** (–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç) —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã—á–∏—Å–ª—è—Ç—å –∏—Ö –∑–∞–Ω–æ–≤–æ.
#
# #### üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ `fib(n)`?
# 1. **–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ `fib(35)`**
#    - –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—á–∏—Ç–∞—Ç—å `fib(34) + fib(33)`, –ø–æ—Ç–æ–º `fib(33) + fib(32)` –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
#    - **–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –∫–µ—à.**
#
# 2. **–ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã `fib(35)`**
#    - –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Ç–µ–º –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (`n=35`), –æ–Ω–∞ **–Ω–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ**, –∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–µ—à–∞.
#    - –ü–æ—ç—Ç–æ–º—É –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è —Å —Å–µ–∫—É–Ω–¥ –¥–æ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥.
#
# ---
#
# ### üìÇ –ö–∞–∫ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è?
# `lru_cache` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **—Å–ª–æ–≤–∞—Ä—å** (–∫–∞–∫ `dict`), –≥–¥–µ:
# - **–ö–ª—é—á** ‚Üí –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `n=35`).
# - **–ó–Ω–∞—á–µ–Ω–∏–µ** ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç (`fib(35)`).
#
# #### üîπ `maxsize=1000`
# - –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
# - –ï—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å `fib(1001)`, —Ç–æ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (`fib(1)`) —É–¥–∞–ª–∏—Ç—Å—è (LRU = Least Recently Used).
#
# #### üîπ –ü—Ä–∏–º–µ—Ä –∫–µ—à–∞ –ø–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è `fib(5)`
# ```python
# {
#     0: 1,  # fib(0)
#     1: 1,  # fib(1)
#     2: 2,  # fib(2) = fib(1) + fib(0)
#     3: 3,  # fib(3) = fib(2) + fib(1)
#     4: 5,  # fib(4) = fib(3) + fib(2)
#     5: 8,  # fib(5) = fib(4) + fib(3)
# }
# ```
# –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –≤—ã–∑–≤–∞—Ç—å `fib(4)`, –∑–Ω–∞—á–µ–Ω–∏–µ `5` –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ –∫–µ—à–∞, –∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
#
# ---
#
# ### ‚ö° –ü–æ—á–µ–º—É `fib(35)` —Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞?
# –ü–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (`fib(0)`, `fib(1)`, ..., `fib(35)`) —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à–µ!
#
# –ë–µ–∑ `lru_cache` –≤—Ä–µ–º—è –±—ã–ª–æ –±—ã **–æ—á–µ–Ω—å –¥–æ–ª–≥–∏–º**, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–ª–∞ –±—ã –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–ª–ª–∏–æ–Ω—ã —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `fib(2)` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∫—É—Ä—Å–∏–∏ —Ç—ã—Å—è—á–∏ —Ä–∞–∑).
#
# ---
#
# ### üí° –í—ã–≤–æ–¥
# `lru_cache` ‚Äî —ç—Ç–æ **"–≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–º—è—Ç—å"** –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
# - –£—Å–∫–æ—Ä—è–µ—Ç –∫–æ–¥ –≤ **—Å–æ—Ç–Ω–∏ —Ä–∞–∑** (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π).
# - –¢—Ä–∞—Ç–∏—Ç **–Ω–µ–º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏** –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
#
# –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å `@lru_cache`, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è `fib(35)` –±—É–¥–µ—Ç **—Å–µ–∫—É–Ω–¥—ã**, –∞ –Ω–µ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã! üöÄ

# ### üîç **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `lru_cache` –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã .cache_clear() –∏ .cache_info()**
#
# #### **1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø `lru_cache`**
# `lru_cache` ‚Äî —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π **–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
#
# - **–ö–µ—à —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è**:
#   - **–ö–ª—é—á** ‚Üí –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `n=5` –¥–ª—è `fib(5)`).
#   - **–ó–Ω–∞—á–µ–Ω–∏–µ** ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `8` –¥–ª—è `fib(5)`).
# - **LRU = Least Recently Used** ‚Üí –µ—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è—é—Ç—Å—è **—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ** (—Ä–µ–∂–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ) –∑–Ω–∞—á–µ–Ω–∏—è.
#
# #### **2. –ú–µ—Ç–æ–¥—ã `lru_cache`**
# –£ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –¥–≤–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–∞:
#
# 1. **`.cache_info()` ‚Üí —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞**
#    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
#    - `hits` ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑—è—Ç –∏–∑ –∫–µ—à–∞ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ).
#    - `misses` ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã—á–∏—Å–ª—è—Ç—å.
#    - `maxsize` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞.
#    - `currsize` ‚Äî —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
#
# 2. **`.cache_clear()` ‚Üí –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞**
#    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏:
#    - –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏,
#    - –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å,
#    - –≤—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
#
# ---
#
# ### üîß **–ü—Ä–∏–º–µ—Ä 1: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ**
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ñ—É–Ω–∫—Ü–∏—é `square()`, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞:
#
# ```python
# from functools import lru_cache
#
#
# @lru_cache(maxsize=3)  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# def square(x):
#     print(f"–í—ã—á–∏—Å–ª—è—é –∫–≤–∞–¥—Ä–∞—Ç {x}...")  # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏
#     return x * x
#
#
# # –ü–µ—Ä–≤—ã–µ –≤—ã–∑–æ–≤—ã ‚Äî "misses" (–∫–µ—à –ø—É—Å—Ç)
# print(square(2))  # –í—ã—á–∏—Å–ª—è—é –∫–≤–∞–¥—Ä–∞—Ç 2... ‚Üí 4
# print(square(3))  # –í—ã—á–∏—Å–ª—è—é –∫–≤–∞–¥—Ä–∞—Ç 3... ‚Üí 9
#
# # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã ‚Äî "hits" (–±–µ—Ä—ë–º –∏–∑ –∫–µ—à–∞)
# print(square(2))  # (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç) ‚Üí 4
# print(square(3))  # (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç) ‚Üí 9
#
# # –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –µ—â—ë –æ–¥–∏–Ω "miss" (maxsize=3, –Ω–æ 2 –∏ 3 —É–∂–µ –≤ –∫–µ—à–µ)
# print(square(4))  # –í—ã—á–∏—Å–ª—è—é –∫–≤–∞–¥—Ä–∞—Ç 4... ‚Üí 16
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
# print(square.cache_info())
# ```
#
# **–í—ã–≤–æ–¥:**
# ```
# CacheInfo(hits=2, misses=3, maxsize=3, currsize=3)
# ```
# - **`hits=2`** ‚Üí –¥–≤–∞ —Ä–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–µ—à (–¥–ª—è `square(2)` –∏ `square(3)`).
# - **`misses=3`** ‚Üí —Ç—Ä–∏ —Ä–∞–∑–∞ –≤—ã—á–∏—Å–ª—è–ª–∏ (`2`, `3`, `4`).
# - **`maxsize=3`** ‚Üí –∫–µ—à —Ö—Ä–∞–Ω–∏—Ç –º–∞–∫—Å–∏–º—É–º 3 –∑–Ω–∞—á–µ–Ω–∏—è.
# - **`currsize=3`** ‚Üí —Å–µ–π—á–∞—Å –≤ –∫–µ—à–µ –ª–µ–∂–∞—Ç `2`, `3`, `4`.
#
# ---
#
# ### üßπ **–ü—Ä–∏–º–µ—Ä 2: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (`cache_clear`)**
# –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
#
# ```python
# from functools import lru_cache
#
#
# @lru_cache(maxsize=100)
# def get_user_data(user_id):
#     print(f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
#     return f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
#
#
# # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
# print(get_user_data(1))  # –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1... ‚Üí –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
#
# # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ ‚Äî –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–µ—à–∞
# print(get_user_data(1))  # (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç) ‚Üí –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
#
# # –û—á–∏—â–∞–µ–º –∫–µ—à
# get_user_data.cache_clear()
#
# # –¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
# print(get_user_data(1))  # –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1... ‚Üí –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
# ```
#
# **–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?**
# 1. –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ ‚Üí `miss` (–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–µ—à).
# 2. –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ ‚Üí `hit` (–¥–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫–µ—à–∞).
# 3. `cache_clear()` ‚Üí –∫–µ—à –æ—á–∏—â–µ–Ω.
# 4. –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ ‚Üí —Å–Ω–æ–≤–∞ `miss` (–∫–µ—à –ø—É—Å—Ç, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ).
#
# ---
#
# ### üìä **–ü—Ä–∏–º–µ—Ä 3: –ê–Ω–∞–ª–∏–∑ –∫–µ—à–∞ –≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (fib)**
# –í–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–∏–º–µ—Ä—É —Å —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏:
#
# ```python
# from functools import lru_cache
#
#
# @lru_cache(maxsize=1000)
# def fib(n):
#     if n in (0, 1):
#         return 1
#     return fib(n - 1) + fib(n - 2)
#
#
# # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –¥–æ–ª–≥–∏–π, —Ç.–∫. –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ fib –æ—Ç 0 –¥–æ 35
# print(fib(35))  # 14930352
#
# # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π (–≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ fib —É–∂–µ –≤ –∫–µ—à–µ)
# print(fib(35))  # 14930352
#
# # –°–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
# print(fib.cache_info())
# ```
#
# **–í—ã–≤–æ–¥:**
# ```
# CacheInfo(hits=34, misses=36, maxsize=1000, currsize=36)
# ```
# - **`hits=34`** ‚Üí 34 —Ä–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, `fib(2)`, `fib(3)` –∏ —Ç. –¥.).
# - **`misses=36`** ‚Üí 36 —Ä–∞–∑ –≤—ã—á–∏—Å–ª—è–ª–∏ (`fib(0)`, `fib(1)`, ..., `fib(35)`).
# - **`maxsize=1000`** ‚Üí –∫–µ—à –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 1000 –∑–Ω–∞—á–µ–Ω–∏–π.
# - **`currsize=36`** ‚Üí —Å–µ–π—á–∞—Å –≤ –∫–µ—à–µ –ª–µ–∂–∞—Ç `fib(0)` ... `fib(35)`.
#
# –ï—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å `fib.cache_clear()`, –≤—Å–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª—è—Ç—Å—è, –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ `fib(35)` —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–º.
#
# ---
#
# ### üéØ **–í—ã–≤–æ–¥: –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –º–µ—Ç–æ–¥—ã?**
# - **`.cache_info()`** ‚Üí —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–µ—à.
#   - –ï—Å–ª–∏ `hits` –º–∞–ª–æ, –≤–æ–∑–º–æ–∂–Ω–æ, `maxsize` —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∫–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
# - **`.cache_clear()`** ‚Üí –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ —Å—Ç–∞—Ä—ã–π –∫–µ—à –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.
#
# –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –¥–µ–ª–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å `lru_cache` –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π! üöÄ

# **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ Python** ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ **"–æ–±—ë—Ä—Ç–∫–∏"**, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–ª–∏ –∫–ª–∞—Å—Å–∞–º, –Ω–µ –∏–∑–º–µ–Ω—è—è –∏—Ö –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.
#
# ### üîπ –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–æ–≥–∏—è:
# –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —ç—Ç–æ –∫–∞–∫ **–∫–æ—Ñ–µ**.
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –∫–∞–∫ **–¥–æ–±–∞–≤–∫–∞ –∫ –∫–æ—Ñ–µ** (—Å–∞—Ö–∞—Ä, –º–æ–ª–æ–∫–æ, —Å–∏—Ä–æ–ø). –¢—ã –Ω–µ –º–µ–Ω—è–µ—à—å —Å–∞–º –∫–æ—Ñ–µ, –Ω–æ —É–ª—É—á—à–∞–µ—à—å –µ–≥–æ –≤–∫—É—Å.
#
# ### üîπ –ö–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤ –∫–æ–¥–µ?
# –î–æ–ø—É—Å—Ç–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç "–ü—Ä–∏–≤–µ—Ç":
#
# ```python
# def say_hello():
#     print("–ü—Ä–∏–≤–µ—Ç!")
# ```
#
# –ù–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –≤—ã–≤–æ–¥–∏–ª–æ—Å—å `"–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞"`, –∞ –ø–æ—Å–ª–µ ‚Äî `"–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"`.
#
# #### –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (–ø–ª–æ—Ö–æ, —Ç.–∫. –º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é):
# ```python
# def say_hello():
#     print("–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")  # –î–æ–±–∞–≤–∏–ª–∏ –≤—Ä—É—á–Ω—É—é
#     print("–ü—Ä–∏–≤–µ—Ç!")
#     print("–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")  # –î–æ–±–∞–≤–∏–ª–∏ –≤—Ä—É—á–Ω—É—é
# ```
#
# #### –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º (–ª—É—á—à–µ!):
# ```python
# # 1. –°–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (—Ñ—É–Ω–∫—Ü–∏—é-–æ–±—ë—Ä—Ç–∫—É)
# def simple_decorator(func):  # func ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã "—É–ª—É—á—à–∞–µ–º"
#     def wrapper():
#         print("–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
#         func()  # –í—ã–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
#         print("–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
#
#     return wrapper
#
#
# # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ —Ñ—É–Ω–∫—Ü–∏–∏
# @simple_decorator
# def say_hello():
#     print("–ü—Ä–∏–≤–µ—Ç!")
#
#
# # 3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# say_hello()
# ```
#
# **–í—ã–≤–æ–¥:**
# ```
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞
# –ü—Ä–∏–≤–µ—Ç!
# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
# ```
#
# ### üîπ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
# 1. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä `@simple_decorator` **"–æ–±–µ—Ä–Ω—É–ª"** —Ñ—É–Ω–∫—Ü–∏—é `say_hello()` –≤ —Ñ—É–Ω–∫—Ü–∏—é `wrapper()`.
# 2. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ `say_hello()` –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ `print("–ü—Ä–∏–≤–µ—Ç!")`, –Ω–æ –∏ –∫–æ–¥ –¥–æ –∏ –ø–æ—Å–ª–µ.
#
# ### üîπ –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?
# - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏–π —Ñ—É–Ω–∫—Ü–∏–∏)
# - –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
# - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# - –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!
#
# ### üîπ –í–∞–∂–Ω–æ:
# - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã **–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç** –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ **–¥–æ–±–∞–≤–ª—è—é—Ç** –∫ –Ω–µ–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
# - –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å **–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤** –∫ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
# - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –Ω–æ –∏ —Å –∫–ª–∞—Å—Å–∞–º–∏.
#
# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —Ä–∞–∑–±–µ—Ä—ë–º –ø—Ä–∏–º–µ—Ä —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏! üöÄ

# **–ó–∞—á–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** –∏ –ø–æ—á–µ–º—É –±–µ–∑ –Ω–∏—Ö –Ω–µ –æ–±–æ–π—Ç–∏—Å—å.
#
# ### üîπ **–ü—Ä–æ–±–ª–µ–º–∞: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω "–∑–∞–ø–æ–º–Ω–∏—Ç—å" —Å–æ—Å—Ç–æ—è–Ω–∏–µ**
# –î–æ–ø—É—Å—Ç–∏–º, –º—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `@count`, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏.
#
# #### ‚ùå **–ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)**
# ```python
# total = 0  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!
#
#
# def count(f):
#     global total  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
#     total += 1
#     return f
#
#
# @count
# def greet():
#     print("–ü—Ä–∏–≤–µ—Ç!")
#
#
# greet()  # total = 1
# greet()  # total = 2
# ```
# **–ú–∏–Ω—É—Å—ã:**
# - `total` ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –µ—ë –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# - –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—á—ë—Ç—á–∏–∫ **–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏** (–µ—Å–ª–∏ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—á—ë—Ç—á–∏–∫ –±—É–¥–µ—Ç –æ–±—â–∏–π).
#
# ---
#
# ### ‚úÖ **–†–µ—à–µ–Ω–∏–µ: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**
# ```python
# def count(f):
#     total = 0  # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
#
#     def decorated(*args, **kwargs):
#         nonlocal total  # –ë–µ—Ä—ë–º total –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
#         total += 1
#         print(f"–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ {total} —Ä–∞–∑")
#         return f(*args, **kwargs)
#
#     return decorated  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
# ```
# **–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
#
# 1. **`total` –∂–∏–≤—ë—Ç –≤–Ω—É—Ç—Ä–∏ `count()`**
#    - –ü—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ `@count` –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è **–Ω–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏** –¥–ª—è `total`.
#    - –ï—Å–ª–∏ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —É –∫–∞–∂–¥–æ–π –±—É–¥–µ—Ç **—Å–≤–æ–π —Å—á—ë—Ç—á–∏–∫**.
#
# 2. **`decorated()` –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç `total`**
#    - –ë–ª–∞–≥–æ–¥–∞—Ä—è **–∑–∞–º—ã–∫–∞–Ω–∏—é (closure)** –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è `decorated` —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (`count`), –¥–∞–∂–µ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
#
# 3. **`nonlocal` –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å `total`**
#    - –ë–µ–∑ `nonlocal` Python —Å—á–∏—Ç–∞–ª –±—ã `total` –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `decorated`, –∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –±—ã –µ—ë –∏–∑–º–µ–Ω—è—Ç—å.
#
# ---
#
# ### üîπ **–ß—Ç–æ –¥–∞—é—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏?**
# 1. **–ò–∑–æ–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è**
#    - –ö–∞–∂–¥—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (`total`), –Ω–µ –º–µ—à–∞—è –¥—Ä—É–≥–∏–º.
#
# 2. **–ì–∏–±–∫–æ—Å—Ç—å**
#    - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (–µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏).
#
# 3. **–ß–∏—Å—Ç—ã–π –∫–æ–¥**
#    - –ù–µ –Ω—É–∂–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª–æ–∂–Ω—è—é—Ç –æ—Ç–ª–∞–¥–∫—É.
#
# ---
#
# ### üèÅ **–ü—Ä–∏–º–µ—Ä —Å –¥–≤—É–º—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏**
# ```python
# @count
# def greet():
#     print("–ü—Ä–∏–≤–µ—Ç!")
#
#
# @count
# def bye():
#     print("–ü–æ–∫–∞!")
#
#
# greet()  # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 1 —Ä–∞–∑
# greet()  # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 2 —Ä–∞–∑
# bye()  # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 1 —Ä–∞–∑ (—Å—á—ë—Ç—á–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π!)
# ```
# **–í—ã–≤–æ–¥:**
# ```
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 1 —Ä–∞–∑
# –ü—Ä–∏–≤–µ—Ç!
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 2 —Ä–∞–∑
# –ü—Ä–∏–≤–µ—Ç!
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 1 —Ä–∞–∑
# –ü–æ–∫–∞!
# ```
#
# ---
#
# ### üí° **–ò—Ç–æ–≥: –ó–∞—á–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å?**
# - **–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—á—ë—Ç—á–∏–∫) –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
# - **–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö** (–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–∞–≥–∞–º).
# - **–ß—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏** (–±–ª–∞–≥–æ–¥–∞—Ä—è `*args, **kwargs`).
#
# –ï—Å–ª–∏ –±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–∑—ã–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–∑—É, –æ–Ω –Ω–µ –º–æ–≥ –±—ã **"–æ–±–µ—Ä–Ω—É—Ç—å"** –µ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± **–æ—Ç–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** –∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ/–ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞.
#
# –•–æ—á–µ—à—å —Ä–∞–∑–±–µ—Ä—ë–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@repeat(3)` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏)? üòä

# –í –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö –≤—Å–µ–≥–¥–∞ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∏—à–µ–º nonlocal –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω—è–ª–∞ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏.

# ### –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
#
# –¢–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É ‚Äî –æ–Ω –≤—ã–¥–∞—ë—Ç –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ __next__() (–æ–±—ã—á–Ω–æ –Ω–µ—è–≤–Ω–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ü–∏–∫–ª–µ for).

# ```python
# squares = (i**2 for i in range(10))
# print(squares)
# print(next(squares))
# print(next(squares))
# print(filter(lambda x: x % 2 == 0, squares))
# print(list(filter(lambda x: x % 2 == 0, squares)))
# ```

# ```python
# # –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –§–∏–±–æ–Ω–∞—á—á–∏:
#
#
# def fib(n):  # —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-—Ñ—É–Ω–∫—Ü–∏—è
#     n_1, n_2 = 1, 1
#     for i in range(n):
#         yield n_1  # <- –¢–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é (–æ—Ç–ª–∏—á–∏–µ –æ—Ç return)
#         n_1, n_2 = n_2, n_1 + n_2  # # <- –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç—Å—é–¥–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
#
#
# print(", ".join(str(x) for x in fib(10)))
#
# # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# # 1, 1, 2, 3, 5, 8, 13, 21, 34, 55
# ```

# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fib() –µ—Å—Ç—å —Ü–∏–∫–ª –Ω–∞ n –∏—Ç–µ—Ä–∞—Ü–∏–π, –Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–Ω–∏ –Ω–µ –≤—Å–µ —Å—Ä–∞–∑—É. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–µ–Ω–∏–≤–æ ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∏ –≤—ã–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –≤—ã –≤ —Ü–∏–∫–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–∫ –∏ –Ω–µ –±—É–¥—É—Ç –≤—ã—á–∏—Å–ª–µ–Ω—ã.
# –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º—è—Ç –ø–∞–º—è—Ç—å –∏ —É—Å–∫–æ—Ä—è—é—Ç —Ä–∞–±–æ—Ç—É.

# ### üîπ **`fib(n)` ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä**
# –î–∞, **`def fib(n)` —Å–æ–∑–¥–∞—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä**, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç `n`.
#
# #### –ü–æ—á–µ–º—É?
# 1. **–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `yield`** ‚Äî –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç `yield`, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è **–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π** (generator function).
# 2. **–ü—Ä–∏ –≤—ã–∑–æ–≤–µ `fib(n)` –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä**, –∞ –Ω–µ –æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
# 3. **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É** –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ `next()` –∏–ª–∏ –≤ —Ü–∏–∫–ª–µ.
#
# ---
#
# ### üîÑ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
#
# #### 1Ô∏è‚É£ **–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞**
# ```python
# gen = fib(3)  # –°–æ–∑–¥–∞—ë—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Ñ—É–Ω–∫—Ü–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É)
# print(next(gen))  # 1 (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ)
# print(next(gen))  # 1 (–≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ)
# print(next(gen))  # 2 (—Ç—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ)
# print(next(gen))  # –û—à–∏–±–∫–∞ StopIteration (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —á–∏—Å–ª–∞)
# ```
#
# #### 2Ô∏è‚É£ **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–∞–º—è—Ç–∏?**
# | –®–∞–≥ | –î–µ–π—Å—Ç–≤–∏–µ                                     | –°–æ—Å—Ç–æ—è–Ω–∏–µ (`n_1`, `n_2`) |
# |-----|----------------------------------------------|--------------------------|
# | 1   | `gen = fib(3)` ‚Üí —Å–æ–∑–¥–∞—ë—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä         | `n_1=1`, `n_2=1` (–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) |
# | 2   | `next(gen)` ‚Üí –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ `yield n_1`     | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `1`           |
# | 3   | `next(gen)` ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å `n_1, n_2 = ...`  | `n_1=1`, `n_2=2`         |
# | 4   | `next(gen)` ‚Üí —Å–Ω–æ–≤–∞ `yield n_1`              | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `1`           |
# | 5   | `next(gen)` ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç `n_1, n_2`           | `n_1=2`, `n_2=3`         |
# | 6   | `next(gen)` ‚Üí –ø–æ—Å–ª–µ–¥–Ω–∏–π `yield n_1`          | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `2`           |
# | 7   | `next(gen)` ‚Üí —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, `StopIteration` | ‚Äî                        |
#
# ---
#
# ### üîπ **–ß–µ–º —ç—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?**
#
# | –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (`return`)               | –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä (`yield`)                          |
# |------------------------------------------|----------------------------------------------|
# | –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –¥–æ –∫–æ–Ω—Ü–∞               | –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è **–ø–æ —á–∞—Å—Ç—è–º** –ø—Ä–∏ –∫–∞–∂–¥–æ–º `next()` |
# | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É**        | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–ø–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é**            |
# | –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ **—É–¥–∞–ª—è—é—Ç—Å—è** –ø–æ—Å–ª–µ `return`  | –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ **—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è** –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏    |
# | –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è **–≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö**          | –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è **–±–æ–ª—å—à–∏—Ö/–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö** –¥–∞–Ω–Ω—ã—Ö  |
#
# ---
#
# ### üí° **–ü–æ—á–µ–º—É `fib(n)` ‚Äî —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è?**
# - –û–Ω–∞ **–Ω–µ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ —Å—Ä–∞–∑—É**, –∞ –≤—ã–¥–∞—ë—Ç –∏—Ö **–ª–µ–Ω–∏–≤–æ** (lazy evaluation).
# - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–∂–µ –¥–ª—è **–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏** (–µ—Å–ª–∏ —É–±—Ä–∞—Ç—å `range(n)`).
# - –≠–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å: –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –∞ **–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞ –ª–µ—Ç—É**.
#
# –ü—Ä–∏–º–µ—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –§–∏–±–æ–Ω–∞—á—á–∏:
# ```python
# def infinite_fib():
#     n_1, n_2 = 1, 1
#     while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!
#         yield n_1
#         n_1, n_2 = n_2, n_1 + n_2
#
#
# gen = infinite_fib()
# print(next(gen))  # 1
# print(next(gen))  # 1
# print(next(gen))  # 2
# # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ...
# ```
#
# ---
#
# ### üèÅ **–ò—Ç–æ–≥**
# - **`fib(n)` ‚Äî —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä**, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç `yield`.
# - –û–Ω–∞ **–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É**, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# - –ü—Ä–∏ –∫–∞–∂–¥–æ–º `next()` –æ–Ω–∞ **–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å –º–µ—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ `yield`**.
# - –≠—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å **–ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö**, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç—å.
#
# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä—ã: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ `send()` –∏–ª–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ `asyncio`! üòä

# ```python
# # –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑-–∑–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞, —Ö–æ—Ç—å –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –∏—Ö –Ω–µ –±—ã–ª–æ
#
#
# # –≤–≤–æ–¥
# @result_accumulator
# def a_plus_b(a, b):
#     return a + b
#
#
# print(a_plus_b(3, 5, method="accumulate"))
#
#
# # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ func –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ *args
# def result_accumulator(func):
#     result = []
#
#     def wrap(
#         *args, method="accumulate"
#     ):  # args –∏–∑ func, –¥–æ–±–∞–≤–ª—è–µ—Å—è –∏–º.–∞—Ä–≥-—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—ë—Ä—Ç–∫–æ–π)
#         result.append(func(*args))
#         if method == "drop":
#             temp = result.copy()
#             result.clear()
#             return temp
#
#     return wrap
# ```

# ### üîπ **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ?**
# 1. **–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è** `a_plus_b(a, b)` –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
# 2. **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä** `result_accumulator` –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ë—Ä—Ç–∫—É `wrap(*args, method="accumulate")`, –∫–æ—Ç–æ—Ä–∞—è:
#    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (`*args`),
#    - –î–æ–±–∞–≤–ª—è–µ—Ç **–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç** `method` —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `"accumulate"`.
#
# –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ `a_plus_b(3, 5, method="accumulate")`:
# - –ê—Ä–≥—É–º–µ–Ω—Ç—ã `3` –∏ `5` –ø–æ–ø–∞–¥–∞—é—Ç –≤ `*args`,
# - `method="accumulate"` –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—ë—Ä—Ç–∫–æ–π.

# ```python
# # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
# def cycle(spisok):
#     while True:
#         for item in spisok:
#             yield item
# ```

# +
# 1

# fmt: off
from collections.abc import Generator, Sequence
from typing import Callable, Union

# fmt: on


def recursive_sum(*args: int) -> int:
    """Recursively sums a variable number of integer arguments."""
    if not args:
        return 0
    return args[-1] + recursive_sum(*args[:-1])


# +
# 2


def recursive_digit_sum(nmb: int) -> int:
    """Recursively sums the digits of a given integer."""
    if nmb // 10 > 0:
        return nmb % 10 + recursive_digit_sum(nmb // 10)
    return nmb % 10


# +
# 3


def make_equation(*coeffs: int) -> str:
    """Recursively creates a string representation of a polynomial equation."""
    if len(coeffs) == 1:
        return str(coeffs[0])
    line = ") * x " + ("- " if coeffs[-1] < 0 else "+ ") + str(coeffs[-1])
    return "(" + make_equation(*coeffs[:-1]) + line


# +
# 4


def answer(
    func: Callable[[int | str, int | str], int | str],
) -> Callable[[int | str, int | str], int | str]:
    """Decorate that wraps function result in a formatted string."""

    def decorated(*args: int | str, **kwargs: int | str) -> str:
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {func(*args, **kwargs)}"

    return decorated


# -

# #### 5
#
# ```python
# # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ func –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ *args
# def result_accumulator(func):
#     result = []
#
#     def wrap(
#         *args, method="accumulate"
#     ):  # args –∏–∑ func, –¥–æ–±–∞–≤–ª—è–µ—Å—è –∏–º.–∞—Ä–≥-—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—ë—Ä—Ç–∫–æ–π)
#         result.append(func(*args))
#         if method == "drop":
#             temp = result.copy()
#             result.clear()
#             return temp
#
#     return wrap
# ```

# +
# 6


def merge(left: list[int], right: list[int]) -> list[int]:
    """Merge two sorted lists into a single sorted list."""
    result: list[int] = []
    while len(left) > 0 and len(right) > 0:
        if left[0] <= right[0]:
            result.append(left[0])
            left = left[1:]
        else:
            result.append(right[0])
            right = right[1:]

    if len(left) > 0:
        result += left
    if len(right) > 0:
        result += right
    return result


def merge_sort(arr: list[int]) -> list[int]:
    """Sorts a list using merge sort algorithm."""
    if len(arr) <= 1:
        return arr
    middle: int = int(len(arr) / 2)
    left: list[int] = merge_sort(arr[:middle])
    right: list[int] = merge_sort(arr[middle:])
    return merge(left, right)


# +
# 7


OutputType = Union[int, str, bool]


def same_type(
    func: Callable[[int | str], OutputType],
) -> Callable[[int | str], OutputType]:
    """Ensure all arguments passed to the function are of the same type."""

    def decorated(*args: int | str) -> OutputType:
        if len(set(map(type, args))) != 1:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        return func(*args)

    return decorated


# +
# 8


def fibonacci(value: int) -> Generator[int]:
    """Decorate that yields the first n numbers in the Fibonacci sequence."""
    n_1, n_2 = 0, 1
    for _ in range(value):
        yield n_1
        n_1, n_2 = n_2, n_1 + n_2


# +
# 9


def cycle(arr: list[int]) -> Generator[list[int]]:
    """Decorate that infinitely yields elements from the list."""
    while arr:
        yield arr


# +
# 10


def make_linear(arr: Sequence[Union[int, Sequence[int]]]) -> list[int]:
    """Flattens a nested list structure into a single linear list."""
    result: list[int] = []

    for el in arr:
        if isinstance(el, Sequence):
            result.extend(make_linear(el))
        else:
            result.append(el)

    return result
