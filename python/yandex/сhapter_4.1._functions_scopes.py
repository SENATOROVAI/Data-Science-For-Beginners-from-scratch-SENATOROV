"""Functions.

Scopes. Passing parameters to functions.
"""

# ```python
# # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
# def list_modify():
#     sample = [
#         4,
#         5,
#         6,
#     ]  # —Å–æ–∑–¥–∞–ª–∞—Å—å —Å–≤–æ—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫-—Ä–∞—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é
#
#
# sample = [1, 2, 3]
# list_modify()  # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–∫ —Ö–æ—Ç—å –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥ 1 –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
# print(sample)
#
# # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# # [1, 2, 3]
# ```

# ```python
# # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–Ω—è—é—Ç—Å—è
# def list_modify_1(list_arg):
#     # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–µ –∏–º–µ—é—â–∏–π —Å–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º
#     list_arg = [1, 2, 3, 4]
#
#
# def list_modify_2(list_arg):
#     # –º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
#     list_arg += [4]
#
#
# sample_1 = [1, 2, 3]
# sample_2 = [1, 2, 3]
# list_modify_1(sample_1)
# list_modify_2(sample_2)
# print(sample_1)
# print(sample_2)
#
# # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# # [1, 2, 3]
# # [1, 2, 3, 4]
# ```

# ```python
# # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏
# # –ø—Ä–∏–∫–æ–ª –≤ —Ç–æ–º —á—Ç–æ –º—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ - –ø–æ—ç—Ç–æ–º—É —Ç–∞–∫–∞—è –±–æ–ª–µ–∑–Ω—å
# # –Ω–µ –º–æ–∂–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ global, —Ç–∫ –ø—Ä–∏—á–∏–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å—é –æ–±—ä–µ–∫—Ç–æ–≤
# # —Å–ø–∏—Å–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞ - –∏–∑–º–µ–Ω—è–µ–º—ã–µ (id –±—É–¥–µ—Ç —Ç–µ–º –∂–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–∏—Å–∫–ª. –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ))
# # —á–∏—Å–ª–∞, –∫–æ—Ä—Ç–µ–∂–∏, —Å—Ç—Ä–æ–∫–∏ - –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–±–æ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π id, –ª–∏–±–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —á—Ç–æ-–ª–∏–±–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –±—É–∫–≤—É —á–µ—Ä–µ–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ; –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç))
# def inc():
#     global x  # –º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
#     x += 1
#     print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ {x}.")
#
#
# x = 0
# inc()
# inc()
# inc()
#
# # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
#
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 1.
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 2.
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 3.
# ```

# ```python
# # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å global –Ω—É–∂–Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
# # –û–±—ã—á–Ω–æ –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# def f(count):
#     count += 1
#     print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ {count}.")
#     return count
#
#
# count_f = 0
# count_f = f(count_f)
# count_f = f(count_f)
# count_f = f(count_f)
#
# # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 1.
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 2.
# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ 3.
# ```

# ```python
# # –ü—Ä–∞–≤–∏–ª–æ Python –æ global
# # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ global –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç) –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ‚Äî global –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
#
# # click() ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–∞ 1;
# # get_count() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞.
#
#
# def click():
#     global count
#     count += 1
#
#
# def get_count():
#     return count
#
#
# count = 0
# ```

# –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å print
# ### **–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è `return` –∏ `print` –≤ —Ñ—É–Ω–∫—Ü–∏–∏?** üêç
#
# #### **1. `print()` ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å**
# - –≠—Ç–æ **–≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω**, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è **–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç** —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
# - –£–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# - **–ü—Ä–∏–º–µ—Ä:**
#   ```python
#   def greet(name):
#       print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")  # –ü–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
#
#
#   greet("–ê–Ω–Ω–∞")  # –í—ã–≤–µ–¥–µ—Ç: "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞!"
#   ```
#   **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?**
#   - –§—É–Ω–∫—Ü–∏—è `greet()` –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–æ **–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç** –µ–≥–æ.
#   - –ï—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –ø–æ–ª—É—á–∏–º `None`:
#     ```python
#     result = greet("–ê–Ω–Ω–∞")  # result = None (–ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç return)
#     ```
#
# ---
#
# #### **2. `return` ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏**
# - –§—É–Ω–∫—Ü–∏—è **–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç** —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ **–æ—Ç–¥–∞—ë—Ç** –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
# - –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ `print()`.
# - **–ü—Ä–∏–º–µ—Ä:**
#   ```python
#   def add(a, b):
#       return a + b  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É
#
#
#   result = add(3, 5)  # result = 8
#   print(result)  # –í—ã–≤–µ–¥–µ—Ç: 8
#   ```
#   **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?**
#   - –§—É–Ω–∫—Ü–∏—è `add()` **–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç** —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ **–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç** –µ–≥–æ.
#   - –ú—ã –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ `result` –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ.
#
# ---
#
# ### **–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `print`, –∞ –∫–æ–≥–¥–∞ `return`?**
#
# | **`print()`** | **`return`** |
# |--------------|-------------|
# | –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ **–ø–æ–∫–∞–∑–∞—Ç—å** —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. | –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ **–ø–µ—Ä–µ–¥–∞—Ç—å** —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. |
# | –ü—Ä–∏–º–µ—Ä: –≤—ã–≤–æ–¥ –º–µ–Ω—é, —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö. | –ü—Ä–∏–º–µ—Ä: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö. |
# | **–ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç** —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. | **–°–æ—Ö—Ä–∞–Ω—è–µ—Ç** —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. |
# | ```python<br>def show(x):<br>    print(x)<br><br>show(5)  # –í—ã–≤–µ–¥–µ—Ç 5<br>a = show(5)  # a = None<br>``` | ```python<br>def get(x):<br>    return x<br><br>get(5)  # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–¥–µ—Ç<br>a = get(5)  # a = 5<br>``` |
#
# ---
#
# ### **–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è**
#
# #### **–° `print()` (—Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥)**
# ```python
# def say_hello(name):
#     print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
#
#
# say_hello("–ú–∞–∫—Å")  # –í—ã–≤–µ–¥–µ—Ç: "–ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å!"
# ```
# - **–ù–µ–ª—å–∑—è** —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
#   ```python
#   message = say_hello("–ú–∞–∫—Å")  # message = None (–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ)
#   ```
#
# #### **–° `return` (–≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è)**
# ```python
# def create_hello(name):
#     return f"–ü—Ä–∏–≤–µ—Ç, {name}!"
#
#
# message = create_hello("–ú–∞–∫—Å")  # message = "–ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å!"
# print(message)  # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å
# ```
# - **–ú–æ–∂–Ω–æ** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ:
#   ```python
#   upper_message = message.upper()  # "–ü–†–ò–í–ï–¢, –ú–ê–ö–°!"
#   ```
#
# ---
#
# ### **–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ**
# - **`print`** ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ **–ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å** –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
# - **`return`** ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ **—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º** —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–ª—å—à–µ.

# ### –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ id
# **–ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω–∏—Ç—Å—è –ª–∏ –µ–µ id?**
# –í Python **`id` –æ–±—ä–µ–∫—Ç–∞** ‚Äî —ç—Ç–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –ø–∞–º—è—Ç–∏. –ü—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—ë `id` **–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è**, –Ω–æ —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∞–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
#
# ### 1. **–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ (immutable) —Ç–∏–ø—ã** (—á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏)
# –ü—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è **—Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç**, –∏ `id` –º–µ–Ω—è–µ—Ç—Å—è.
#
# #### –ü—Ä–∏–º–µ—Ä —Å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (`int`):
# ```python
# x = 10
# print(id(x))  # –ù–∞–ø—Ä–∏–º–µ—Ä, 140735849467792
#
# x = 20  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
# print(id(x))  # –ù–æ–≤—ã–π id, –Ω–∞–ø—Ä–∏–º–µ—Ä, 140735849468112
# ```
# **–í—ã–≤–æ–¥:** `id` –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ `10` –∏ `20` ‚Äî —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.
#
# #### –ü—Ä–∏–º–µ—Ä —Å–æ —Å—Ç—Ä–æ–∫–æ–π (`str`):
# ```python
# s = "hello"
# print(id(s))  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2101674847408
#
# s = "world"  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
# print(id(s))  # –î—Ä—É–≥–æ–π id
# ```
# **–í—ã–≤–æ–¥:** `id` –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã.
#
# ---
#
# ### 2. **–ò–∑–º–µ–Ω—è–µ–º—ã–µ (mutable) —Ç–∏–ø—ã** (—Å–ø–∏—Å–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞)
# –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç **–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ `append()`), `id` –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º. –ù–æ –µ—Å–ª–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å **–Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç**, `id` –∏–∑–º–µ–Ω–∏—Ç—Å—è.
#
# #### –ü—Ä–∏–º–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º (`list`):
# ```python
# lst = [1, 2, 3]
# print(id(lst))  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2101674847360
#
# lst.append(4)  # –ò–∑–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π
# print(id(lst))  # –û—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ!
#
# lst = [5, 6, 7]  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
# print(id(lst))  # –ù–æ–≤—ã–π id
# ```
# **–í—ã–≤–æ–¥:**
# - `id` –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ (`append`, `remove` –∏ —Ç. –¥.).
# - `id` –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ **–ø–æ–ª–Ω–æ–º –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏**.
#
# ---
#
# ### 3. **–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫)**
# Python –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å, –∫—ç—à–∏—Ä—É—è –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (–æ–±—ã—á–Ω–æ –æ—Ç `-5` –¥–æ `256`) –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏.
#
# #### –ü—Ä–∏–º–µ—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª:
# ```python
# a = 100
# b = 100
# print(id(a) == id(b))  # True (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç)
#
# a = 1000
# b = 1000
# print(id(a) == id(b))  # False (—Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
# ```
#
# #### –ü—Ä–∏–º–µ—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫:
# ```python
# s1 = "hello"
# s2 = "hello"
# print(id(s1) == id(s2))  # True (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
#
# s1 = "a very long string that won't be cached"
# s2 = "a very long string that won't be cached"
# print(id(s1) == id(s2))  # False (—Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
# ```

# +
# 1


def print_hello(name: str) -> None:
    """Return Greeting statement."""
    print(f"Hello, {name}!")


# +
# 2


def gcd(number1: int, number2: int) -> int:
    """Calculate GCD."""
    while number2:
        number1, number2 = number2, number1 % number2
    return number1


# +
# 3


def number_length(number_input: int) -> int:
    """Return input length."""
    return len(str(abs(number_input)))


# -

# #### 4
# ```python
# def take_small(money):
#     spisok = [i1 for i1 in money if i1 < 100]
#     return spisok
# ```

# #### 5
#
# ```python
# count = 0
#
#
# def click():
#     global count
#     count += 1
#
#
# def get_count():
#     return count
# ```

# #### 6
# ```python
# def move(player, num):
#     global number
#     if player == "–ü–µ—Ç—è":
#         number += num
#     else:
#         number -= num
#     return number
#
#
# def game_over():
#     if number > 0:
#         return "–ü–µ—Ç—è"
#     elif number < 0:
#         return "–í–∞–Ω—è"
#     else:
#         return "–ù–∏—á—å—è"
#
#
# number = 0
# ```

# #### 7
# ```python
# from itertools import chain
#
#
# def max2D(matrix):
#     return max(list(chain.from_iterable(matrix)))
# ```

# #### 8
# ```python
# def fragments(numbers):
#     union_spisok = []
#     start_index = 0
#     for index, num in enumerate(
#         numbers[1:], 1
#     ):  # –≤–∞–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å 2–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä "1", —Ç–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 0, –∞ –Ω–∞–¥–æ —Å 1
#         if num <= numbers[index - 1]:
#             end_index = index
#             nested_spisok = numbers[start_index:end_index]
#             print(nested_spisok)
#             union_spisok.append(nested_spisok)
#             start_index = index
#     # –¥–æ–≤–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
#     nested_spisok = numbers[start_index:]
#     union_spisok.append(nested_spisok)
#     return union_spisok
# ```

# #### 9
#
#
# ```python
# def month(mn: int, lang: str) -> str | None:
#     """Return month in specified locale."""
#     months = {
#         "en": [
#             "January",
#             "February",
#             "March",
#             "April",
#             "May",
#             "June",
#             "July",
#             "August",
#             "September",
#             "October",
#             "November",
#             "December",
#         ],
#         "ru": [
#             "–Ø–Ω–≤–∞—Ä—å",
#             "–§–µ–≤—Ä–∞–ª—å",
#             "–ú–∞—Ä—Ç",
#             "–ê–ø—Ä–µ–ª—å",
#             "–ú–∞–π",
#             "–ò—é–Ω—å",
#             "–ò—é–ª—å",
#             "–ê–≤–≥—É—Å—Ç",
#             "–°–µ–Ω—Ç—è–±—Ä—å",
#             "–û–∫—Ç—è–±—Ä—å",
#             "–ù–æ—è–±—Ä—å",
#             "–î–µ–∫–∞–±—Ä—å",
#         ],
#     }
#     return months[lang][mn - 1] if 1 <= mn <= 12 and lang in months else None
# ```

# +
# 10


def split_numbers(numbers_string: str) -> tuple[int, ...]:
    """Return tuple of split numbers."""
    return tuple(int(nmb) for nmb in numbers_string.split())


# -

# #### 11
# ```python
# def find_mountains(heights):
#     mountains = tuple()
#     for index, h1 in enumerate(heights[1:-1], 1):
#         if heights[index - 1] < h1 and heights[index + 1] < h1:
#             mountains = mountains + (index + 1,)
#     return mountains
# ```

# #### 12
# ```python
# def find_mountains(data):
#     mountains = []
#     for index_r, row in enumerate(data[1:-1], 1):
#         for index_c, col in enumerate(row[1:-1], 1):  # —Ç–∫ –∫—Ä–∞—è –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –≥–æ—Ä—ã
#             if row[index_c - 1] < col and row[index_c + 1] < col:
#                 if (
#                     data[index_r - 1][index_c] < col
#                     and data[index_r + 1][index_c] < col
#                 ):
#                     if (
#                         data[index_r - 1][index_c - 1] < col
#                         and data[index_r - 1][index_c + 1] < col
#                     ):
#                         if (
#                             data[index_r + 1][index_c - 1] < col
#                             and data[index_r + 1][index_c + 1] < col
#                         ):
#                             mountains.append((index_r + 1, index_c + 1))
#     return tuple(mountains)
# ```

# +
# 13


outputs: list[str] = []


def modern_print(line: str) -> None:
    """Print only new lines."""
    if line not in outputs:
        outputs.append(line)
        print(line)


# +
# 14


def can_eat(knight: tuple[int, int], piece: tuple[int, int]) -> bool:
    """Determine if a knight can capture a given piece in a game of chess."""
    x1_c, y1_c = knight
    x2_c, y2_c = piece
    return (abs(x1_c - x2_c), abs(y1_c - y2_c)) in [(2, 1), (1, 2)]


# -

# #### 15
# ```python
# def get_dict(text):
#     text_dict = dict()
#     for t1 in text.split(";"):
#         text_dict[t1.split("=")[0]] = t1.split("=")[1]
#     return text_dict
# ```

# +
# 16

# fmt: off
def is_palindrome(
    value: int | str | list[int] | tuple[int, ...] | float
) -> bool:
    """Check if input value is a palindrome."""
    if isinstance(value, (int, str, list, tuple)):
        value_str = str(value) if isinstance(value, int) else value
        return value_str == value_str[::-1]
    return False
# fmt: on

# +
# 17


def is_prime(nmb: int) -> bool:
    """Check if input value is prime."""
    if nmb < 2:
        return False
    for i in range(2, int(nmb**0.5) + 1):
        if nmb % i == 0:
            return False
    return True


# +
# 18


def merge(tuple1: tuple[int, ...], tuple2: tuple[int, ...]) -> tuple[int, ...]:
    """Merge and return two tuples."""
    result = []
    i_val, j_val = 0, 0
    for _ in range(len(tuple1) + len(tuple2)):
        if i_val < len(tuple1) and (
            j_val >= len(tuple2) or tuple1[i_val] < tuple2[j_val]
        ):
            result.append(tuple1[i_val])
            i_val += 1
        else:
            result.append(tuple2[j_val])
            j_val += 1
    return tuple(result)


# -

# #### 19
# ```python
# def swap(a, b):
#     a[:], b[:] = b[:], a[:]
#     return a, b
# ```

# #### 20
# ```python
# def int_to_roman(num):
#     val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
#     syb = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
#     roman_num = ""
#     i = 0
#     while num > 0:
#         for _ in range(num // val[i]):
#             roman_num += syb[i]
#             num -= val[i]
#         i += 1
#     return roman_num
#
#
# def roman(a, b):
#     sum_ab = a + b
#     roman_a = int_to_roman(a)
#     roman_b = int_to_roman(b)
#     roman_sum = int_to_roman(sum_ab)
#     return f"{roman_a} + {roman_b} = {roman_sum}"
# ```
