"""This notebook contains my answers to the questions."""

# ## Список вопросов по работе с Issues на GitHub
# #### Общие вопросы
# 1. Что такое Issues на GitHub и для чего они используются?
# Ответ: Issues используются для того, чтобы запросить объяснение кода, чтобы
# сообщать об ошибках в коде, чтобы
# 2. Чем Issues отличаются от других инструментов управления задачами?
# Ответ: Играет важную роль в экосистеме GitHub т.к. позволяет работать с
# коммитами, пулреквестами. Позволяет выбирать компоненты(поля), например
# дедлайны.
# 3. Какие основные компоненты (поля) есть у каждого Issue?
# Ответ: assignees, labels, projects, milestone, development
# #### Создание Issues
# 4. Как создать новое Issue в репозитории?
# Ответ: Если достаточно прав и Issues включены в репозитории главным
# maintainer-ом, тогда в репозитории нажимаем Issues, new issue, заполняем
# тайтл, дескрипшн, и компоненты
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего
# понимания задачи?
# Ответ: Краткое описание, шаги для воспроизведения, ожидаемое и фактическое
# поведение, окружение зависимости, а также логи ошибок.
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# Ответ: bug (ошибка или баг), documentation (документация), help wanted
# (требуется помощь), invalid (некорректный ишьюс), wontfix (работа над ишьюсом
# приостановлена), good first issue (ишьюс, подходящий для новичков),
# enhancement (улучшение, новая фича)
# 7. Как прикрепить Assignees (ответственных) к Issue?
# Ответ: В разделе issues в нашем issue нажимаем на поле assignees, выбираем
# ответственного.
# #### Работа с Issues
# 8. Как использовать Labels для классификации задач?
# Ответ: Выбирая при создании issues Labels, можно понимать, к каким задачам
# относится issues. Например, можно понимать, что отдельно взятый issue связан
# с задачами документации, если на нём стоит label documentation, а другой
# отдельно взятый issue связан с исправлением бага, если на нём стоит label
# bug.
# 9. Для чего нужен Milestone, и как связать его с Issue?
# Ответ: Milestone нужен для классификации и отслеживания issues, а также
# выполняет функцию дедлайнов. Можно следить за процентом выполнения и
# количеством открытых и закрытых issues в рамках отдельно взятого milestone
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
# Ответ: Для этого необходимо в описании пул реквеста написать ключевое слово
# closes и выбрать номер (#) репозитория, или ссылку, если, например, нужно
# отослаться на issue другого репозитория. Если так сделать, то после слияния
# issue автоматически закроется
# 11. Как добавить комментарий к существующему Issue?
# Ответ: Используя окно "add a comment"
# #### Закрытие и завершение Issues
# 12. Как закрыть Issue вручную?
# Ответ: Заходим на нужный issue, нажимаем close issue
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или
# пул-реквесте? Как это сделать?
# Ответ: Да, в коммите в тайтле пишем (номер или ссылка на ишьюс), в теле
# коммита пишем ключевое слово closes (номер или ссылка на ишьюс), в пул
# реквесте в описании пишем closes (номер или ссылка на ишьюс)
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Ответ: В репозитории заходим в раздел issues, closed, выбираем нужный,
# нажимаем reopen issue
# #### Фильтрация и поиск
# 15. Как найти все открытые или закрытые Issues в репозитории?
# Ответ: В репозитории заходим в раздел issues, и в панели можно выбрать open
# или closed. По умолчанию обычно стоит open. Также можно в поиске написать
# is:issue state:open или is:issue state:closed
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или
# другим критериям?
# Ответ: Во вкладке issues есть панель с фильтрами на выбор, либо же опять
# используем поиск с нужными нам ключевыми словами
# 17. Как сортировать Issues по приоритету, дате создания или другим
# параметрам?
# Ответ: Во вкладке issues используем панель фильтров, для приоритета
# используем milestones, для даты создания и других параметров самая правая
# кнопка в панели newest
# #### Интеграции и автоматизация
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
# Ответ: C помощью subscribe зайдя в конкретный issue, или же заходим в
# репозиторий и там можно настроить уведомления
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
# Ответ: Projects - инструмент для управления задачами, отслеживания работы
# над issues and Pull requests. Связать issue с project можно открыв issue, в
# панели справа нажать projects и выбрать нужный.
# 20. Какие сторонние инструменты можно использовать для автоматизации работы
# с Issues (например, боты, Webhooks)?
# Ответ: Probot, Github Actions, Telegram через Webhooks, автосвязывание
# карточек Jira и GitHub Integration
# #### Коллаборация
# 21. Как упомянуть другого пользователя в комментарии к Issue?
# Ответ: @имя_пользователя
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
# Ответ: Открываем файл, по которому нам нужно уточнить данные, затем с
# помощью shift выделяем область кода, которая нас интересует, затем нажимаем
# copy permalink, создаем issue, вставляем эту ссылку на код в описании, пишем
# информативный тайтл что мы хотим уточнить и в каком файле.
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
# Ответ:
# -Если у нас есть дублирующий issue, ставим метку duplicate, оставляем в
# описании ссылку на актуальный issue и закрываем его. В основном ишьюсе
# желательно указать ссылку на дупликат.
# -Если же issue неактуален, тогда ставим метку wontfix и закрываем. Также
# желательно написать причину в комментарии.
# #### Практические аспекты
# 24. Как использовать шаблоны для создания Issues?
# Ответ: нажимаем на new issue, из списка шаблонов выбираем нужный. Обычно там
# бывают bug report, feature request, documentation.
# 25. Что такое Linked Issues, и как создать связь между задачами?
# Ответ: Linked Issues - механизм в GitHub для задавания отношений между
# issues, также с Pull requests. Чтобы создать связь, заходим на issue и
# выбираем в панель выбираем тип связи.
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью
# Issues?
# Ответ: статус выполнения, время от создания до закрытия, прогресс
# milestones, распределения по меткам.
# 27. Какие best practices рекомендуются при работе с Issues в команде?
# Ответ:
# - Использовать шаблоны issues, пользоваться компонентами(полями), такими,
# как assignees, labels, projects, milestone для удобства, дедлайнов,
# отслеживания прогресса. Пользоваться обсуждениями.
# - Использовать #open для отслеживания открытых пулреквестов в командном чате
# в мессенджере. При принятии пул реквеста писать accepted, при завершении
# closed, и после того, как создатель пул реквеста увидел, что пулреквест
# закрыли, менять тег на #closed.
# - Коммиты связывать с issues, в тайтле писать в скобках (ссылку или номер
# ишьюса), в описании closes ссылка_или_номер_ишьюса. Пул реквесты желательно
# тоже связывать, для этого в описании пишем closes ссылка_или_номер_ишьюса.
