# %% [markdown]
# ## Ответы на вопросы по [TASK] issues #2  
#
# #### Общие вопросы
#
# 1. Что такое Issues на GitHub и для чего они используются?  
# Это инструмент управления задачами, встроенный в репозиторий, для создания/планирования, отслеживания, обсуждения задач в репозитории, а также для любых других задач  связанных с проектом, от создания новых функций, до обсуждения новых идей, а также отчетов и устранения багов... и тд.
#
# 2. Чем Issues отличаются от других инструментов управления задачами?
# Этот инструмент встроенный в репозиторий, что позволяет связывать задачи с PR и коммитами, а также настраивать автоматизацию, типа автоматическое закрытие issues при мердже. Также можно добавлять метки, что позволяют и маркировать и сортировать ишьюсы, также существуют возможность создавать шаблоны, что рекомендуется для качественного заполнения.  
#
# 3. Какие основные компоненты (поля) есть у каждого Issue?
# title,  
# discription,  
# labels,  
# assignees,  
# type,  
# milestone,  
# project,  
# также системное поле status - open, close, также после создания появляется timeline - хронологию: кто что сделал (назначил, закрыл, упомянул и т.д.).
#
# #### Создание Issues  
#   
# 4. Как создать новое Issue в репозитории?  
# Если мы говорим про создание через веб-интерфейс, то перейди на главную страницу нужного репозитория, далее вверху нажми вкладку 'issues', далее нажимаем на зеленую кнопку 'New issue' . Далее заполнянем title, description. При необходимости добавляем labels, назначаем ответственных (assigness), также можно выбрать milestone и добавить в проект.  
# Также существует возможность создать issues используя GitHub CLI (через терминал), из проекта, из комментария в существующем ишьюс или ПР, из обсуждения, из диапазона строк кода, используя URL- адрес с параметрами.  
#
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?  
# Должно быть детальное и подробное описание ишьюса, это важно.  1. Контекст — где возникла проблема или к чему относится предложение (включая ссылки на код при необходимости). 2. Шаги для воспроизведения — чёткая последовательность действий, если это баг. 3. Ожидания — как система должна работать. 4. Фактическое поведение — что происходит на самом деле. 5. Среда/версия — ОС, браузер, версия продукта и т.д. 6. Дополнительные детали — сообщения об ошибках, скриншоты, логи, stack trace. 7. Предлагаемое решение или обоснование — если это запрос функции или улучшение. 8. Приоритет — насколько задача критична (High, Medium, Low). 9. Критерии приёмки — что считается завершением задачи. 10. Связанные задачи — ссылки на другие issues или PR. 11. Подзадачи — чеклист, если задача состоит из этапов.  
#
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?  
# Владелец репозитория, может создавать любые теги с любыми названиями и цветами. Но есть стандартные такие как:  
# bug (ошибка, баг),  
# enhancement (улучшение, новая функция),  
# documentation (документация),  
# good first issue (когда задача подходит для новичков),  
# help wanted (нужна помощь),  
# duplicate (схожие, повторяющееся issue),  
# question (есть вопросы),  
# invalid (не актуально),  
# wontfix (далее работа над ишьюсем продолжена не будет)  
#
# 7. Как прикрепить Assignees (ответственных) к Issue?
# При создании ишьюса, можно выбрав поле Assignees выбрать из списка участников репозитория. Также могут быть назначены или изменены после создания ишьюса, открыв его справа найти поле и также в списке выбрать ответственных. Есть еще способы через  github CLI(терминал) и с помощью параметров в URL-адресе.  
#   
# #### Работа с Issues
#
# 8. Как использовать Labels для классификации задач?  
# Всё тоже самое что и при назначении ответсвенных. Также выбрав поле Labels в списке метко выбрать нужный. Можно и при создании ишьюса, и в уже существующем, применять/отменять. Есть еще способы через  github CLI(терминал) и с помощью параметров в URL-адресе.  
#
# 9. Для чего нужен Milestone, и как связать его с Issue?  
# Milestone используется для объединения связанных ишьюс и ПР, с целью лучшего отслеживания их прогресса определённой цели или релиза. Сначала нужно создать Milestone, указав тайтл, дескрипшн и при необходимости дату завершения. Далее связываем ишьюс с Milestone через поле Milestone в правой панели соответствующего Issue, нажимае на нужное поле и в списке выбираем необходимую веху. Можно и в новом ишьюсе связывать, также через поле.Это позволяет отслеживать процент выполнения и количество открытых/закрытых ишьюс в рамках одного Milestone.
#
# 10. Как привязать Issue к пул-реквесту (Pull Request)?  
# Можно с помощью упоминания в описание PR (#номер_ишьюса), можно с ключевыми словами (типа closes), что позволяет автоматически закрыть ишьюс после слиянии PR. Также это можно сделать через панель в ПР.  
#
# 11. Как добавить комментарий к существующему Issue?  
# внизу есть окно 'add a comment'  
#   
# #### Закрытие и завершение Issues
#   
# 12. Как закрыть Issue вручную?  
# Переходим в нужный репозиторий, открываем через вкладку ишьюс тот что необходимо закрыть, внизу находим кнопку close issue.  
#
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?  
# Да, конечно, автоматическое закрытие ишьюса может произойти при слиянии ПР, когда ПР в описание содержит Closes #123, Fixes #12, либо когда closes #123 содержиться в описание коммита (git commit -m "Починили баг конвертации валюты. Fixes #123"), но этот коммит обязательно должен опасть в ПР.  
#
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?  
# нажимаем на вкладку ишьюс, далее выбираем вкладку closed, находим нужные ишьюс, кликаем по нему, находим кнопку reopen issue и нажимаем.
#
# #### Фильтрация и поиск
#
# 15. Как найти все открытые или закрытые Issues в репозитории?  
# во вкладе ишьюс в верхней части есть разделы open и closed, также можно в поисковое строке выше с помощью фильтров is: open, is: closed. (можно комбинировать) 
#
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?  
# Также во вкладке ишьюс есть выпадающие меню с фильтрами, простой интуитивный способ, либо через поисковую строку вручную вводить фильтры, нужно придерживаться правильного синтаксиса (ключ:значение), если значение состоит из нескольких слов, заключаем его в скобки.  
#   
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?  
# Если по приоритету то через выпадающее меню labels (обязательно нужно создать такую метку, она не стандартная), если про другие параметры по выбираем справа newest и в выпадающем меню сортируем уже по нужному параметру. также это возможно через поисковую строку.  
#   
# #### Интеграции и автоматизация
#   
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?  
# можно настроить уведомления в репозитории, с помощью кнопки watch, либо в подписаться на конкретный ишьюс, кнопка subscribe.  
#
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?  
# Это инструмент по планированию и управлению множеством задач для достижения цели, поддерживает визуализацию (таблицы, доски). Можно связать из ишьюса, справа будет поле Projects, в нем нужно выбрать необходимый проект. Также можно связать из самого проекта, нажимаем "+ Add item" далее "Add item from repository", далее следуем инструкции выбираем репозиторий и нужные ишьюс. Также возможон создать новый ишьюс в самом проекте.  
#
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?  
# Probot, Stale Bot, Zapier (или аналогичный Make / Integromat), Slack / Discord / Telegram через Webhooks.  
#   
# #### Коллаборация
#   
# 21. Как упомянуть другого пользователя в комментарии к Issue?  
# @username  
#
# 22. Как запросить дополнительные данные или уточнения у автора Issue?  
# открываем нужный файл, выделяем диапазон интересующих строк (нажимаем на первую строку диапазона, удерживая шифт нажимаем на последнюю строку диапазона), нажав ... выбираем copy permalink. Далее создаем New issue и вставляем ссылку в дескрипшен, а в тайтле просим уточнит нужную информацию указывая файл.  Также можно вести комуникацию через стороние мессенджеры, копируя тайтл и нужные ссылки на ишьюс.  
#
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?  
# Можно закрыть ишьюс, обьяснив причину неактуальности в комментарии.  
# Если есть ишьюсы на обьединения, при необходимости добавить метку дубликат, в повторяющемся/схожем ишьюсе в комментраиях оставить обьяснения и обязательно добавить номер/ссылку на основной ишьюс (#456), дубликат закрыть. В основном также оставить комментарий, что обьединено с ишьюс #123 (так как закрыт как дубликат).
# Если кратко:  
# В дубликате в коментариях пишем - дубликат ишьюса #456, далее все там.  
# В основном пишем - обьединено с #123 так как повторяющейся смысл.  
#   
# #### Практические аспекты
#   
# 24. Как использовать шаблоны для создания Issues?  
# при нажатие new issue, появиться список существующих шаблонов, выбираем то что нужен  
#   
# 25. Что такое Linked Issues, и как создать связь между задачами?  
# это связанные ишьюс, самый простой способ связать обсуждали выше, также можно сделать через панель в самом ишьюсе, соответсвенно указывая тип связи.  
#
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?  
# статус выполнение, прогресс по вехе, состояние подзадач ...  
#
# 27. Какие best practices рекомендуются при работе с Issues в команде?  
# При работе с Issues в команде рекомендуется использовать шаблоны для стандартизации описания задач, чётко формулировать заголовки и описания, назначать ответственных (Assignees), использовать метки (Labels) для класификации и легкой фильтрации, использовать Milestones и Projects для отслеживания прогресса, визуализации. Дискашн использовать для обсуждения.  
# Также для удобвтса можно разбивать крупные задачи на подзадачи через Sub-issues, завершение задачи обязательно фиксируется закрытием ишьюса, можно автоматически через связывание с ПР с помощью ключевых слов (например, closes #123), оставлять понятные комментарии и обновления, а также применять встроенные автоматизации. Важно быть в контакте с командой, и оставлять теги в коментариях при ключевых действиях.
