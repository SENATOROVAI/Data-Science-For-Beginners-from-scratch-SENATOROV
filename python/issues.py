# %% [code]
"""Ответы на вопросы по теме: "Issues"."""

# %% [markdown]
# Общие вопросы
# Что такое Issues на GitHub и для чего они используются?
# Чтобы объяснить часть кода, пофиксить баг, улучшить код

# %% [markdown]
# Чем Issues отличаются от других инструментов управления задачами?
# Тем что привязаны к коммиту

# %% [markdown]
# Какие основные компоненты (поля) есть у каждого Issue?
# Title, Description, Type, Priority, Assignee, Milestone

# %% [markdown]
# Создание Issues
# Как создать новое Issue в репозитории?
# Issues >> New Issue >> Fill Title, Description, Assignee, Milestone, Type >> Create Issue
# Запостить в телеграм ссылку на ишью + #issue #open @name на ком ошибка

# %% [markdown]
# Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# Описать проблему, expected result, если баг то шаги воспроизведения

# %% [markdown]
# Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# bug, question, enhancement, documentation, help wanted, wontfix, high-priority, frontend, mobile

# %% [markdown]
# Как прикрепить Assignees (ответственных) к Issue?
# В правой боковой панели - Assignees, ввести имя, Submit

# %% [markdown]
# Работа с Issues
# Как использовать Labels для классификации задач?
# Для бага, Для новой функции, Выделение срочных задач (critical, high-priority)

# %% [markdown]
# Для чего нужен Milestone, и как связать его с Issue?
# Для отслеживания дедлайна

# %% [markdown]
# Как привязать Issue к пул-реквесту (Pull Request)?
# Зайти в этот репозиторий -- создать новый ишью -- Submit

# %% [markdown]
# Как добавить комментарий к существующему Issue?
# Перейти на вкладку Ишьюс -- оставить комент, вставить #ишьюса, Comment

# %% [markdown]
# Закрытие и завершение Issues
# Как закрыть Issue вручную?
# Добавьте в комментарий ключевое слово Close, Closes #issue
# Второй способ на вкладке Issue click Close button

# %% [markdown]
# Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
# Да. Копировать полностью тайтл ишьюса, в круглых скобочках #issue. In description: Closes #issue. Click the Sign off and commit changes button. Зайти в телеграм, reply on message Closed

# %% [markdown]
# Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Через интерфейс, Reopen issue.
# Через Pull Request: Откройте новый PR, Свяжите его с тем же Issue, добавив в описание: Reopens #123, Или отредактируйте старый PR:
# Удалите ключевые слова Closes/Fixes из его описания → Issue автоматически откроется.

# %% [markdown]
# Фильтрация и поиск
# Как найти все открытые или закрытые Issues в репозитории?
# Откройте вкладку Issues
# Фильтр по статусу.
# Или
# через поисковую строку Issues: is open

# %% [markdown]
# Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
# Перейдите в репозиторий >> Issues >> нажмите Filters по меткам, исполнителям или другим критериям

# %% [markdown]
# Как сортировать Issues по приоритету, дате создания или другим параметрам?
# Перейдите в репозиторий >> Issues >> select Milestone, Labels ..

# %% [markdown]
# Интеграции и автоматизация
# Как настроить автоматические уведомления о новых или изменённых Issues?
# В Notification Settings выберите:
#
# Email или Web-уведомления.
#
# Фильтры: Participating (только упомянутые) или All Activity.
# ИЛИ
# Откройте репозиторий на GitHub, за которым хотите следить.
#
# В верхней правой части страницы (рядом с кнопками Star и Fork) найдите выпадающее меню Watch.

# %% [markdown]
# Что такое Projects в контексте GitHub, и как связать их с Issues?
# GitHub Projects — это гибкий инструмент для управления задачами в формате канбан-досок или таблиц, который помогает организовать работу над Issues, Pull Requests и другими элементами проекта. Связь между Projects и Issues позволяет визуализировать прогресс, планировать спринты и отслеживать статусы задач.
# Как связать Projects с Issues
# Способ 1: Через интерфейс Projects
# Создайте проект:
#
# В репозитории или организации → вкладка Projects -- New Project.
#
# Выберите тип: Table (рекомендуется) или Board.
#
# Добавьте Issues в проект:
#
# Нажмите + Add item → выберите Issue → начните вводить номер или название Issue.
#
# Или перетащите Issue из списка в нужный столбец.
# Способ 2: Через карточку Issue
# Откройте Issue → в правой боковой панели найдите Projects.
#
# Выберите проект → укажите статус (столбец).

# %% [markdown]
# Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# CI/CD-интеграции, боты, Jira, Отправки уведомлений в Telegram/Discord при новых Issues

# %% [markdown]
# Коллаборация
# Как упомянуть другого пользователя в комментарии к Issue?
# Assignee

# %% [markdown]
# Как запросить дополнительные данные или уточнения у автора Issue?
# Написать комент и исп @username, чтобы автор получил уведомление

# %% [markdown]
# Что делать, если Issue неактуально или его нужно объединить с другим?
# Закройте Issue с пояснением (@username, спасибо за Issue! Проблема больше неактуальна, так как: 
# - Баг был исправлен в PR #123.  
# - Функциональность устарела.  
# Закрываю задачу. Если проблема возникнет снова, дайте знать! )
# Если Issue нужно объединить с другим:
# Укажите связанный Issue
# Напишите комментарий: @username, это Issue дублирует #456. Продолжим обсуждение там.
# Закройте текущий Issue:
#
# На GitHub/GitLab: Используйте ключевое слово Duplicate of #456.
#
# В Jira: Укажите связь через Linked Issues → Duplicate.
#
# Добавьте метку duplicate.

# %% [markdown]
# Практические аспекты
# Как использовать шаблоны для создания Issues?
# Создание шаблонов
# В репозитории создайте папку .github/ISSUE_TEMPLATE/.
#
# Добавьте файлы шаблонов в формате .md. Например:
#
# bug_report.md для багов.
#
# feature_request.md для новых функций.
#
# Пример шаблона для багов (bug_report.md)

# %% [markdown]
# Что такое Linked Issues, и как создать связь между задачами?
# Связи между задачами: Например, одна задача блокирует другую или является её частью.
# Через комментарий:
# Упомяните связанную задачу в описании или комментарии
# Через интерфейс:
#
# Откройте Issue → в правой боковой панели найдите Linked Issues.

# %% [markdown]
# Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# is:open, is:closed
# assignee:username
# author
# label
# Перейдите в репозиторий → вкладка Insights → Contributors.
#
# Здесь можно увидеть активность по Issues, PR и коммитам.

# %% [markdown]
# Какие best practices рекомендуются при работе с Issues в команде?
# Создание и оформление Issue
# Четкий заголовок – Должен быть кратким и понятным, отражать суть задачи или проблемы.
# Подробное описание – Используйте Markdown, списки, ссылки и скриншоты, чтобы сделать описание максимально информативным.
# Определение ожиданий – Укажите четкие критерии выполнения (Definition of Done).
# Использование шаблонов – GitHub поддерживает Issue Templates, которые помогают стандартизировать создание задач.
# Использование метрик, майлстоунов, асайни
# Ссылайтесь на коммиты и PR – Используйте #номер_issue в коммитах и pull request'ах, чтобы автоматически связывать их с задачей.
# Добавляйте итоговый комментарий – Опишите, как была решена проблема, чтобы коллеги могли понять, что изменилось.