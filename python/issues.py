"""issues."""

# # Общие вопросы
# 1. Что такое Issues на GitHub и для чего они используются?
# - Это встроенная система отслеживания ошибок, управления задачами и обсуждения проектов
# 2. Чем Issues отличаются от других инструментов управления задачами?
# - Отличительной чертой является интеграция с git-операциями, например, коммиты могут автоматически закрывать задачи
# 3. Какие основные компоненты (поля) есть у каждого Issue?
# - title (заголовок), body (описание), assignees (исполнители), labels (метки), projects (проекты), milestone (дедлайны)
# # Создание Issues
# 4. Как создать новое Issue в репозитории?
# - Issues -> New issue
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# - Рекомендуется указать проблему, шаги для её воспроизведения, ожидаемый и фактический результат, контекст
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# - Github позволяет создавать произвольные теги, но стандартными считаются: bug, documentation, duplicate, enhancement, good first issue, help wanted, invalid, question, wontfix
# 7. Как прикрепить Assignees (ответственных) к Issue?
# - Необходимо выбрать участников в одноимённой вкладке во время создания issue
# # Работа с Issues
# 8. Как использовать Labels для классификации задач?
# - Labels используется для классификации задач по типам (bug, feature и т.д.), приоритетам (high, low), категориям (documentation, testing) или статусам (in progress, needs review). Это позволяет легко фильтровать issues
# 9. Для чего нужен Milestone, и как связать его с Issue?
# - Milestone нужен для группировки Issues и Pull Requests вокруг конкретной цели версии проекта (например, "Release 2.0"), а связать его с issue можно в выпадающем окне "Milestone" в боковой панели при создании Issue
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
# - Для этого достаточно упомянуть в заголовке или описсании упомянуть номер issue с помощью ключевых слов типа Closes #X, Fixes #X, где X - номер issue
# 11. Как добавить комментарий к существующему Issue?
# - Ввести текст в текстовое поле и нажать "Comment"
# # Закрытие и завершение Issues
# 12. Как закрыть Issue вручную?
# - Нажать "Close issue"
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
# - Да, для этого необходимо указать ключевое слово и номер issue, например Closes #123
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
# - Нажать "Reopen issue"
# # Фильтрация и поиск
# 15. Как найти все открытые или закрытые Issues в репозитории?
# - Использовать фильтр is:open или is:closed в поиске
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
# - Ввести критерии в поисковую строку, например, label: bug
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
# - Использовать выпадающее меню "Sort by"
# # Интеграции и автоматизация
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
# - Через "Watch" -> "Custom" в репозитории, выбрав события для Issues
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
# - Projects - это канбан-доски для управления задачами. Связать issue можно через меню "Add to project" в боковой панели
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# - Боты (Github Actions), Webhooks, интеграции с Jira, Slack, Zapier
# # Коллаборация
# 21. Как упомянуть другого пользователя в комментарии к Issue?
# - С помощью "@username"
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
# - Оставить комментарий с вопросами, обратившись к @author
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
# - Закрыть с меткой wontfix/duplicate или ссылкой на связанную задачу
# # Практические аспекты
# 24. Как использовать шаблоны для создания Issues?
# - Создать файлы в папке .github/ISSUE_TEMPLATE
# 25. Что такое Linked Issues, и как создать связь между задачами?
# - Это связи между задачами, они создаются через комментарий с номером (например, #123) или меню "Develop" в боковой панели
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# - Время закрытия, количество открытых/закрытых задач, нагрузка на исполнителей
# 27. Какие best practices рекомендуются при работе с Issues в команде?
# - Чёткие заголовки, метки, назначение исполнителей, постановка milestone, использование шаблонов
