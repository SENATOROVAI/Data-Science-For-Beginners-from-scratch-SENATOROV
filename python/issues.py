"""Работа с Issues."""

# ## Общие вопросы
# 1) Что такое Issues на GitHub и для чего они используются?
# - это система трекинга задач, багов, улучшений и обсуждений
# в проектах на GitHub. Они помогают организовать работу над кодом,
# фиксировать ошибки и планировать новые функции.
# Основные функции:
# - Отслеживания ошибок
# - Планирования новых функций
# - Организации командной работы
# - Обсуждения идей и проблем
# 2) Чем Issues отличаются от других инструментов управления задачами?
# В отличие от универсальных инструментов вроде Jira, Trello или Asana,
# Issues тесно интегрированы с Git и GitHub, что дает уникальные
# преимущества (и ограничения).
# основные преимущества:
# - Интеграция с кодом
# - Простота vs. Гибкость
# - Социальные функции
# - Бесплатность и Open Source
# - Отсутствие сложной аналитики
# 3) Какие основные компоненты (поля) есть у каждого Issue?
# - Основные поля Title (Название) и Description (Описание)
#
# ## Создание Issues
# 1) Как создать новое Issue в репозитории?
# - Откройте вкладку Issues
# - Заполните основные поля Title и Description
# - Добавьте метки,выберете категорию Labels,назначить
# задачу определенному юзеру Assignees, выбрать
# время Milestone.
# - Свяжите с проектом
# - Отправьте Issue нажав Submit new issue
# 2) Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#  Для багов:
# - Краткое описание
# - Шаги воспроизведения
# - Ожидаемый результат
# - Фактический результат
# Для новых функций:
# - Описание идеи
# - Предлагаемое решение
# - Альтернативы
# Для задач:
# - Цель
# - Критерии выполнения
# 3) Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# - bug (ошибка или баг), documentation (документация), help wanted
# (требуется помощь), invalid (некорректный ишьюс), wontfix (работа над ишьюсом
# приостановлена), good first issue (ишьюс, подходящий для новичков),
# enhancement (улучшение, новая фича)
# 4) Как прикрепить Assignees (ответственных) к Issue?
# -В разделе issues ищем наш issue нажимаем и на поле assignees указываем
# ответственного.
#
# ## Работа с Issues
# 1) Как использовать Labels для классификации задач?
# - В Issue справа нажмите Labels -> выберите или создайте новую.
# Используются в зависимости от задачи.
# 2) Для чего нужен Milestone, и как связать его с Issue?
# - Milestone помогает организовать задачи в рамках этапа,
#  контролировать сроки и прогресс.
# - можно связать при создании/редактировании Issue
# в правой колонке выберите Milestone -> нужная веха, либо
# через коментарии в Issue
#
# 3) Как привязать Issue к пул-реквесту (Pull Request)?
# - Необходимо в описании пул реквеста написать closes и выбрать номер
# в скобках (#) репозитория.
# 4) Как добавить комментарий к существующему Issue?
# - В самом низу страницы задачи вы увидите поле для ввода текста
#  с надписью "Write a comment", просто пишем туда
# ## Закрытие и завершение Issues
# 1) Как закрыть Issue вручную?
# - Заходим на нужный issue, нажимаем close issue
# 2) Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
# - Да, в коммите в тайтле пишем (номер или ссылка на ишьюс), в теле
# коммита пишем ключевое слово closes (номер или ссылка на ишьюс), в пул
# реквесте в описании пишем closes (номер или ссылка на ишьюс)
# 3) Как повторно открыть закрытое Issue, если работа ещё не завершена?
# - В репозитории заходим в раздел issues, closed, выбираем нужный issue и нажимаем reopen issue
# ## Фильтрация и поиск
# 1) Как найти все открытые или закрытые Issues в репозитории?
# - В репозитории заходим в раздел issues, выбираем openили closed.
# По умолчанию обычно стоит open.
# - в поиске написать is:issue state:open либо is:issue state:closed
# 2) Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
# - Во вкладке issues в панели фильтрами , или поиск по ключам
# 3) Как сортировать Issues по приоритету, дате создания или другим параметрам?
# - Во вкладке issues используем панель фильтров, для приоритета
# используем milestones, для даты создания и других параметров самая правая
# кнопка в панели newest
# ## Интеграции и автоматизация
# 1) Как настроить автоматические уведомления о новых или изменённых Issues?
# - C помощью subscribe зайдя в конкретный issue
# 2) Что такое Projects в контексте GitHub, и как связать их с Issues?
# - Projects - это инструмент для управления задачами, отслеживания работы
# issues и Pull requests.
# - Связать issue с project можно открыв issue, впанели справа нажать projects и выбрать нужный.
# 3) Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# - Probot, Github Actions, Telegram через Webhooks, автосвязывание карточек Jira и GitHub Integration
# ## Коллаборация
# 1) Как упомянуть другого пользователя в комментарии к Issue?
# - @имя_пользователя
# 2) Как запросить дополнительные данные или уточнения у автора Issue?
# - Открываем файл, по которому нам нужно уточнить данные,с помощью shift выделяем
# область кода, которая нас интересует,нажимаем copy permalink, создаем issue,
# вставляем эту ссылку на код в описании, пишеминформативный тайтл что мы хотим
# уточнить и в каком файле.
# 3) Что делать, если Issue неактуально или его нужно объединить с другим?
# - ставим метку duplicate, оставляем в описании ссылку на актуальный issue
#  и закрываем его. В основнном Issue указываем ссылку на дубликат.
#  - если неактуален тогда ставим метку wontfix и закрываем.Прописываем причину
#   коментариях
# ## Практические аспекты
# 1) Как использовать шаблоны для создания Issues?
# - нажимаем на new issue, из появившегося списка шаблонов выбираем нужный.
# 2) Что такое Linked Issues, и как создать связь между задачами?
# - Linked Issues - Э механизм в GitHub который задает отношения между
# issues, Pull requests.
# - Чтобы создать связь, заходим на issue и выбираем тип связи.
# 3) Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# - время от создания до закрытия,прогресс,статус выполнения,распределения по меткам.
# 4) Какие best practices рекомендуются при работе с Issues в команде?
# - Единый стандарт оформления
# - Гибкая система меток
# - Работа с вехами (Milestones)
# - Живые обсуждения
# - Связь Issues и кода
# - Регулярный аудит
# - Интеграция с workflow
# Пример workflow:
# - Создание Issue с шаблоном -> назначение меток -> привязка к Milestone ->
# обсуждение в комментариях -> закрытие через PR с ссылкой на коммит
