"""Ишьюсы."""

# https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/creating-an-issue
#
# Общие вопросы
# 1. Что такое Issues на GitHub и для чего они используются?
#
# Issues на GitHub, и других системах контроля версий, представляют собой систему отслеживания задач, багов и запросов на улучшение. Они используются для организации и управления взаимодействием между командами разработчиков, клиентами и другими заинтересованными сторонами.
#
# Обучение (объясни код), сообщение об ошибке
#
#
# 2. Чем Issues отличаются от других инструментов управления задачами?
#
# В отличие от более широких систем управления проектами (например, Jira или Asana), Issues на GitHub тесно интегрированы с системой контроля версий (Git). Это предоставляет несколько преимуществ:
#
# ⦁ Связь с кодом: Issues напрямую связаны с кодовой базой. Это позволяет легко найти и отследить источник проблем. Можно создать issue, связанный с конкретным файлом или блоком кода.
# ⦁ История изменений: Изменения в Issue, комментарии и ответы хранятся в системе контроля версий, создавая полную историю взаимодействия.
# ⦁ Визуализация прогресса: Статус Issue отображается в репозитории, позволяя всем участникам команды видеть, какие задачи выполнены, а какие требуют внимания.
# ⦁ Коллаборативное обсуждение: Комментарии к Issue позволяют обсуждать проблемы, предлагать решения, проверять их работоспособность и достигать консенсуса.
# ⦁ Интеграция с командой: GitHub Issues хорошо подходят для работы в небольших командах или для сотрудничества в рамках одного проекта.
#
#
# 3. Какие основные компоненты (поля) есть у каждого Issue?
#
# title, body, labels, milestone, assignees, projects, template
#
# ⦁ Title (Заголовок): Это краткое, лаконичное описание проблемы, задачи или запроса. Хороший заголовок должен четко передавать суть проблемы и быть достаточно информативным, чтобы его можно было легко найти и понять при поиске. Примеры: "Ошибка при загрузке изображения", "Добавить поддержку русского языка", "Фикс бага с вылетом приложения". Важно: Короткий и точный заголовок помогает быстро сориентироваться в большом количестве задач.
#
# ⦁ Body (Описание): Это поле для более подробного описания проблемы. Здесь следует описать, что случилось, как это воспроизвести, какие шаги привели к проблеме, ожидаемый результат и фактический результат. Важные детали:
#
#     ⦁ Подробное описание проблемы: Что происходит? В каком контексте?
#     ⦁ Шаги воспроизведения: Пошаговая инструкция, как воспроизвести проблему. Чем подробнее, тем лучше.
#     ⦁ Ожидаемый результат: Что должно произойти?
#     ⦁ Фактический результат: Что происходит на самом деле?
#     ⦁ Контекст: Версия ПО, среда разработки, используемые библиотеки, другие важные детали, которые могут быть полезны для решения проблемы.
#     ⦁ Примеры кода (при необходимости): Если проблема связана с кодом, приведите минимальный рабочий пример (МВП), который демонстрирует ошибку.
#     ⦁ Ссылки: Ссылки на связанные документы, страницы, сообщения в чате или другие ресурсы.
#
# ⦁ Labels (Метки): Метки – это ключевые слова или теги, которые помогают категоризировать и фильтровать Issues. Примеры меток: "bug", "feature request", "enhancement", "priority-high", "platform-web", "platform-android". Правильно выбранные метки ускоряют поиск и организацию задач.
#
# ⦁ Milestone (Этап): Дедлайн выполнения (существования ошибки) - позволяет отслеживать по временным промежуткам проработанные проблемы. Этапы – это временные рамки или стадии проекта, к которым Issue может быть привязано. Это позволяет группировать задачи по временным отрезкам (например, "Release 1.0", "Q3 2024").
#
# ⦁ Assignees (Ответственные): Это список пользователей, ответственных за работу над задачей. Назначение ответственного упрощает распределение задач и слежение за процессом выполнения.
#
# ⦁ Projects (Проекты): Проекты – это более крупные структуры для организации Issues. Issues могут быть привязаны к определенному проекту, чтобы упорядочить их по более крупным категориям или направлениям.
#
# ⦁ Template (Шаблон): Это заготовка или шаблон для Issues, который задает структуру для описания проблемы. Шаблоны помогают обеспечить единообразие описания проблем, что облегчает их анализ и решение.
#
#
#
# Создание Issues
# 4. Как создать новое Issue в репозитории?
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# код ошибки, трассировка из терминала
# Краткое описание проблемы или задачи
# Шаги для воспроизведения (если это баг)
# Ожидаемое и фактическое поведение
# Скриншоты или примеры кода (если уместно)
# Версия ПО, ОС, браузера (для багов)
# Ссылки на связанные Issues/Pull Requests
#
#
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# bug – ошибка в коде
# enhancement – улучшение или новая функция
# documentation – проблемы с документацией
# duplicate – дублирующий Issue
# help wanted – требуется помощь
# invalid – некорректный Issue
# question – вопрос, а не задача
# wontfix – проблема не будет исправляться
#
#
# 7. Как прикрепить Assignees (ответственных) к Issue?
# прописать во время составления ишьюса справа
#
#
#
# Работа с Issues
# 8. Как использовать Labels для классификации задач?
# Labels помогают группировать Issues по типам (баги, улучшения, документация) или приоритетам (high priority, low priority). Их можно фильтровать в списке Issues.
#
#
# 9. Для чего нужен Milestone, и как связать его с Issue?
# Milestone (Этап): Дедлайн выполнения (существования ошибки) - позволяет отслеживать по временным промежуткам проработанные проблемы.
#
#
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
# В описании Pull Request укажите:
# Closes #123 или Fixes #123 (где 123 – номер Issue).
# После мержа PR Issue закроется автоматически.
#
# https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue
#
#
# 11. Как добавить комментарий к существующему Issue?
# Откройте Issue. Введите текст в поле Comment. Нажмите Comment.
#
#
#
# Закрытие и завершение Issues
# 12. Как закрыть Issue вручную?
# Откройте Issue. Нажмите Close issue внизу страницы.
#
#
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#
# Да, если в коммите или PR в описании указать:
# Fix #123
# Resolve #123
# Close #123
# Также указать в title в скобках номер (#10)
# После создания коммита или мержа PR Issue закроется.
#
#
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Откройте закрытое Issue. Нажмите Reopen issue.
#
#
#
# Фильтрация и поиск
# 15. Как найти все открытые или закрытые Issues в репозитории?
#
# Перейдите во вкладку Issues репозитория. Нажмите Open (открытые) или Closed (закрытые) в верхнем меню.
# Можно также использовать фильтр is:open или is:closed в строке поиска.
#
#
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#
# В строке поиска Issues можно применять фильтры:
# label:bug – Issues с меткой bug
# assignee:username – Issues, назначенные конкретному пользователю
# author:username – Issues, созданные определенным автором
# milestone:"Version 1.0" – Issues, связанные с Milestone
# state:open/closed – открытые/закрытые Issues
#
# Пример:
# is:open label:bug assignee:user1
#
#
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#
# В списке Issues можно выбрать сортировку:
# Newest (по дате создания, новые сверху)
# Oldest (старые сверху)
# Most commented (по количеству комментариев)
# Least commented (наименее обсуждаемые)
# Recently updated (по времени последнего обновления)
# ![image.png](attachment:image.png)
#
#
# Интеграции и автоматизация
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
#
# Нажмите Watch в правом верхнем углу репозитория → выберите All Activity или Custom (чтобы настроить уведомления только для Issues).
# Можно использовать GitHub Actions или Webhooks для автоматических оповещений (например, в Slack).
#
#
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
# Projects – это канбан-доски для управления задачами, отслеживания работы над группами Issues и Pull Requests. Чтобы связать Issue с Project:
#
# Откройте Issue → в правой панели нажмите Projects → выберите нужный проект.
# Или перетащите Issue на доску вручную.
#
#
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#
# GitHub Actions – автоматическое закрытие Issues, назначение меток.
# Webhooks – интеграция с Slack, Jira, Discord.
# Боты (например, Dependabot, Stale Bot для закрытия неактивных Issues).
#
#
#
# Коллаборация
# 21. Как упомянуть другого пользователя в комментарии к Issue?
#
# Используйте @username
#
#
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
#
# Напишите комментарий с вопросами (например, "Можешь уточнить шаги воспроизведения?").
# Можно добавить метку need more info.
# Написать в телеге о требовании определенной доп.инфы
#
#
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
#
# Если Issue дублируется → закройте его с меткой duplicate и укажите ссылку на основной Issue.
#
# Если Issue неактуально → закройте с меткой wontfix или invalid.
#
#
# Практические аспекты
# 24. Как использовать шаблоны для создания Issues?
#
# В репозитории создайте папку .github/ISSUE_TEMPLATE/.
# Добавьте файлы в формате .md (например, bug_report.md, feature_request.md).
# При создании Issue пользователь сможет выбрать шаблон.
#
#
# 25. Что такое Linked Issues, и как создать связь между задачами?
#
# Linked Issues — это механизм GitHub, позволяющий явно указывать связи между разными Issues (или между Issue и Pull Request)
#
# - Отслеживать зависимости задач ("Эту фичу нельзя сделать, пока не закрыт баг #123").
# - Объединять связанные Issues ("Это часть большой задачи #100").
# - Автоматически закрывать Issues при мерже Pull Request.
#
# Как создать связь между Issues?
# 1) Через комментарий (простая ссылка)
# Просто упомяните номер Issue/PR в тексте:
# Связано с #45.  Или:  Эта задача блокирует #78.
#
# GitHub автоматически создаст ссылку, но без указания типа связи.
#
# 2) Через ключевые слова (автоматическая связь)
# Используйте специальные фразы в комментариях или описании PR:
# ![image-2.png](attachment:image-2.png)
# *blocked by - пока не выполнится первый ишьюс (блокирующий), не выполняется данный
# *part of - похож на дублирование. Данный ишьюс - подзадача какого то другого ишьюса
#
# 3) Через боковую панель Issue (ручная привязка)
# Откройте Issue.
# В правой панели найдите раздел "Development" или "Linked issues".
# Нажмите Link issue → введите номер связанной задачи.
#
# Выберите тип связи:
# Dependent (зависит от),
# Blocking (блокирует),
# Related (связано).
#
#
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# Time to close (время от создания до закрытия).
# Количество открытых/закрытых Issues за период.
# Распределение по меткам (баги, улучшения).
# Активность обсуждений (комментарии).
#
#
# 27. Какие best practices рекомендуются при работе с Issues в команде?
# https://gitprotect.io/blog/mastering-github-issues-best-practices-and-pro-tips/

# Видео "Как открыть и ПРАВИЛЬНО закрыть issues"
# https://www.youtube.com/watch?v=wR3gXOiRm10
#
# Пример сообщения ишьюса в телеге
#
# ![image.png](attachment:image.png)
#
# accepted = принял В РАБОТУ
#
# исправление ошибки по ишьюсу в личном репозитории
#
# - переход на ссылку кода с ошибкой
# - для редактирования выходим из коммита и переходим на main
# ![image-2.png](attachment:image-2.png)
#
# -исправление ошибки
#
# - сохранение
# *необходимо привязать коммит к проблеме
# название коммита = название ишьюса
# *по стандарту название ишьюса должен содержать код ошибки, трассировку из терминала
# *заключить в скобочки номер ишьюса (#10), а в описании нет
# ![image-3.png](attachment:image-3.png)
# *тем самым прикрепляем к ишьюсы и он автоматически закрывается
#
# - прописать в телеге closed
