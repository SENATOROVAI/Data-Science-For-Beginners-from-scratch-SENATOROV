"""commits."""

# 1. Опишите своими словами назначение каждого из этих типов коммитов:
# feat - добавляет новую функцию в код (соответствует MINOR в Семантическом Версионировании)
# fix - исправляет бак в коде (соответствует PATCH в Семантическом Версионировании)
# docs - изменения в документации
# style - изменения, не влияющие на смысл кода (пробелы, форматирование и т.д.)
# refactor - изменение кода, которое не исправляет ошибку и не добавляет функцию
# test - добавление отсутствующих или исправление существующих тестов
# build - изменения, влияющие на систему сборки или внешние зависимости
# ci - изменения в файлах конфигурации CI и скриптах
# perf - изменение кода, повышающее производительность
# chore - регулярные задачи по уходу за проектом (обновление инструментов, библиотек, другие технические операции, не влияющие на поведение продукта)
#
# 2. Представьте, что вы исправили баг в функции, которая некорректно округляет числа. Сделайте фиктивный коммит и напишите для него сообщение в соответствии с Conventional Commits (используя тип fix).
# - git commit -m 'fix: correct round numbers in function'
#
# 3. Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
# - git commit -m 'feat: add generateReport function'
#
# 4. Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
# - git commit -m 'style: reformat codebase with consistent indention'
#
# 5. Документация и тестирование:
#
# Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
# - git commit -m 'docs: add JSDoc for generateReport function'
#
# Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
# - git commit -m 'test: add unit tests for generateReport function'
