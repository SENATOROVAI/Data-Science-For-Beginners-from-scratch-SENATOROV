"""Работа с коммитами.

изучение соглашения о коммитах и практика написания коммитов
"""

# feat - используется когда добавляем новую функциональность в проект.
# примеры:
# - Новый файл с функцией,модулем
# - реализуешь новую кооманду
# - дописываешь новый блок логики который отсутствовал
# - делаешь какое-либо уоучшение
#
# fix - тип коммита который используется при исправлении ошибки
# примеры:
# - когда исправил неработающий код
# - устранил неправильный результат
# - исправил ошибку в логике кода
# - удалил или исправил опечатку, влияющую на проверку файла
#
# docs - это тип коммита, который используется, когда ты меняешь документацию,
# не затрагивая код программы.
# примеры:
# - пишешь или редактируешь README.md
# - добавляешь коментарии в код
# - исправляешь опечатки в тексте
# - обновляешь документацию в API
# - редактируешь вики или учебные материалы
# - добавляешь docstring-и в функции/модули
#
# style - тип коммита, который используют,когда ты меняешь оформление кода,
# но не меняешь его поведение.
# примеры:
# - исправляешь отступы, пробелы, пустые строки
# - меняешь форматированиепо PEP8 или линтеру (например, black, flfck8,
#  docformatter)
# - переименовываешь переменные для читаемости, но без изменения логики
# - приводить код к единому стилю
# - убирать, добавлять запятые, кавычки, точки с запятой и т.п.
#
# refactor - это тип коммита, который используют, когда меняют структуру кода,
# не добавляя новых фич и не исправляя багов.
# (поведение программы остается тем же, но код становится чище,понятнее, гибче)
# примеры:
# - разбиваешь большую функцию на более мелкие
# - переименовываешь функции и переменные для лучшей читаемости
# - выносишь повторяющийся код в отдельный модуль
# - убираешь "магические числа"
# - реорганизуешь структуру файлов
# - переходишь с for-ов на map()/list comprehension, сохраняя логику
# - улучшаешь читаемтость или производительность без изменения логики
#
# test - это тип коммита, который используют, когда ты добавляешь, исправляешь или удаляешь тесты.
# (логика не меняется ты просто работаешьс проверкой кода)
# примеры:
# - добавляешь новые unit-тесты
# - создаешь тестовые сценарии или фикстуры
# - пишешь интергационные/сквозные тесты
# - обновляешь тесты под изменившейся код
# - удаляешь неактуальные тесты
#
# build - это тип коммита, который используют, когда ты вносишь изменения,
#  связаные со сборкой проекта или его зависимостями.
#  примеры:
# - обновил requirements.txt,pyproject.toml,package.json
# - добавил/изменил Dockerfile, Makefile, .env, .nvmrc и т.д.
# - обновил версии зависимостей
# - добавил конфигурациидля сборщиков (webpack,vite,pyinstaller,nuitka, и т.д.)
# - настроил паковку для публикации(setup,py,build.gradle, и т.д.)
#
# ci - тип коммита, который используют, когда ты меняешь или настраиваешь
# процессы автоматической сборки, тестирования или деплоя проекта
# примеры:
# - настроил .github/workflows/* или .github-ci.ymi
# - добавил/обновил gitHub Actions
# - Изменил скрипты сборки или тестов для CI
# - добавил бейджи в README, отражающие статус сборки/тестов
# - исправил падения CI
#
# perf - это тип коммита, который используют, когда улучшаешь
# производительность кода, не меняя его поведения.
# (код делает то же самое, но более быстрее, эффективнее или экономнее)
# примеры:
# - ускорил алгоритм
# - уменьшил колличество лишних вычислений
# - избавился от лишних запросов к БД/сети
# - заменил неэффективную конструкцию на быструю
# - перевел часть логики на NumPy, Cython, multiprocessing и т.д.
# - уменьшил объём используемой памяти или кешируешь результат
#
# chore - это тип коммита, котрый используют для вспомогательных изменений
# которые:не добовляют новую фичу(feat), не чинят баг(fix), не улучшают
# производительность(perf), не меняют поведение кода вообще.
# примеры:
# - обновили или добавили .gitignire, .editorconfig, .prettierrc, .env.example
# - настроили pre-commit, flake8, black, mypy, eslint и прочие линтеры
# - обновили конфиги IDE, VSCode, Jupyter и т.д
# - установили или обновили dev-зависимости
# - очистили логи, временные файлы
# - добавили служебный README для разработчиков
#
#
#

# Представьте, что вы исправили баг в функции, которая некорректно округляет числа.
#  Сделайте фиктивный коммит и напишите для него сообщение в соответствии с Conventional Commits (используя тип fix).
# - git-commit -m "fix: исправлен баг котрый некорректно округляет числа"
#
# Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
# - git-commit -m "feat: добавил новую функцию generateReport"
#
# Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
# - git-commit -m "style: поправил отступы и форматирование"
#
# Документация и тестирование:
#
# Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
# - git-commit -m "docs: Добавлен раздел про настройку .pre-commit"
#
# Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
# - git-commit -m "test: добавлена проверка обработки пустого ввода в функцию"
