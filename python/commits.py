"""This notebook is a hint for conventional commits."""

# 1. Опишите своими словами назначение каждого из этих типов коммитов:
# feat, fix, docs, style, refactor, test, build, ci, perf, chore.
#
# feat - от слова feature, или же "фича", используется про добавлении нового
# функционала в проект.
# fix - используется при исправлениях багов.
# docs - используется при изменениях, связанных с документацией. Например,
# описание классов, описание модуля, или же файл Readme и т.д.
# style - при форматировании кода, изменении стиля, оформления кода.
# refactor - изменения в коде, не являющиеся фиксом багов, добавлением фичи,
# обычно упрощение кода.
# test - добавление или изменения тестов для проекта.
# build - изменения, связанные с зависимостями проекта, а также системами
# сборки проекта.
# ci - continuous integration, изменения, связанные с проверкой кода,
# например, работа над файлом линтеров или связанные с GitHub Actions.
# perf - изменения, связанные с эффективностью кода, например, увеличение
# скорости.
# chore - остальные изменения, вспомогательные задачи, не затрагивающие
# функциональность.
#
# 2. Представьте, что вы исправили баг в функции, которая некорректно
# округляет числа. Сделайте фиктивный коммит и напишите для него сообщение в
# соответствии с Conventional Commits (используя тип fix).
# ```bash
# git commit -m 'fix: correct rounding error in function'
# ```
#
# 3. Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте
# фиктивный коммит с типом feat, отражающий добавление этой функциональности
# ```bash
# git commit -m 'feat: add new function generateReport'
# ```
#
# 4. Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не
# меняя логики кода. Сделайте фиктивный коммит с типом style
# ```bash
# git commit -m 'style: formatted the code and corrected indentations'
# ```
#
# 5. Документация и тестирование:
#
# Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий
# документацию для вашей новой функции.
# ```bash
# git commit -m 'docs: add docs for function (name)'
# ```
# Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же
# функции.
# ```bash
# git commit -m 'test: add tests for function (name)'
# ```
