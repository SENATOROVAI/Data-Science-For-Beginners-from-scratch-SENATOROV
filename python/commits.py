# %%
"""Commits."""

# %% [markdown]
# ### 1
# Опишите своими словами назначение каждого из этих типов коммитов:
# feat, fix, docs, style, refactor, test, build, ci, perf, chore.
#
# - feat - добавление нового функционала
# - fix - исправление бага
# - docs - изменения в документации
# - style - изменения в форматировании кода
# - refactor - улучшение структуры кода без изменения поведения
# - test - изменение тестов
# - build - изменения, связанные со сборкой проекта
# - ci - изменения в ci/cd
# - perf - улучшение производительности
# - chore - остальные изменения, например, обновление зависимостей
#
# ### 2
# Представьте, что вы исправили баг в функции, которая некорректно округляет числа. Сделайте фиктивный коммит и напишите для него сообщение в соответствии с Conventional Commits (используя тип fix).
#
# git commit -m "fix: fixed a bug in the function that incorrectly rounds numbers"
#
# ### 3
# Добавление новой функциональности: Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
#
# git commit -m "feat: add a new function generateReport"
#
# ### 4
# Модификация формата кода или стилей: Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
#
# git commit -m "style: corrected indents and formatting throughout the project"
#
# ### 5
# Документация и тестирование:
# - Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
# - Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
#
# git commit -m "docs: improved documentation in the generateReport function"
# git commit -m "test: added tests for the generateReport function"
