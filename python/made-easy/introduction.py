"""Computer Science."""

# ### Ответьте на вопросы
#
# 1. Какие предметные области входят в Data Science? Что между ними общего и
# в чем различие?
# Data Science включает в себя:
# - Математику, статистику и алгоритмы
# - Программную инженерию
# - Сбор данных
#
# **Общее между ними**: все направлены на извлечение знаний из данных и создание "умных" результатов на основе анализа данных.
#
# **Различия**:
# - Математика и статистика обеспечивают теоретическую основу для анализа
# - Программирование предоставляет инструменты для обработки данных
# - Сбор данных фокусируется на получении качественной информации для анализа
#
# 2. Как вы понимаете термин «алгоритм»? Как алгоритмы связаны с блок-схемами?
# Алгоритм — это конечная последовательность инструкций для решения проблемы.
#
# Связь с блок-схемами: Блок-схемы — это графическое представление алгоритмов с использованием стандартных символов. Они помогают визуализировать алгоритм.
#
# 3. Какую программу можно назвать хорошей? Запишите все характеристики, какие
# удастся придумать.
# - Конкретной — инструкции должны быть четкими и определенными
# - Последовательной — шаги выполняются в правильном порядке
# - Понятной — код должен быть читаемым для людей
# - Легко изменяемой — простота внесения правок и добавления функций
# - Эффективной — оптимальный алгоритм дает более быстрые результаты
#
# 4. Какой язык понимает компьютер?
# Компьютер понимает машинный язык
#
# 5. Чем языки программирования отличаются от языков, на которых мы говорим?
# **Сходства**:
# - У всех языков есть правила (синтаксис) и значения (семантика)
# - Одно сообщение можно передать разными способами
#
# **Отличия языков программирования**:
# - Строгость: компьютеры требуют точных инструкций
# - Отсутствие двусмысленности: каждая команда должна иметь четкое значение
# - Формальный синтаксис: строгие правила написания команд
# - Ограниченный словарь: используются только определенные ключевые слова
# - Цель: предназначены для общения с машиной
#
# ### Правда или ложь
# 1. Машинное обучение - это инструмент для извлечения знаний из данных.
# Правда
#
# 2. Глубокое обучение - это то же самое, что машинное обучение.
# Ложь
#
# 3. Все инженеры-программисты также могут считаться специалистами по данным.
# Ложь
#
# 4. Статистика - важный инструмент для специалистов по данным.
# Правда
#
# 5. Компьютер может принимать решения, выходящие за рамки данных ему инструкций, подстраиваясь под изменения среды.
# Ложь
#
# 6. Компьютеры понимают языки программирования «как есть».
# Ложь
#
# 7. Некоторые языки программирования компилируются, некоторые интерпретируются, а
# некоторые используют и то и другое.
# Правда
#
# 8. Все программы выполняются последовательно.
# Ложь
#
# 9. В IDE есть встроенный текстовый редактор.
# Правда
#
# 10. Компиляторы и интерпретаторы - это такие механизмы, наподобие привода
# для компакт-дисков.
# Ложь
#
# ### Практические задания
# 1. Напишите алгоритм для расчета простых процентов от некоторой суммы
# - Шаг 1: Начало.
# - Шаг 2: Введите основную сумму и сохраните как СУММА.
# - Шаг 3: Введите процентную ставку и сохраните как СТАВКА.
# - Шаг 4: Введите время (в годах) и сохраните как ВРЕМЯ.
# - Шаг 5: Вычислите (СУММА × СТАВКА × ВРЕМЯ) / 100 и сохраните как ПРОЦЕНТЫ.
# - Шаг 6: Выведите значение ПРОЦЕНТЫ.
# - Шаг 7: Конец.
#
# 2. Напишите алгоритм для вычисления площади прямоугольника.
# - Шаг 1: Начало.
# - Шаг 2: Введите длину прямоугольника и сохраните как ДЛИНА.
# - Шаг 3: Введите ширину прямоугольника и сохраните как ШИРИНА.
# - Шаг 4: Умножьте ДЛИНА на ШИРИНА и сохраните как ПЛОЩАДЬ.
# - Шаг 5: Выведите значение ПЛОЩАДЬ.
# - Шаг 6: Конец.
#
# 3. Напишите алгоритм вычисления периметра круга.
# - Шаг 1: Начало.
# - Шаг 2: Введите радиус круга и сохраните как РАДИУС.
# - Шаг 3: Установите значение π = 3.14.
# - Шаг 4: Вычислите 2 × π × РАДИУС и сохраните как ПЕРИМЕТР.
# - Шаг 5: Выведите значение ПЕРИМЕТР.
# - Шаг 6: Конец.
#
# 4. Напишите алгоритм, который находит все простые числа меньше 100.
# - Шаг 1: Начало.
# - Шаг 2: Выведите на экран число 2 (первое простое число).
# - Шаг 3: Сохраните значение 3 в ЧИСЛО.
# - Шаг 4: Проверьте, выполняется ли условие ЧИСЛО < 100. Если да, переходите к шагу 5. Если нет, переходите к шагу 13.
# - Шаг 5: Вычислите квадратный корень из ЧИСЛО и сохраните как ПРЕДЕЛ.
# - Шаг 6: Сохраните значение 2 в ДЕЛИТЕЛЬ.
# - Шаг 7: Сохраните значение ИСТИНА в ПРОСТОЕ_ЧИСЛО.
# - Шаг 8: Проверьте, выполняется ли условие ДЕЛИТЕЛЬ ≤ ПРЕДЕЛ. Если да, переходите к шагу 9. Если нет, переходите к шагу 11.
# - Шаг 9: Если ЧИСЛО делится на ДЕЛИТЕЛЬ нацело, установите ПРОСТОЕ_ЧИСЛО = ЛОЖЬ и переходите к шагу 11.
# - Шаг 10: Увеличьте ДЕЛИТЕЛЬ на 1 и переходите к шагу 8.
# - Шаг 11: Если ПРОСТОЕ_ЧИСЛО равно ИСТИНА, выведите ЧИСЛО на экран.
# - Шаг 12: Увеличьте ЧИСЛО на 2 и переходите к шагу 4.
# - Шаг 13: Конец.
#
# 5. Напишите алгоритм превращения предложения, написанного в верхнем регистре, в обычный для предложений регистр.
# - Шаг 1: Начало.
# - Шаг 2: Введите предложение в верхнем регистре и сохраните как ТЕКСТ.
# - Шаг 3: Преобразуйте весь ТЕКСТ в нижний регист.
# - Шаг 4: Преобразуйте первый символ ТЕКСТ в верхний регистр.
# - Шаг 5: Выведите ТЕКСТ.
# - Шаг 6: Конец.
#
# 6. Составьте блок-схему приготовления льда из кипяченой воды с помощью холодильника.
#
# <img src="https://clck.ru/3Nj3NJ"/>
#
# 7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.
#
# <img src="https://clck.ru/3NmBBi"/>
#
# 8. Составьте блок-схему для вычисления квадрата всех нечетных чисел от 1 до 15
# включительно.
#
# <img src="https://clck.ru/3NmBCi"/>
#
# 9. Составьте блок-схему вывода таблицы умножения на 3.
#
# <img src="https://clck.ru/3NmBEx">
#
# 10. Составьте блок-схему для расчета сложных процентов (с капитализацией).
#
# <img src="https://clck.ru/3NmBHv">
#
#
# ### Изучите самостоятельно
# 1. Что думают ученые о будущем Data Science? Изучите материалы на эту тему
# и поделитесь ими с друзьями.
#
# Ученые считают, что будущее Data Science определит интеграция с ИИ, которая автоматизирует рутинные задачи и позволит специалистам сосредоточиться на стратегическом анализе и бизнес-решениях
#
# 2. Составьте список разных IDE для языка Python. Узнайте, чем они похожи и чем
# отличаются.
#
# PyCharm (бесплатная Community + платная Pro), VS Code (бесплатная), JupyterLab, Spyder и другие.
#
# **Сходства**: Все предлагают подсветку синтаксиса, отладку, автодополнение кода, интеграцию с Git, управление проектами VS Code vs. Pycharm: The Best IDE for Python
#
# **Отличия**: PyCharm — полноценная IDE для больших проектов; VS Code — легкий настраиваемый редактор; Jupyter — для data science и экспериментов; Spyder — для научных вычислений
#
# 3. Составьте список всех компилируемых и интерпретируемых языков. Найдите ситуации, в которых каждый из них будет полезнее в использовании, чем остальные.
#
# - Компилируемые языки: C, C++, Rust, Go, Haskell, C#, COBOL
# - Интерпретируемые языки: Python, JavaScript, Ruby, PHP, Perl, BASIC
#
# - Компилируемые: Системное программирование, embedded-системы, высокопроизводительные приложения (быстрое выполнение, контроль памяти)
# - Веб-разработка, скриптинг, прототипирование, data science (быстрая разработка, кроссплатформенность)
#
# 4. Создайте алгоритмы для решения некоторых распространенных задач, с которыми вы сталкиваетесь в повседневной жизни. Составьте для них блок-схемы.
#
# <img src="https://clck.ru/3NmCNN"/>
#
# 5. Как вы думаете, может ли изучение компьютерного программирования помочь автоматизировать какие-нибудь повторяющиеся рутинные задачи? Подготовьте список таких задач и попробуйте автоматизировать их по мере изучения этой книги.
# - Генерация отчётов
# - Сортировки
# - Массовое, шаблонное преобразование
