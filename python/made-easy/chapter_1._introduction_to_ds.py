"""1. Введение в Data Science."""

# # 1. Введение в Data Science и основы программирования
# ## 1.1. Введение в Data Science
# Data Science - это научная дисциплина, которая включает в себя извлечение
# информации из огромных объемов данных с использованием различных научных
# методов, алгоритмов и процессов. Эта наука помогает обнаруживать в
# необработанных данных скрытые закономерности.
#
# ### 1.1.1. Зачем нам Data Science?
# Data Science как наука, занимающаяся изучением данных, помогает лучше
# принимать решения, обнаруживать закономерности, составлять прогнозы,
# выполнять анализ и создавать визуальное представление из необработанных
# данных. Эта наука помогает нам:
# - задавать правильные вопросы;
# - находить основную причину проблемы;
# - находить закономерности среди, на первый взгляд, хаотичных необработанных
# данных;
# - создавать модели для предиктивного анализа;
# - визуализировать и отображать результаты с помощью графиков, информационных
# панелей и т. д.;
# - наделять машины интеллектом;
# - определять лояльность клиентов с помощью анализа настроений;
# - принимать более качественные и быстрые решения;
# - рекомендовать правильный продукт нужному клиенту для развития нашего
# бизнеса.

# ### 1.1.3. Настоящее и будущее Data Science
# - Искусственный интеллект (ИИ) - это сфера, в которой основное внимание
# уделяется созданию интеллектуальных машин, способных работать и принимать
# решения как человек.
#
# - Машинное обучение - это инструмент для извлечения знаний из данных. В
# машинном обучении модели могут обучаться на данных самостоятельно или
# поэтапно: обучение с учителем, т. е. на данных, подготовленных человеком,
# или обучение без учителя, в котором работа ведется над хаотичными и
# неорганизованными данными.
#
# - Глубокое обучение - это создание многослойных нейронных сетей в областях,
# где требуется более продвинутый или быстрый анализ, а традиционное машинное
# обучение не справляется. Под глубиной понимается наличие более одного
# скрытого слоя нейронов в сети, которые проводят математические вычисления.
#
# - Большие данные - это работа с огромными объемами часто неструктурированных
# данных. Специфика этой сферы - инструменты и системы, способные выдерживать
# высокие нагрузки.
#
# ### 1.1.4. Чем занимается специалист по Data Science?
# Специалист по Data Science анализирует бизнес-данные, извлекая из них важную
# информацию. Другими словами, специалист по анализу данных решает бизнес
# задачи с помощью следующих шагов:
# - задает правильные вопросы, чтобы понять проблему;
# - собирает данные из нескольких источников - корпоративные данные,
# общедоступные данные и т. д.;
# - обрабатывает сырые данные и преобразует их в формат, подходящий для
# анализа;
# - загружает данные в аналитическую систему - алгоритм машинного обучения
# или статистическая модель;
# - подготавливает результаты и идеи, которые можно изложить заинтересованным
# сторонам.
#
# Всё это позволяет решить немало проблем, некоторые из них приведены далее:
# - обнаружение мошенничества и выявление аномалий, например изменений схемы
# снятия или расходования средств с кредитной карты клиента;
# - целевой и персонализированный маркетинг - персональные рассылки по
# электронной почте, системы рекомендаций на сайтах магазинов;
# - метрические прогнозы - показатели эффективности, качества рекламных
# кампаний и других мероприятий;
# - оценка принятия решений - обработка больших объемов данных и помощь в
# принятии решения, например о выдаче кредита на основе кредитных оценок;
# - прогнозирующее моделирование - прогнозирование столкновения метеорита с
# землей на основе астрономических данных.
#
# ### 1.1.5. Как это делается?
# ![image.png](attachment:image.png)
#
# ### 1.3.2. Компьютерный алгоритм
# алгоритм - это пример логики, написанной разработчиками программного
# обеспечения для эффективного выполнения на целевом компьютере и для
# получения некоторых выходных данных по заданным входным данным.
#
# В целом алгоритмы состоят из 3 видов операторов, которые могут
# присутствовать в различных комбинациях:
# 1. Последовательные операторы.
# 2. Условные операторы.
# 3. Циклы или итерации.
#
# ### 1.3.3. Блок-схемы
# Алгоритмы можно изображать в графической форме с использованием определенных
# обозначений.
# ![image-2.png](attachment:image-2.png)
#
# ### 1.3.5. Что такое исходный код?
# Исходный код - это то, что пишут программисты на всех языках
# программирования. Это те самые указания, которые мы даем компьютеру,
# написанные неформатированным текстом
#
# ### 1.3.6. Как запустить исходный код?
# Существуют три основных способа перевода исходного кода в машинный код:
# - компиляция;
# - интерпретация;
# - сочетание этих двух способов
#
# ### 1.3.7. Компилятор
# Компилятор -это программа, преобразующая исходный код в машинный
#
# ### 1.3.8. Интерпретатор
# В компьютерном программировании интерпретатор - это компьютерная программа,
# которая непосредственно выполняет инструкции, написанные на языке
# программирования, без предварительной компиляции в программу на машинном
# языке

# ## 1.5. Упражнения
# ### 1.5.1. Ответьте на вопросы
# 1. Какие предметные области входят в Data Science? Что между ними общего и в
# чем различие?
#
# Искусственный интеллект, машинное обучение, глубокое обучение,
# значащее, что больше 1 слоя нейронов, которые выполняют вычисления. ИИ
# включает логические правила и экспертные системы, машинное обучение —
# статистическое обучение, глубокое обучение — нейронные сети. А общее то, что они являются подмножеством друг друга
# ![image.png](attachment:image.png)
#
#
# 2. Как вы понимаете термин «алгоритм»? Как алгоритмы связаны с блок-схемами?
#
# алгоритм - это пример логики, написанной разработчиками программного
# обеспечения для эффективного выполнения на целевом компьютере и для
# получения некоторых выходных данных по заданным входным данным. Блок-схема -
# это графическое представление алгоритма
#
#
# 3. Какую программу можно назвать хорошей? Запишите все характеристики, какие
# удастся придумать.
#
# корректность, надёжность, производительность, масштабируемость,
# читаемость, поддерживаемость, документируемость, соответствие стандартам
#
#
# 4. Какой язык понимает компьютер?
#
# машинный код
#
#
# 5. Чем языки программирования отличаются от языков, на которых мы говорим?
#
# языки программирования это инструкции, который компьютер ещё не
# понимает, но эти инструкции, легко либо интерпретируются, либо компилируются для понимания компьютером.
#
# ### 1.5.2 Правда или ложь
# 1. Машинное обучение - это инструмент для извлечения знаний из данных.
# Ответ: правда
# 2. Глубокое обучение - это то же самое, что машинное обучение.
# Ответ: ложь
# 3. Все инженеры-программисты также могут считаться специалистами по данным.
# Ответ: ложь
# 4. Статистика- важный инструмент для специалистов по данным.
# Ответ: правда
# 5. Компьютер может принимать решения, выходящие за рамки данных ему
# инструкций, подстраиваясь под изменения среды.
# Ответ: ложь
# 6. Компьютеры понимают языки программирования «как есть».
# Ответ: ложь
# 7. Некоторые языки программирования компилируются, некоторые
# интерпретируются, а некоторые используют и то и другое.
# Ответ: правда
# 8. Все программы выполняются последовательно.
# Ответ: ложь
# 9. В IDE есть встроенный текстовый редактор.
# Ответ: правда
# 10. Компиляторы и интерпретаторы - это такие механизмы, наподобие привода
# для компакт-дисков.
# Ответ: ложь

# 1.5.3. Практические задания
# 1. Напишите алгоритм для расчета простых процентов от некоторой суммы.
# - Начало программы.
# - Ввести сумму P.
# - Ввести процент r.
# - Перевести ставку в долю: r = r / 100.
# - Вычислить сумму процентов: I = P * r
# - Вывести I.
# - Конец программы.
#
# 2. Напишите алгоритм для вычисления площади прямоугольника.
# - Начало программы.
# - Ввести длину a.
# - Ввести ширину b.
# - Вычислить площадь: S = a * b.
# - Вывести S.
# - Конец программы.
#
# 3. Напишите алгоритм вычисления периметра круга.
# - Начало программы.
# - Ввести радиус r.
# - Задать π = 3.14159.
# - Вычислить периметр: P = 2 * π * r.
# - Вывести P.
# - Конец программы.
#
# 4. Напишите алгоритм, который находит все простые числа меньше 100.
# - Начало программы.
# - Для каждого числа n от 2 до 99:
#     - Если n — простое.
#     - Проверить, делится ли n на любое число k от 2 до √n:
#         - Если делится хотя бы на одно, вывести Нет, остановить цикл.
#     - Если цикл не остановился, вывести n.
# - Конец программы.
#
# 5. Напишите алгоритм превращения предложения, написанного в верхнем регистре, в обычный регистр для предложений.
# - Начало программы.
# - Ввести строку text.
# - Преобразовать text в нижний регистр.
# - Сделать первую букву text заглавной.
# - Вывести преобразованный текст.
# - Конец программы.
#
# 6. Составьте блок-схему приготовления льда из кипяченой воды с помощью холодильника.
# ![image.png](attachment:image.png)
#
# 7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.
# ![image-2.png](attachment:image-2.png)
#
# 8. Составьте блок-схему для вычисления квадрата всех нечетных чисел от 1 до 15
# включительно.
# ![image-3.png](attachment:image-3.png)
#
# 9. Составьте блок-схему вывода таблицы умножения на 3.
# ![image-4.png](attachment:image-4.png)
#
# 10. Составьте блок-схему для расчета сложных процентов (с капитализацией).
# ![image-5.png](attachment:image-5.png)

# ### 1.5.4. Изучите самостоятельно
# 1. Что думают ученые о будущем Data Science? Изучите материалы на эту тему и
# поделитесь ими с друзьями.
# Ответ:
# - Рост интеграции с ИИ и Big Data, внимание к этике, объяснимости моделей и
# автоматизации аналитики.
# 2. Составьте список разных ЮЕ для языка Python. Узнайте, чем они похожи и
# чем отличаются.
# Ответ:
# - PyCharm, VS Code, Jupyter, Spyder.
# - Все дают подсветку, автодополнение и отладку; отличаются лицензией,
# лёгкостью и встроенными инструментами (научные пакеты, фронтенд-расширения).
# 3. Составьте список всех компилируемых и интерпретируемых языков. Найдите
# ситуации, в которых каждый из них будет полезнее в использовании, чем
# остальные.
# Ответ:
# - Компилируемые: C, C++, Rust, Go -> высокая скорость, контроль памяти,
# системы и встраиваемые.
# - Интерпретируемые: Python, Ruby, JavaScript -> быстрая разработка, скрипты,
# веб, анализ данных
#
# 4. Создайте алгоритмы для решения некоторых распространенных задач, с
# которыми вы сталкиваетесь в повседневной жизни. Составьте для них блок-схемы.
#
# Алгоритм приготовления яичницы
# ![image.png](attachment:image.png)
#
# 5. Как вы думаете, может ли изучение компьютерного программирования помочь
# автоматизировать какие-нибудь повторяющиеся рутинные задачи? Подготовьте
# список таких задач
# ✉️ Автоматическая отправка email (рассылки, уведомления).
# 🌐 Парсинг сайтов (сбор данных, мониторинг цен, новостей).
# 🤖 Чат-боты (для ответов на частые вопросы в Telegram, WhatsApp).
# 📅 Автозаполнение форм (регистрации, логины, CAPTCHA-обход).
