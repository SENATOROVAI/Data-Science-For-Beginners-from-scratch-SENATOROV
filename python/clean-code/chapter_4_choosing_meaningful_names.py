"""Chapter 4.

Choosing meaningful names.
"""

# ## Глава 4. Выбор понятных имен.
#
# ### Итоги
#
# В PEP 8 вы найдете несколько соглашений о выборе имен — например, имена в нижнем регистре для модулей и имена в схеме Pascal для классов.
#
# Имена не должны быть слишком короткими или слишком длинными. Однако часто лучше сделать имя избыточным, чем недостаточно содержательным.
#
# Имя должно быть лаконичным, но информативным. Оно должно легко находиться
# функцией поиска Ctrl-F. То, насколько просто можно найти выбранное имя, свидетельствует о его уникальности.
#
# Также задумайтесь, будет ли понятно это имя программисту, который недостаточно хорошо владеет английским языком;
#
# избегайте шуток, каламбуров и культурных отсылок в своих именах; вместо этого выбирайте имена прямолинейные, традиционные и без отсылок к хохмам.
#
# Избегайте имен, уже используемых стандартной библиотекой Python, — таких как
# all, any, date, email, file, format, hash, id, input, list, min, max, object, open, random, set, str, sum, test и type. Их применение может создать трудноуловимые ошибки в вашем коде.
#
# Для компьютера неважно, какие имена вы выбрали, содержательные или общие.
# Имена упрощают чтение кода людьми, а не выполнение его компьютерами. Если
# ваш код хорошо читается, он будет понятным. Если он понятен, его легко изменить.
# А если его легко изменить, вам будет проще исправить ошибки или добавить новые
# возможности. Использование понятных имен — основополагающий фактор раз
# работки качественного программного обеспечения

# ### Схемы регистра имен
#
# Змеиный регистр (snake_case) разделяет слова символом подчеркивания,
# который напоминает ползущую между словами змею. В этом случае все
# буквы записываются в нижнем регистре, а константы часто записываются
# в верхнем змеином регистре (UPPER_SNAKE_CASE).
#
# Верблюжий регистр (camelCase) — слова записываются в нижнем регистре,
# но второе и следующие слова начинаются с заглавной. Эта схема в большинстве случаев подразумевает, что первое слово начинается с буквы нижнего регистра. Буквы верхнего регистра напоминают верблюжьи горбы.
#
# Схема Pascal (PascalCase) — названа так, потому что применяется в языке
# программирования Pascal; аналогична схеме верблюжьего регистра, но первое
# слово в ней тоже начинается с заглавной.
#
#
# Вы можете использовать любую схему, но в одном проекте — только одну, а не обе сразу.

# ### Длина имен
#
# 1.Баланс длины имён
#
# Код читают чаще, чем пишут → предпочтительны более длинные и понятные имена.
#
# Слишком короткие имена непонятны, слишком длинные — утомительны.
#
# 2.Проблемы коротких имён
#
# Одно-/двухбуквенные (g, x):
# Неочевидны (кроме исключений: i/j/k в циклах, x/y в координатах).
#
# Сокращения (mon):
# Многозначны (month? monitor?).
#
# Общие слова (start, data):
# Без контекста непонятно, что именно обозначают.
#
# 3.Когда допустимы короткие имена
#
# Локальные переменные в маленьких функциях (например, payment).
#
# Традиционные случаи: i/j/k в циклах, x/y для координат.
#
# 4.Длинные имена
#
# Чем шире область видимости, тем информативнее должно быть имя.
# Пример: annual_electric_bill_payment лучше payment для глобальной переменной.
#
# Избегайте пропуска букв (например, num_trials вместо n_trials).
#
# 5.Префиксы и суффиксы
#
# Избыточные префиксы:
# cat.weight лучше catWeight (класс уже уточняет контекст).
#
# Устаревшие практики:
# Венгерская нотация (например, strName) не нужна в современных IDE.
#
# Полезные префиксы:
# is_, has_ для булевых значений (is_vehicle, has_key).
#
# Единицы измерения:
# Добавляйте суффиксы, если тип неясен (weight_kg, time_ms).
#
# 6.Числовые суффиксы
#
# payment1, payment2 — плохо (неясно отличие).
#
# Лучше:
#
# Объединить в список (payments).
#
# Использовать параметры (makePayment(priority, amount)).
#
# Описательные имена (makeUrgentPayment).

# ### Соглашения об именах PEP 8
#
# Все буквы должны быть буквами ASCII — то есть латинскими буквами
# верхнего и нижнего регистров без диакритических знаков.
# - Имена модулей должны быть короткими и состоять только из букв нижнего
# регистра.
# - Имена классов необходимо записывать в схеме Pascal.
# - Имена констант следует записывать в верхнем змеином регистре.
# - Имена функций, методов и переменных записывают в нижнем змеином
# регистре.
# - Первый аргумент методов всегда должен называться self в нижнем регистре.
# - Первый аргумент методов классов всегда должен называться cls в нижнем
# регистре.
# - Приватные атрибуты классов всегда начинают с символа подчеркивания ( _ ).
# - Публичные атрибуты классов никогда не начинают с символа подчеркивания (_).

# ### Выбирайте имена, пригодные для поиска
#
# 1. Проблема коротких и обобщённых имён
# Использование слишком коротких или абстрактных имён (например, num, a, data) приводит к:
#
# Ложным срабатываниям при поиске (Ctrl-F / поиск в IDE).
#
# Сложности в понимании кода, особенно в больших проектах.
#
# 2. Как выбирать имена?
# Делайте имена уникальными и конкретными – так их легче найти.
#
# Плохо: email (слишком общее).
#
# Лучше: emailAddress, downloadEmailAttachment, replyToAddress.
#
# Избегайте многозначности – имя должно чётко отражать назначение переменной/функции.
#
# Длина имени должна соответствовать контексту – чем шире область видимости, тем информативнее должно быть имя.
#
# 3. Не полагайтесь на инструменты рефакторинга
# Хотя современные IDE умеют различать переменные с одинаковыми именами в разных контекстах (например, локальная num и глобальная num), лучше выбирать имена так, будто этих инструментов нет.
#
# 4. Вывод
# Хорошее имя:
# Уникальное – легко найти через поиск.
# Конкретное – сразу понятно, за что отвечает.
# Достаточно длинное – чтобы избежать неоднозначностей.

# ### Избегайте шуток, каламбуров и культурных отсылок
#
# - gooseDownload() - increaseDownloadSpeed()
#
# ### Не заменяйте встроенные имена
# - Никогда не используйте встроенные имена Python для своих переменных.
# - Чтобы узнать,
# используется ли имя в Python, введите его в интерактивной оболочке или попробуйте импортировать.
#
# проблема — присваивание файлам .py имен, совпадающих с именами сторонних модулей. Например, если вы установили сторонний
# модуль Pyperclip, но также создали файл pyperclip.py, команда import pyperclip импортирует pyperclip.py вместо модуля Pyperclip. При попытке вызвать функцию
# copy() или paste() модуля Pyperclip вы получите ошибку, в которой говорится,
# что функции не существует
#
# ### Худшие из возможных имен
#
# - Имя data — ужасное и абсолютно бессодержательное, потому что буквально лю
# бая переменная содержит данные (data). То же можно сказать об имени var — все
# равно что выбрать для собаки кличку Собака. Имя temp часто используется для
# переменных, содержащих временные данные, но и этот выбор плох: в конце концов,
# с точки зрения дзен-буддизма все переменные временны. К сожалению, несмотря
# на неоднозначность, эти имена встречаются часто; избегайте их использования
# в своем коде.
# - Если вам нужна переменная для хранения статистического отклонения температурных данных, используйте имя temperatureVariance. Не стоит и говорить, что
# выбор имени tempVarData будет неудачным.
