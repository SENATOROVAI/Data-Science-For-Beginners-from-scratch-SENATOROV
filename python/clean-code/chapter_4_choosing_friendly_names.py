"""Computer Science."""

# ### Общие принципы
# - Выбор имен — одна из самых сложных проблем в программировании
# - Компактные и содержательные имена критически важны для удобочитаемости кода
# - Код читают чаще, чем пишут, поэтому лучше выбирать более длинные, но понятные имена
#
# ### Схемы регистра
# - snake_case — слова разделены подчеркиванием, все буквы строчные
# - camelCase — первое слово строчное, остальные с заглавной буквы
# - PascalCase — все слова с заглавной буквы
# - В одном проекте использовать только одну схему
#
# ### Правила PEP 8
# - Модули: короткие имена, только строчные буквы
# - Классы: PascalCase
# - Константы: UPPER_SNAKE_CASE
# - Функции/методы/переменные: snake_case
# - Первый аргумент методов: self
# - Первый аргумент методов классов: cls
# - Приватные атрибуты: начинаются с _
#
# ### Длина имен
# - Слишком короткие имена — плохо:
#     - Одно-двухбуквенные имена (кроме i, j, k в циклах)
#     - Сокращения типа mon
#     - Однословные имена без контекста
#
# - Слишком длинные имена:
#     - Чем шире область видимости, тем более содержательным должно быть имя
#     - Избегать избыточных префиксов (например, catWeight для атрибута класса Cat)
#
# ### Что избегать
# - Венгерскую запись (префиксы типов данных)
# - Пропущенные буквы в словах
# - Числовые суффиксы (payment1, payment2) — лучше использовать массивы или более описательные имена
# - Шутки, каламбуры и культурные отсылки
# - Замещение встроенных имен Python (list, set, open, str и т.д.)
#
# ### Полезные практики
# - Использовать префиксы is_ и has_ для boolean-значений
# - Включать единицы измерения в имена (weight_kg)
# - Выбирать имена, удобные для поиска (Ctrl+F)
# - Писать код понятный для не-носителей английского языка
#
# ### Худшие имена
# - data, var, temp — абсолютно бессодержательные имена
#
# ### Главный принцип
# - Имена должны быть лаконичными, но информативными. Хорошие имена упрощают чтение и понимание кода людьми, что облегчает его изменение и поддержку.
