"""Задание по Контрибьютинг в Open Source."""

# GitHub
#
# 1.1. Что такое GitHub? - крупнейшее хранилище Git репозиториев, а так же центр сотрудничества для миллионов разработчиков и проектов
# 1.2. Как GitHub связан с Git? - GitHub используется как Gti хостинг, который хранит Git репозитории
# 1.3. Чем отличается fork репозитория от его клонирования (clone)? - клонирование репозитория, это создание копии удаленного репозитория на локальном компьютере, когда уже есть доступ к оригинальному репозиторию (делается для удобства). fork репозитория - это создание копии чужого репозитория, к которому нет доступа, для внесения собственных изменений, форк создается не локально, а на GitHub
# 1.4. Зачем нужны и как работают pull requests? - pull requests дают возможность авторам через форк репозитория вносить свои изменения в чужие репозитории. После создания форка и своей ветки вносятся изменения в форк проекта, делаются коммиты и отправляются в форк. После этого на GitHub создается pull request, то есть запрос на слияние своей ветки в форкнутом репозитории и оригинальной ветки проекта
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи? - Да
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83) - ssh-keygen
#
# Внесение собственного вклада в проекты
#
# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых у нас нет прав на внесения изменений путём отправки (push) изменений, вы можете создать своё собственное ответвление, что нужно сделать чтобы создать собственное ответвление? (Рисунок 88), сделайте ответвление https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и вставьте сюда ссылку на ваше ответвление - https://github.com/MatveyNikiforov/Data-Science-For-Beginners-from-scratch-SENATOROV
# Чтобы сделать свое ответвление, нужно нажать на кнопку Fork
#
# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev - https://github.com/MatveyNikiforov/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш пул реквест:
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/216#issue-comment-box
#
# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории:
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed
#
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? -
# GitHub -> Commits -> скопировать хеш коммита -> в локальном репозитории команда git show --name-only хэш_коммита
#
# Ссылку на коммиты берем: GitHub -> Commits:
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/commit/ccc5f9f633d337ebdb94f5761a619bef04a423c9
#
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно? (Рисунок 117) -
# Чтобы его открыть нужно просто выбрать целевую ветку. Запрос слияние на другой запрос слияние нужен, если у нас есть идея как его улучшить или если у нас нет прав записи в целевую ветку
#
# Рабочий процесс с использованием GitHub
#
# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект -
#
# 1. Создайте форк проекта.
# 2. Создайте тематическую ветку на основании ветки master.
# 3. Создайте один или несколько коммитов с изменениями, улучшающих проект.
# 4. Отправьте эту ветку в ваш проект на GitHub.
# 5. Откройте запрос на слияние на GitHub.
# 6. Обсуждайте его, вносите изменения, если нужно.
# 7. Владелец проекта принимает решение о принятии изменений, либо об их отклонении.
# 8. Получите обновлённую ветку master и отправьте её в свой форк.
#
# 3.1.
#
# Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues? - Fexes/Closes URL_на_isses/номер_issues
#
# Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues? - в названии вставить ссылку на issues, в description вставить closes ссылка_на_isses
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)

# ![alt text](<Снимок экрана 2025-02-25 221508-3.png>)

# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс? - При создании пул реквеста создание issues не обязательно
# 3.4 В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92) - Вкладка Files changed
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94) - Вкладка Conversation
#
# Создание запроса на слияние
#
# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK? - Нет, нельзя
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90) - нажать на кнопку Compare and pull request
# 4.2 Что нужно сделать Если ваш Форк устарел? - нужно изменить его
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96) - нужно изменить свою ветку так, чтобы исключить конфликты, для этого можно либо пребазировать свою ветку относительно целевой ветки, либо слить целевую ветку в свою
#
# Отрывки кода
#
# 5 Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104) - обрамить обратными кавычками
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105) - клавиша r
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108) - вставить ссылку на картинку
#
# Поддержание GitHub репозитория в актуальном состоянии
#
# 6 Как понять что ваш форк устарел? - если появится уведомление "Запрос имеет конфликты слияния"
# 6.1 Как обновить форк? - команда git merge upstream/main
#
# Добавление участников
#
# 7 Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112) - Settings -> Collaborators -> Add collaborator
#
# Упоминания и уведомления
#
# 8 Какой символ нужен для упоминания кого-либо? (Рисунок 118) - символ @
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121) - https://github.com/notifications
#
# Особенные файлы
#
# 9 Что такое и зачем нужен файл README - это первый файл, который может быть в любом формате, нужен для поддержания актуальной информации о проекте для новичков
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122) - второй файл с любым расширением, GitHub будет показывать ссылку на него при создании любого запроса на слияние. В нем можно указать конкретные вещи, которые мы хотим или не хотим видеть в запросах на слияние
#
# Управление проектом
#
# 10 Как измененить основную ветку (Рисунок 123) - Options -> Default branch
# 10.1 Как передать проект? какая кнопка? (рисунок 124) - Options -> Transfer ownership
# 10.2 Что такое файл .gitignore? - файл, который хранит в себе названия других файлов, которые git игнорирует по умолчанию и не видит, но не удаляет
