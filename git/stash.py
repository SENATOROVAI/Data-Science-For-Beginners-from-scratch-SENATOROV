# %% [markdown]
# # Ответы на вопросы по заданию [TASK] STASH #3
#
# 1. Команда  git stash позволяет сохранить все текущие изменения, которые еще не были закоммичены во временное хранилище. 
#
# 2. Если в графическом редакторе, то нужно перейти в раздел раздел 'source control' и напротив changes нажав на '...', в выпадающем меню нужно выбрать 'stash',
# а далее 'view stash...'. Также это возможн сделать в терминале с помощью команды git stash list .
#
# 3-4. В терминале: git stash apply - последний стэш, git stash apply@{1} - по номеру, если это делать в графическом редакторе, то можно применить apply latest stash
# и apply stash... - если нужно по конкретному номеру. Также можно сначала вызвать стэш-список и применить стэш с помощью кнопки справа (стрелочка вверх,
# слева от иконки урны). Эта команда, только применяет стэш, но не удаляет его из списка. 
#
# 5. Команда git stash apply применяет стэш, но не удаляет его, а команда git stash pop и применяет и удаляет.
#
# 6. git stash drop только удаляет стэш.
#
# 7. В терминале - git stash clear, в VS code - drop all stashes... Чтобы не удалить случайно лишнее, рекомендуется перед удалением посмотреть стэш-список.  
#
# 8. Удобно использовать когда нужно переключится на другое задание, ветку, вообщем сделать что-то вне текущей работы, а текущие изменения еще не готовы к коммиту,
# по этому удобно их сохранить во временное хранилище, также во избежания конфликта файлов когда нужно выполнить команды pull или merge. 
#
# 9. Git прервёт выполнение команды и сообщит о ошибке.
#
# 10. Да, но не только если не была запущена команда git gc - это команда очищает неиспользуемые обьекты. Может запускать автоматически, либо програмистом. 
#
# 11. Создает имя для стэш, рекомендуется замена на git stash push -m "NAME_STASH"
#
# 12. Применяет конкретный стэш, но не удаляет его, но написание не верное, нужно написать git stash apply stash@{N}
#
# 13. Применяет конкретный стэш и после удаляет, также неверный синтаксис, замена на git stash pop stash@{N}
