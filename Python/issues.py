"""Ответы на вопросы по работе с Issues на GitHub."""

# ОБЩИЕ ВОПРОСЫ

# 1. Что такое Issues на GitHub и для чего они используются?
#
#        Issues на GitHub — это встроенный инструмент для отслеживания ошибок и управления задачами в репозиториях. 
#        С его помощью участники проекта, используя тикеты, могут сообщать о проблемах, предлагать новые функции, обсуждать улучшения и координировать командную работу.

# 2. Чем Issues отличаются от других инструментов управления задачами?
#
#     Issues являются частью экосистемы GitHub, что позволяет легко ссылаться на коммиты, ветки и конкретные строки кода. Они удобны в использовании, так как не требуют освоения сторонних инструментов. Благодаря глубокой интеграции с репозиторием, простоте и ориентированности на разработку, GitHub Issues особенно хорошо подходят для разработчиков и open-source проектов.

# 3. Какие основные компоненты (поля) есть у каждого Issue?
#
#     * Title: краткое описание задачи или проблемы;
#     * Description: детальное описание задачи или проблемы;
#     * Labels: метки для классификации задачи или проблемы, и их фильтрации;
#     * Assignees: лицо, ответственное за выполнение задачи или решение проблемы;
#     * Projects: проект, к которому относится данный Issue, для организации работы в рамках репозитория;
#     * Milestone: дедлайн или этап разработки, к которому привязан Issue;    
#     * Linked Pull Requests: ссылки на Pull Requests, которые связаны с данным Issue и могут его решать;
#     * Comments: комментарии к Issue;
#     * Author: пользователь, создавший Issue;
#     * State: текущее состояние Issue (например, открыт, закрыт или заархивирован);
#     * Номер Issue (#): уникальный идентификатор, автоматически присваиваемый каждому Issue.

# СОЗДАНИЕ ISSUES

# 4. Как создать новое Issue в репозитории?
#
#     *   выделяем ту часть кода, для которой мы хотим создать Issue;
#     *   для неё выбираем из меню опцию copy permalink;
#     *   выбираем вкладку Issues и нажимаем New issue, 
#     *   выбираем тип Issue и нажимаем Get started; 
#     *   заполняем поля Issue и нажимаем Submit new issue.  

# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#
#     *   краткое описание задачи или проблемы;
#     *   подробное объяснение сути задачи или проблемы (в чём она заключается, когда возникает и др.);
#     *   показать скриншот или запись экрана (при необходимости);
#     *   ожидаемый результат и фактическое состояние;
#     *   трассировка ошибки.

# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#
#    *   bug – обозначает ошибки в коде или работе проекта;
#    *   documentation – указывает на обновление или исправление документации;
#    *   duplicate – помечает дублирующую проблему и содержит ссылку на уже существующий Issue;
#    *   enhancement – используется для предложений по улучшению или добавлению новых функций;
#    *   good first issue – отмечает простые задачи, подходящие для новичков в проекте;
#    *   help wanted – указывает, что для решения данной задачи требуется помощь;
#    *   invalid – означает, что информация в Issue некорректна или не имеет отношения к проекту;
#    *   question – предназначена для вопросов и запросов на уточнение информации;
#    *   wontfix – означает, что данная проблема или задача не будет исправлена или реализована.
#
#    Также пользователи могут создавать кастомные теги: 
#    *   по типу;
#    *   по приоритету;
#    *   по статусу;
#    *   по сложности;
#    *   по команде или области работы;
#    *   для контрибьюторов. 

# 7. Как прикрепить Assignees (ответственных) к Issue?
#
#    На правой панели Issue находится секция "Assignees", на которой можно выбрать ответственных для данного Issue.

# РАБОТА С ISSUES

# 8. Как использовать Labels для классификации задач?
#
#     Labels помогают классифицировать Issues, облегчая их поиск, фильтрацию и группировку по различным параметрам, таким как категория, тип, приоритет и другие характеристики.

# 9. Для чего нужен Milestone, и как связать его с Issue?
#
#     Milestone на GitHub позволяет объединять связанные Issues и Pull Requests, помогая организовать работу над определённой целью или этапом проекта. Этот инструмент используется для планирования и контроля хода разработки.

# 10. Как привязать Issue к пул-реквесту (Pull Request)?
#
#     При создании Pull Request можно привязать его к Issue, указав его номер с помощью #, либо добавив ссылку на соответствующий Issue в описании.

# 11. Как добавить комментарий к существующему Issue?
#
#     Чтобы добавить комментарий к существующему Issue, надо использовать поле для ввода внизу страницы, где можно оставить своё сообщение.

# ЗАКРЫТИЕ И ЗАВЕРШЕНИЕ ISSUES

# 12. Как закрыть Issue вручную?
#
#     Чтобы закрыть Issue вручную, на его странице надо нажать кнопку "Close issue". После этого статус Issue изменится на "Closed".

# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#
#     Да, можно автоматически закрыть Issue, указав в описании коммита или Pull Request фразу "Closes #номер-issue". Это приведет к его закрытию при слиянии коммита или Pull Request.

# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
#
#     На странице закрытого Issue Надо нажать кнопку Reopen issue.

# ФИЛЬТРАЦИЯ И ПОИСК

# 15. Как найти все открытые или закрытые Issues в репозитории?
#
#     На вкладке Issues в репозитории ниже поискового окна можно найти две вкладки: "Open" и "Closed". Там можно выбрать как открытые, так и закрытые Issues.

# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#
#     Для поиска Issues можно использовать следующие фильтры:
#
#     *   По меткам (labels);
#     *   По исполнителям (assignees);
#     *   По статусу (открытые или закрытые) — is:open или is:closed
#     *   По сроку выполнения (milestone);
#     *   По автору (author);
#     *   По типу задачи (например, Pull Request или Issue);
#     *   По датам — created: (дата создания) или updated: (дата обновления).

# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#
#     Для сортировки Issues можно использовать следующие параметры:
#
#     *  По дате создания: is:open sort:created-desc
#     *  По дате последнего обновления: is:open sort:updated-desc
#     *  По приоритету (метки): is:open label:"high priority" sort:created-desc

# ИНТЕГРАЦИИ И АВТОМАТИЗАЦИЯ

# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
#
#     Для получения автоматических уведомлений следует нажать на кнопку Subscribe для любого интересующего нас Issues.

# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
#
#     GitHub Projects — это инструмент для организации и управления задачами в репозиториях, который позволяет создавать доски, отслеживать прогресс и управлять рабочими процессами.
#
#     Чтобы связать Issue с проектом, необходимо перейти в правую часть страницы под разделом "Projects" и выбрать проект, к которому нужно привязать это Issue.

# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#
#     Для автоматизации работы с Issues можно использовать следующие сторонние инструменты:
#
#     *   GitHub Actions — инструмент для автоматизации рабочих процессов внутри GitHub. Он позволяет автоматизировать задачи, такие как управление Issues, запуск тестов, деплой и другие операции.
#
#     *   Probot — фреймворк для создания ботов, который помогает автоматизировать работу с Issues. Например, боты могут автоматически назначать исполнителей, добавлять метки или выполнять другие действия по правилам.
#
#     *   Mergify — бот для автоматизации процесса слияния Pull Requests и управления Issues. Он может автоматически закрывать Issues при слиянии PR и выполнять другие действия, связанные с кодом.
#
#     *   Webhooks — механизм для отправки уведомлений о событиях в репозитории на внешний сервер, который обрабатывает информацию и выполняет необходимые автоматизированные действия, например, интеграции с другими системами.

# КОЛЛАБОРАЦИЯ

# 21. Как упомянуть другого пользователя в комментарии к Issue?
#
#     через @username

# 22. Как запросить дополнительные данные или уточнения у автора Issue?
#
#     Необходимо добавить к соответствующему Issue комментарий, содержащий запрос о предоставлении дополнительных данных или уточнения.

# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
#
#     Если Issue становится неактуальным или его нужно объединить с другим, нужно оставить комментарий, указав ссылку на основное Issue и пояснив, что оно будет объединено с ним.

# ПРАКТИЧЕСКИЕ АСПЕКТЫ

# 24. Как использовать шаблоны для создания Issues?
#
#     Существует четыре типа шаблонов для создания Issues:
#
#     *   Bug report — используется для сообщения об ошибке.
#     *   Feature request — предназначен для предложений новых функций или улучшений.
#     *   Other — подходит для общих вопросов и обсуждений.
#     *   Telegram community — содержит ссылку на сообщество в Telegram, где можно задать вопрос.

# 25. Что такое Linked Issues, и как создать связь между задачами?
#
#     Linked Issues на GitHub позволяют устанавливать взаимосвязь между несколькими Issues, что упрощает отслеживание зависимостей, связанных проблем или этапов разработки. Это помогает структурировать процесс выполнения задач, особенно если они должны быть решены в определённом порядке.
#
#     Чтобы связать Issues, следует добавьте в описание или комментарий Issue ссылку на другое Issue. Также можно использовать специальный раздел "Linked issues", если он доступен.

# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
#
#     С помощью Issues можно отслеживать ключевые метрики, такие как:
#     *   Время выполнения — от создания до закрытия задачи.
#     *   Количество открытых и закрытых Issues — для анализа прогресса.
#     *   Процент выполнения — оценка завершённости задач.
#     *   Распределение задач между исполнителями — баланс нагрузки.
#
#     Дополнительно можно учитывать частоту обновлений, время реакции, сроки решения и классификацию Issues по типам.

# 27. Какие best practices рекомендуются при работе с Issues в команде?
#
#     Рекомендуемые практики при работе с Issues в команде:
#
#     *   Используйте метки для классификации задач.
#     *   Формулируйте чёткие заголовки и описания.
#     *   Назначайте ответственных за выполнение.
#     *   Устанавливайте сроки и привязывайте к milestones.
#     *   Поддерживайте активное обсуждение внутри команды.
